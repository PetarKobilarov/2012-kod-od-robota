
bigThrashCanCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00007d62  00007df6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007d62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000104  0080016e  0080016e  00007e64  2**0
                  ALLOC
  3 .debug_aranges 00000120  00000000  00000000  00007e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000590  00000000  00000000  00007f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000026f1  00000000  00000000  00008514  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007da  00000000  00000000  0000ac05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004127  00000000  00000000  0000b3df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005e8  00000000  00000000  0000f508  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a92  00000000  00000000  0000faf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e4  00000000  00000000  00010582  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00010866  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__ctors_end>
       4:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
       8:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
       c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      10:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      14:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      18:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      1c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      20:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      24:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      28:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      2c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      30:	0c 94 a0 38 	jmp	0x7140	; 0x7140 <__vector_12>
      34:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      38:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      3c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      40:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      44:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      48:	0c 94 9d 39 	jmp	0x733a	; 0x733a <__vector_18>
      4c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      50:	0c 94 21 39 	jmp	0x7242	; 0x7242 <__vector_20>
      54:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      58:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      5c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      60:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      64:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      68:	0c 94 d2 38 	jmp	0x71a4	; 0x71a4 <__vector_26>
      6c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      70:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      74:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      78:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      7c:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      80:	0c 94 2c 3a 	jmp	0x7458	; 0x7458 <__vector_32>
      84:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      88:	0c 94 cc 00 	jmp	0x198	; 0x198 <__bad_interrupt>
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	std	Y+51, r6	; 0x33
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 05       	cpc	r19, r15
      ba:	a8 4c       	sbci	r26, 0xC8	; 200
      bc:	cd b2       	in	r12, 0x1d	; 29
      be:	d4 4e       	sbci	r29, 0xE4	; 228
      c0:	b9 38       	cpi	r27, 0x89	; 137
      c2:	36 a9       	ldd	r19, Z+54	; 0x36
      c4:	02 0c       	add	r0, r2
      c6:	50 b9       	out	0x00, r21	; 0
      c8:	91 86       	std	Z+9, r9	; 0x09
      ca:	88 08       	sbc	r8, r8
      cc:	3c a6       	std	Y+44, r3	; 0x2c
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	2a be       	out	0x3a, r2	; 58
      d2:	00 00       	nop
      d4:	00 80       	ld	r0, Z
      d6:	3f 24       	eor	r3, r15

000000d7 <pathXBlue>:
      d7:	24 0a b8 06 14 05 64 0a 28 0a 8c 0a 8c 0a 8c 0a     $.....d.(.......
      e7:	4d 08                                               M.

000000e9 <pathYBlue>:
      e9:	fc 08 90 06 c5 08 79 09 db 0b 8a 07 64 05 02 0d     ......y.....d...
      f9:	0c 0d                                               ..

000000fb <directionBlue>:
      fb:	01 ff ff ff 01 01 01 ff ff                          .........

00000104 <pathXBlueAlt>:
     104:	b4 0a b4 0a 60 09 60 09                             ....`.`.

0000010c <pathYBlueAlt>:
     10c:	72 06 88 09 88 09 90 06                             r.......

00000114 <directionBlueAlt>:
     114:	01 ff 01 01                                         ....

00000118 <pathXRed>:
     118:	24 0a b8 06 14 05 64 0a 28 0a 8c 0a 8c 0a 8c 0a     $.....d.(.......
     128:	4d 08                                               M.

0000012a <pathYRed>:
     12a:	8c 0a f8 0c c3 0a 23 0a ad 07 fe 0b 24 0e 86 06     ......#.....$...
     13a:	7c 06                                               |.

0000013c <directionRed>:
     13c:	01 ff ff ff 01 01 01 ff ff                          .........

00000145 <pathXRedAlt>:
     145:	b4 0a b4 0a 60 09 60 09                             ....`.`.

0000014d <pathYRedAlt>:
     14d:	16 0d 0a 0a f6 09 f8 0c                             ........

00000155 <directionRedAlt>:
     155:	01 ff 01 01 00                                      .....

0000015a <__ctors_end>:
     15a:	11 24       	eor	r1, r1
     15c:	1f be       	out	0x3f, r1	; 63
     15e:	cf ef       	ldi	r28, 0xFF	; 255
     160:	d0 e1       	ldi	r29, 0x10	; 16
     162:	de bf       	out	0x3e, r29	; 62
     164:	cd bf       	out	0x3d, r28	; 61

00000166 <__do_copy_data>:
     166:	11 e0       	ldi	r17, 0x01	; 1
     168:	a0 e0       	ldi	r26, 0x00	; 0
     16a:	b1 e0       	ldi	r27, 0x01	; 1
     16c:	e2 e6       	ldi	r30, 0x62	; 98
     16e:	fd e7       	ldi	r31, 0x7D	; 125
     170:	00 e0       	ldi	r16, 0x00	; 0
     172:	0b bf       	out	0x3b, r16	; 59
     174:	02 c0       	rjmp	.+4      	; 0x17a <__do_copy_data+0x14>
     176:	07 90       	elpm	r0, Z+
     178:	0d 92       	st	X+, r0
     17a:	ae 36       	cpi	r26, 0x6E	; 110
     17c:	b1 07       	cpc	r27, r17
     17e:	d9 f7       	brne	.-10     	; 0x176 <__do_copy_data+0x10>

00000180 <__do_clear_bss>:
     180:	12 e0       	ldi	r17, 0x02	; 2
     182:	ae e6       	ldi	r26, 0x6E	; 110
     184:	b1 e0       	ldi	r27, 0x01	; 1
     186:	01 c0       	rjmp	.+2      	; 0x18a <.do_clear_bss_start>

00000188 <.do_clear_bss_loop>:
     188:	1d 92       	st	X+, r1

0000018a <.do_clear_bss_start>:
     18a:	a2 37       	cpi	r26, 0x72	; 114
     18c:	b1 07       	cpc	r27, r17
     18e:	e1 f7       	brne	.-8      	; 0x188 <.do_clear_bss_loop>
     190:	0e 94 2f 03 	call	0x65e	; 0x65e <main>
     194:	0c 94 af 3e 	jmp	0x7d5e	; 0x7d5e <_exit>

00000198 <__bad_interrupt>:
     198:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019c <adcInit>:
     19c:	cf 93       	push	r28
     19e:	df 93       	push	r29
     1a0:	cd b7       	in	r28, 0x3d	; 61
     1a2:	de b7       	in	r29, 0x3e	; 62
     1a4:	86 e2       	ldi	r24, 0x26	; 38
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	23 e8       	ldi	r18, 0x83	; 131
     1aa:	fc 01       	movw	r30, r24
     1ac:	20 83       	st	Z, r18
     1ae:	87 e2       	ldi	r24, 0x27	; 39
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	20 e4       	ldi	r18, 0x40	; 64
     1b4:	fc 01       	movw	r30, r24
     1b6:	20 83       	st	Z, r18
     1b8:	df 91       	pop	r29
     1ba:	cf 91       	pop	r28
     1bc:	08 95       	ret

000001be <adcRead>:
     1be:	0f 93       	push	r16
     1c0:	1f 93       	push	r17
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
     1c6:	cd b7       	in	r28, 0x3d	; 61
     1c8:	de b7       	in	r29, 0x3e	; 62
     1ca:	6b 97       	sbiw	r28, 0x1b	; 27
     1cc:	0f b6       	in	r0, 0x3f	; 63
     1ce:	f8 94       	cli
     1d0:	de bf       	out	0x3e, r29	; 62
     1d2:	0f be       	out	0x3f, r0	; 63
     1d4:	cd bf       	out	0x3d, r28	; 61
     1d6:	8b 8f       	std	Y+27, r24	; 0x1b
     1d8:	87 e2       	ldi	r24, 0x27	; 39
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	2b 8d       	ldd	r18, Y+27	; 0x1b
     1de:	20 64       	ori	r18, 0x40	; 64
     1e0:	fc 01       	movw	r30, r24
     1e2:	20 83       	st	Z, r18
     1e4:	86 e2       	ldi	r24, 0x26	; 38
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	26 e2       	ldi	r18, 0x26	; 38
     1ea:	30 e0       	ldi	r19, 0x00	; 0
     1ec:	f9 01       	movw	r30, r18
     1ee:	20 81       	ld	r18, Z
     1f0:	20 64       	ori	r18, 0x40	; 64
     1f2:	fc 01       	movw	r30, r24
     1f4:	20 83       	st	Z, r18
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	a0 ea       	ldi	r26, 0xA0	; 160
     1fc:	b1 e4       	ldi	r27, 0x41	; 65
     1fe:	8b 83       	std	Y+3, r24	; 0x03
     200:	9c 83       	std	Y+4, r25	; 0x04
     202:	ad 83       	std	Y+5, r26	; 0x05
     204:	be 83       	std	Y+6, r27	; 0x06
     206:	6b 81       	ldd	r22, Y+3	; 0x03
     208:	7c 81       	ldd	r23, Y+4	; 0x04
     20a:	8d 81       	ldd	r24, Y+5	; 0x05
     20c:	9e 81       	ldd	r25, Y+6	; 0x06
     20e:	2a ef       	ldi	r18, 0xFA	; 250
     210:	3d ee       	ldi	r19, 0xED	; 237
     212:	4b e6       	ldi	r20, 0x6B	; 107
     214:	50 e4       	ldi	r21, 0x40	; 64
     216:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
     21a:	dc 01       	movw	r26, r24
     21c:	cb 01       	movw	r24, r22
     21e:	8f 83       	std	Y+7, r24	; 0x07
     220:	98 87       	std	Y+8, r25	; 0x08
     222:	a9 87       	std	Y+9, r26	; 0x09
     224:	ba 87       	std	Y+10, r27	; 0x0a
     226:	11 e0       	ldi	r17, 0x01	; 1
     228:	6f 81       	ldd	r22, Y+7	; 0x07
     22a:	78 85       	ldd	r23, Y+8	; 0x08
     22c:	89 85       	ldd	r24, Y+9	; 0x09
     22e:	9a 85       	ldd	r25, Y+10	; 0x0a
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	40 e8       	ldi	r20, 0x80	; 128
     236:	5f e3       	ldi	r21, 0x3F	; 63
     238:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
     23c:	88 23       	and	r24, r24
     23e:	0c f0       	brlt	.+2      	; 0x242 <adcRead+0x84>
     240:	10 e0       	ldi	r17, 0x00	; 0
     242:	11 23       	and	r17, r17
     244:	19 f0       	breq	.+6      	; 0x24c <adcRead+0x8e>
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	8b 87       	std	Y+11, r24	; 0x0b
     24a:	a3 c0       	rjmp	.+326    	; 0x392 <adcRead+0x1d4>
     24c:	11 e0       	ldi	r17, 0x01	; 1
     24e:	6f 81       	ldd	r22, Y+7	; 0x07
     250:	78 85       	ldd	r23, Y+8	; 0x08
     252:	89 85       	ldd	r24, Y+9	; 0x09
     254:	9a 85       	ldd	r25, Y+10	; 0x0a
     256:	20 e0       	ldi	r18, 0x00	; 0
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	4f e7       	ldi	r20, 0x7F	; 127
     25c:	53 e4       	ldi	r21, 0x43	; 67
     25e:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
     262:	18 16       	cp	r1, r24
     264:	0c f0       	brlt	.+2      	; 0x268 <adcRead+0xaa>
     266:	10 e0       	ldi	r17, 0x00	; 0
     268:	11 23       	and	r17, r17
     26a:	09 f4       	brne	.+2      	; 0x26e <adcRead+0xb0>
     26c:	89 c0       	rjmp	.+274    	; 0x380 <adcRead+0x1c2>
     26e:	6b 81       	ldd	r22, Y+3	; 0x03
     270:	7c 81       	ldd	r23, Y+4	; 0x04
     272:	8d 81       	ldd	r24, Y+5	; 0x05
     274:	9e 81       	ldd	r25, Y+6	; 0x06
     276:	20 e0       	ldi	r18, 0x00	; 0
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	4a e7       	ldi	r20, 0x7A	; 122
     27c:	54 e4       	ldi	r21, 0x44	; 68
     27e:	0e 94 a4 3b 	call	0x7748	; 0x7748 <__divsf3>
     282:	dc 01       	movw	r26, r24
     284:	cb 01       	movw	r24, r22
     286:	8c 87       	std	Y+12, r24	; 0x0c
     288:	9d 87       	std	Y+13, r25	; 0x0d
     28a:	ae 87       	std	Y+14, r26	; 0x0e
     28c:	bf 87       	std	Y+15, r27	; 0x0f
     28e:	6c 85       	ldd	r22, Y+12	; 0x0c
     290:	7d 85       	ldd	r23, Y+13	; 0x0d
     292:	8e 85       	ldd	r24, Y+14	; 0x0e
     294:	9f 85       	ldd	r25, Y+15	; 0x0f
     296:	2d ec       	ldi	r18, 0xCD	; 205
     298:	3c ec       	ldi	r19, 0xCC	; 204
     29a:	4c e2       	ldi	r20, 0x2C	; 44
     29c:	55 e4       	ldi	r21, 0x45	; 69
     29e:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
     2a2:	dc 01       	movw	r26, r24
     2a4:	cb 01       	movw	r24, r22
     2a6:	88 8b       	std	Y+16, r24	; 0x10
     2a8:	99 8b       	std	Y+17, r25	; 0x11
     2aa:	aa 8b       	std	Y+18, r26	; 0x12
     2ac:	bb 8b       	std	Y+19, r27	; 0x13
     2ae:	11 e0       	ldi	r17, 0x01	; 1
     2b0:	68 89       	ldd	r22, Y+16	; 0x10
     2b2:	79 89       	ldd	r23, Y+17	; 0x11
     2b4:	8a 89       	ldd	r24, Y+18	; 0x12
     2b6:	9b 89       	ldd	r25, Y+19	; 0x13
     2b8:	20 e0       	ldi	r18, 0x00	; 0
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e8       	ldi	r20, 0x80	; 128
     2be:	5f e3       	ldi	r21, 0x3F	; 63
     2c0:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
     2c4:	88 23       	and	r24, r24
     2c6:	0c f0       	brlt	.+2      	; 0x2ca <adcRead+0x10c>
     2c8:	10 e0       	ldi	r17, 0x00	; 0
     2ca:	11 23       	and	r17, r17
     2cc:	29 f0       	breq	.+10     	; 0x2d8 <adcRead+0x11a>
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	9d 8b       	std	Y+21, r25	; 0x15
     2d4:	8c 8b       	std	Y+20, r24	; 0x14
     2d6:	46 c0       	rjmp	.+140    	; 0x364 <adcRead+0x1a6>
     2d8:	11 e0       	ldi	r17, 0x01	; 1
     2da:	68 89       	ldd	r22, Y+16	; 0x10
     2dc:	79 89       	ldd	r23, Y+17	; 0x11
     2de:	8a 89       	ldd	r24, Y+18	; 0x12
     2e0:	9b 89       	ldd	r25, Y+19	; 0x13
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	3f ef       	ldi	r19, 0xFF	; 255
     2e6:	4f e7       	ldi	r20, 0x7F	; 127
     2e8:	57 e4       	ldi	r21, 0x47	; 71
     2ea:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
     2ee:	18 16       	cp	r1, r24
     2f0:	0c f0       	brlt	.+2      	; 0x2f4 <adcRead+0x136>
     2f2:	10 e0       	ldi	r17, 0x00	; 0
     2f4:	11 23       	and	r17, r17
     2f6:	61 f1       	breq	.+88     	; 0x350 <adcRead+0x192>
     2f8:	6c 85       	ldd	r22, Y+12	; 0x0c
     2fa:	7d 85       	ldd	r23, Y+13	; 0x0d
     2fc:	8e 85       	ldd	r24, Y+14	; 0x0e
     2fe:	9f 85       	ldd	r25, Y+15	; 0x0f
     300:	20 e0       	ldi	r18, 0x00	; 0
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	40 e2       	ldi	r20, 0x20	; 32
     306:	51 e4       	ldi	r21, 0x41	; 65
     308:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
     30c:	dc 01       	movw	r26, r24
     30e:	cb 01       	movw	r24, r22
     310:	bc 01       	movw	r22, r24
     312:	cd 01       	movw	r24, r26
     314:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
     318:	dc 01       	movw	r26, r24
     31a:	cb 01       	movw	r24, r22
     31c:	9d 8b       	std	Y+21, r25	; 0x15
     31e:	8c 8b       	std	Y+20, r24	; 0x14
     320:	12 c0       	rjmp	.+36     	; 0x346 <adcRead+0x188>
     322:	84 e1       	ldi	r24, 0x14	; 20
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	9f 8b       	std	Y+23, r25	; 0x17
     328:	8e 8b       	std	Y+22, r24	; 0x16
     32a:	8e 89       	ldd	r24, Y+22	; 0x16
     32c:	9f 89       	ldd	r25, Y+23	; 0x17
     32e:	8c 01       	movw	r16, r24
     330:	c8 01       	movw	r24, r16
     332:	01 97       	sbiw	r24, 0x01	; 1
     334:	f1 f7       	brne	.-4      	; 0x332 <adcRead+0x174>
     336:	8c 01       	movw	r16, r24
     338:	1f 8b       	std	Y+23, r17	; 0x17
     33a:	0e 8b       	std	Y+22, r16	; 0x16
     33c:	8c 89       	ldd	r24, Y+20	; 0x14
     33e:	9d 89       	ldd	r25, Y+21	; 0x15
     340:	01 97       	sbiw	r24, 0x01	; 1
     342:	9d 8b       	std	Y+21, r25	; 0x15
     344:	8c 8b       	std	Y+20, r24	; 0x14
     346:	8c 89       	ldd	r24, Y+20	; 0x14
     348:	9d 89       	ldd	r25, Y+21	; 0x15
     34a:	00 97       	sbiw	r24, 0x00	; 0
     34c:	51 f7       	brne	.-44     	; 0x322 <adcRead+0x164>
     34e:	29 c0       	rjmp	.+82     	; 0x3a2 <adcRead+0x1e4>
     350:	68 89       	ldd	r22, Y+16	; 0x10
     352:	79 89       	ldd	r23, Y+17	; 0x11
     354:	8a 89       	ldd	r24, Y+18	; 0x12
     356:	9b 89       	ldd	r25, Y+19	; 0x13
     358:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
     35c:	dc 01       	movw	r26, r24
     35e:	cb 01       	movw	r24, r22
     360:	9d 8b       	std	Y+21, r25	; 0x15
     362:	8c 8b       	std	Y+20, r24	; 0x14
     364:	8c 89       	ldd	r24, Y+20	; 0x14
     366:	9d 89       	ldd	r25, Y+21	; 0x15
     368:	99 8f       	std	Y+25, r25	; 0x19
     36a:	88 8f       	std	Y+24, r24	; 0x18
     36c:	88 8d       	ldd	r24, Y+24	; 0x18
     36e:	99 8d       	ldd	r25, Y+25	; 0x19
     370:	8c 01       	movw	r16, r24
     372:	f8 01       	movw	r30, r16
     374:	31 97       	sbiw	r30, 0x01	; 1
     376:	f1 f7       	brne	.-4      	; 0x374 <adcRead+0x1b6>
     378:	8f 01       	movw	r16, r30
     37a:	19 8f       	std	Y+25, r17	; 0x19
     37c:	08 8f       	std	Y+24, r16	; 0x18
     37e:	11 c0       	rjmp	.+34     	; 0x3a2 <adcRead+0x1e4>
     380:	6f 81       	ldd	r22, Y+7	; 0x07
     382:	78 85       	ldd	r23, Y+8	; 0x08
     384:	89 85       	ldd	r24, Y+9	; 0x09
     386:	9a 85       	ldd	r25, Y+10	; 0x0a
     388:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
     38c:	dc 01       	movw	r26, r24
     38e:	cb 01       	movw	r24, r22
     390:	8b 87       	std	Y+11, r24	; 0x0b
     392:	8b 85       	ldd	r24, Y+11	; 0x0b
     394:	8a 8f       	std	Y+26, r24	; 0x1a
     396:	8a 8d       	ldd	r24, Y+26	; 0x1a
     398:	18 2f       	mov	r17, r24
     39a:	1a 95       	dec	r17
     39c:	f1 f7       	brne	.-4      	; 0x39a <adcRead+0x1dc>
     39e:	1a 8f       	std	Y+26, r17	; 0x1a
     3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <adcRead+0x1e4>
     3a2:	00 00       	nop
     3a4:	86 e2       	ldi	r24, 0x26	; 38
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	fc 01       	movw	r30, r24
     3aa:	80 81       	ld	r24, Z
     3ac:	82 95       	swap	r24
     3ae:	8f 70       	andi	r24, 0x0F	; 15
     3b0:	88 2f       	mov	r24, r24
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	81 70       	andi	r24, 0x01	; 1
     3b6:	90 70       	andi	r25, 0x00	; 0
     3b8:	00 97       	sbiw	r24, 0x00	; 0
     3ba:	a1 f3       	breq	.-24     	; 0x3a4 <adcRead+0x1e6>
     3bc:	86 e2       	ldi	r24, 0x26	; 38
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	26 e2       	ldi	r18, 0x26	; 38
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	f9 01       	movw	r30, r18
     3c6:	20 81       	ld	r18, Z
     3c8:	20 61       	ori	r18, 0x10	; 16
     3ca:	fc 01       	movw	r30, r24
     3cc:	20 83       	st	Z, r18
     3ce:	84 e2       	ldi	r24, 0x24	; 36
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	fc 01       	movw	r30, r24
     3d4:	80 81       	ld	r24, Z
     3d6:	28 2f       	mov	r18, r24
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	85 e2       	ldi	r24, 0x25	; 37
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	fc 01       	movw	r30, r24
     3e0:	80 81       	ld	r24, Z
     3e2:	88 2f       	mov	r24, r24
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	98 2f       	mov	r25, r24
     3e8:	88 27       	eor	r24, r24
     3ea:	82 2b       	or	r24, r18
     3ec:	93 2b       	or	r25, r19
     3ee:	9a 83       	std	Y+2, r25	; 0x02
     3f0:	89 83       	std	Y+1, r24	; 0x01
     3f2:	89 81       	ldd	r24, Y+1	; 0x01
     3f4:	9a 81       	ldd	r25, Y+2	; 0x02
     3f6:	6b 96       	adiw	r28, 0x1b	; 27
     3f8:	0f b6       	in	r0, 0x3f	; 63
     3fa:	f8 94       	cli
     3fc:	de bf       	out	0x3e, r29	; 62
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	cd bf       	out	0x3d, r28	; 61
     402:	df 91       	pop	r29
     404:	cf 91       	pop	r28
     406:	1f 91       	pop	r17
     408:	0f 91       	pop	r16
     40a:	08 95       	ret

0000040c <distancaProtivnika>:
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
     414:	29 97       	sbiw	r28, 0x09	; 9
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	f8 94       	cli
     41a:	de bf       	out	0x3e, r29	; 62
     41c:	0f be       	out	0x3f, r0	; 63
     41e:	cd bf       	out	0x3d, r28	; 61
     420:	89 87       	std	Y+9, r24	; 0x09
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	dc 01       	movw	r26, r24
     428:	8d 83       	std	Y+5, r24	; 0x05
     42a:	9e 83       	std	Y+6, r25	; 0x06
     42c:	af 83       	std	Y+7, r26	; 0x07
     42e:	b8 87       	std	Y+8, r27	; 0x08
     430:	89 85       	ldd	r24, Y+9	; 0x09
     432:	8f 3f       	cpi	r24, 0xFF	; 255
     434:	89 f4       	brne	.+34     	; 0x458 <distancaProtivnika+0x4c>
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	0e 94 df 00 	call	0x1be	; 0x1be <adcRead>
     43c:	cc 01       	movw	r24, r24
     43e:	a0 e0       	ldi	r26, 0x00	; 0
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	bc 01       	movw	r22, r24
     444:	cd 01       	movw	r24, r26
     446:	0e 94 3d 3c 	call	0x787a	; 0x787a <__floatunsisf>
     44a:	dc 01       	movw	r26, r24
     44c:	cb 01       	movw	r24, r22
     44e:	89 83       	std	Y+1, r24	; 0x01
     450:	9a 83       	std	Y+2, r25	; 0x02
     452:	ab 83       	std	Y+3, r26	; 0x03
     454:	bc 83       	std	Y+4, r27	; 0x04
     456:	10 c0       	rjmp	.+32     	; 0x478 <distancaProtivnika+0x6c>
     458:	87 e0       	ldi	r24, 0x07	; 7
     45a:	0e 94 df 00 	call	0x1be	; 0x1be <adcRead>
     45e:	cc 01       	movw	r24, r24
     460:	a0 e0       	ldi	r26, 0x00	; 0
     462:	b0 e0       	ldi	r27, 0x00	; 0
     464:	bc 01       	movw	r22, r24
     466:	cd 01       	movw	r24, r26
     468:	0e 94 3d 3c 	call	0x787a	; 0x787a <__floatunsisf>
     46c:	dc 01       	movw	r26, r24
     46e:	cb 01       	movw	r24, r22
     470:	89 83       	std	Y+1, r24	; 0x01
     472:	9a 83       	std	Y+2, r25	; 0x02
     474:	ab 83       	std	Y+3, r26	; 0x03
     476:	bc 83       	std	Y+4, r27	; 0x04
     478:	69 81       	ldd	r22, Y+1	; 0x01
     47a:	7a 81       	ldd	r23, Y+2	; 0x02
     47c:	8b 81       	ldd	r24, Y+3	; 0x03
     47e:	9c 81       	ldd	r25, Y+4	; 0x04
     480:	20 e0       	ldi	r18, 0x00	; 0
     482:	30 e0       	ldi	r19, 0x00	; 0
     484:	40 ea       	ldi	r20, 0xA0	; 160
     486:	50 e4       	ldi	r21, 0x40	; 64
     488:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <__addsf3>
     48c:	dc 01       	movw	r26, r24
     48e:	cb 01       	movw	r24, r22
     490:	9c 01       	movw	r18, r24
     492:	ad 01       	movw	r20, r26
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	70 e2       	ldi	r23, 0x20	; 32
     498:	86 e3       	ldi	r24, 0x36	; 54
     49a:	95 e4       	ldi	r25, 0x45	; 69
     49c:	0e 94 a4 3b 	call	0x7748	; 0x7748 <__divsf3>
     4a0:	dc 01       	movw	r26, r24
     4a2:	cb 01       	movw	r24, r22
     4a4:	bc 01       	movw	r22, r24
     4a6:	cd 01       	movw	r24, r26
     4a8:	20 e0       	ldi	r18, 0x00	; 0
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	40 ec       	ldi	r20, 0xC0	; 192
     4ae:	5f e3       	ldi	r21, 0x3F	; 63
     4b0:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <__subsf3>
     4b4:	dc 01       	movw	r26, r24
     4b6:	cb 01       	movw	r24, r22
     4b8:	8d 83       	std	Y+5, r24	; 0x05
     4ba:	9e 83       	std	Y+6, r25	; 0x06
     4bc:	af 83       	std	Y+7, r26	; 0x07
     4be:	b8 87       	std	Y+8, r27	; 0x08
     4c0:	6d 81       	ldd	r22, Y+5	; 0x05
     4c2:	7e 81       	ldd	r23, Y+6	; 0x06
     4c4:	8f 81       	ldd	r24, Y+7	; 0x07
     4c6:	98 85       	ldd	r25, Y+8	; 0x08
     4c8:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
     4cc:	dc 01       	movw	r26, r24
     4ce:	cb 01       	movw	r24, r22
     4d0:	29 96       	adiw	r28, 0x09	; 9
     4d2:	0f b6       	in	r0, 0x3f	; 63
     4d4:	f8 94       	cli
     4d6:	de bf       	out	0x3e, r29	; 62
     4d8:	0f be       	out	0x3f, r0	; 63
     4da:	cd bf       	out	0x3d, r28	; 61
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	08 95       	ret

000004e2 <proveriProtivnika>:
     4e2:	0f 93       	push	r16
     4e4:	1f 93       	push	r17
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	cd b7       	in	r28, 0x3d	; 61
     4ec:	de b7       	in	r29, 0x3e	; 62
     4ee:	65 97       	sbiw	r28, 0x15	; 21
     4f0:	0f b6       	in	r0, 0x3f	; 63
     4f2:	f8 94       	cli
     4f4:	de bf       	out	0x3e, r29	; 62
     4f6:	0f be       	out	0x3f, r0	; 63
     4f8:	cd bf       	out	0x3d, r28	; 61
     4fa:	8b 8b       	std	Y+19, r24	; 0x13
     4fc:	7d 8b       	std	Y+21, r23	; 0x15
     4fe:	6c 8b       	std	Y+20, r22	; 0x14
     500:	19 82       	std	Y+1, r1	; 0x01
     502:	1a 82       	std	Y+2, r1	; 0x02
     504:	97 c0       	rjmp	.+302    	; 0x634 <proveriProtivnika+0x152>
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	a0 ea       	ldi	r26, 0xA0	; 160
     50c:	b1 e4       	ldi	r27, 0x41	; 65
     50e:	8d 83       	std	Y+5, r24	; 0x05
     510:	9e 83       	std	Y+6, r25	; 0x06
     512:	af 83       	std	Y+7, r26	; 0x07
     514:	b8 87       	std	Y+8, r27	; 0x08
     516:	6d 81       	ldd	r22, Y+5	; 0x05
     518:	7e 81       	ldd	r23, Y+6	; 0x06
     51a:	8f 81       	ldd	r24, Y+7	; 0x07
     51c:	98 85       	ldd	r25, Y+8	; 0x08
     51e:	2d ec       	ldi	r18, 0xCD	; 205
     520:	3c ec       	ldi	r19, 0xCC	; 204
     522:	4c e2       	ldi	r20, 0x2C	; 44
     524:	55 e4       	ldi	r21, 0x45	; 69
     526:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
     52a:	dc 01       	movw	r26, r24
     52c:	cb 01       	movw	r24, r22
     52e:	89 87       	std	Y+9, r24	; 0x09
     530:	9a 87       	std	Y+10, r25	; 0x0a
     532:	ab 87       	std	Y+11, r26	; 0x0b
     534:	bc 87       	std	Y+12, r27	; 0x0c
     536:	11 e0       	ldi	r17, 0x01	; 1
     538:	69 85       	ldd	r22, Y+9	; 0x09
     53a:	7a 85       	ldd	r23, Y+10	; 0x0a
     53c:	8b 85       	ldd	r24, Y+11	; 0x0b
     53e:	9c 85       	ldd	r25, Y+12	; 0x0c
     540:	20 e0       	ldi	r18, 0x00	; 0
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	40 e8       	ldi	r20, 0x80	; 128
     546:	5f e3       	ldi	r21, 0x3F	; 63
     548:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
     54c:	88 23       	and	r24, r24
     54e:	0c f0       	brlt	.+2      	; 0x552 <proveriProtivnika+0x70>
     550:	10 e0       	ldi	r17, 0x00	; 0
     552:	11 23       	and	r17, r17
     554:	29 f0       	breq	.+10     	; 0x560 <proveriProtivnika+0x7e>
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	9e 87       	std	Y+14, r25	; 0x0e
     55c:	8d 87       	std	Y+13, r24	; 0x0d
     55e:	46 c0       	rjmp	.+140    	; 0x5ec <proveriProtivnika+0x10a>
     560:	11 e0       	ldi	r17, 0x01	; 1
     562:	69 85       	ldd	r22, Y+9	; 0x09
     564:	7a 85       	ldd	r23, Y+10	; 0x0a
     566:	8b 85       	ldd	r24, Y+11	; 0x0b
     568:	9c 85       	ldd	r25, Y+12	; 0x0c
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	3f ef       	ldi	r19, 0xFF	; 255
     56e:	4f e7       	ldi	r20, 0x7F	; 127
     570:	57 e4       	ldi	r21, 0x47	; 71
     572:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
     576:	18 16       	cp	r1, r24
     578:	0c f0       	brlt	.+2      	; 0x57c <proveriProtivnika+0x9a>
     57a:	10 e0       	ldi	r17, 0x00	; 0
     57c:	11 23       	and	r17, r17
     57e:	61 f1       	breq	.+88     	; 0x5d8 <proveriProtivnika+0xf6>
     580:	6d 81       	ldd	r22, Y+5	; 0x05
     582:	7e 81       	ldd	r23, Y+6	; 0x06
     584:	8f 81       	ldd	r24, Y+7	; 0x07
     586:	98 85       	ldd	r25, Y+8	; 0x08
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	40 e2       	ldi	r20, 0x20	; 32
     58e:	51 e4       	ldi	r21, 0x41	; 65
     590:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
     594:	dc 01       	movw	r26, r24
     596:	cb 01       	movw	r24, r22
     598:	bc 01       	movw	r22, r24
     59a:	cd 01       	movw	r24, r26
     59c:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
     5a0:	dc 01       	movw	r26, r24
     5a2:	cb 01       	movw	r24, r22
     5a4:	9e 87       	std	Y+14, r25	; 0x0e
     5a6:	8d 87       	std	Y+13, r24	; 0x0d
     5a8:	12 c0       	rjmp	.+36     	; 0x5ce <proveriProtivnika+0xec>
     5aa:	84 e1       	ldi	r24, 0x14	; 20
     5ac:	91 e0       	ldi	r25, 0x01	; 1
     5ae:	98 8b       	std	Y+16, r25	; 0x10
     5b0:	8f 87       	std	Y+15, r24	; 0x0f
     5b2:	8f 85       	ldd	r24, Y+15	; 0x0f
     5b4:	98 89       	ldd	r25, Y+16	; 0x10
     5b6:	8c 01       	movw	r16, r24
     5b8:	c8 01       	movw	r24, r16
     5ba:	01 97       	sbiw	r24, 0x01	; 1
     5bc:	f1 f7       	brne	.-4      	; 0x5ba <proveriProtivnika+0xd8>
     5be:	8c 01       	movw	r16, r24
     5c0:	18 8b       	std	Y+16, r17	; 0x10
     5c2:	0f 87       	std	Y+15, r16	; 0x0f
     5c4:	8d 85       	ldd	r24, Y+13	; 0x0d
     5c6:	9e 85       	ldd	r25, Y+14	; 0x0e
     5c8:	01 97       	sbiw	r24, 0x01	; 1
     5ca:	9e 87       	std	Y+14, r25	; 0x0e
     5cc:	8d 87       	std	Y+13, r24	; 0x0d
     5ce:	8d 85       	ldd	r24, Y+13	; 0x0d
     5d0:	9e 85       	ldd	r25, Y+14	; 0x0e
     5d2:	00 97       	sbiw	r24, 0x00	; 0
     5d4:	51 f7       	brne	.-44     	; 0x5aa <proveriProtivnika+0xc8>
     5d6:	17 c0       	rjmp	.+46     	; 0x606 <proveriProtivnika+0x124>
     5d8:	69 85       	ldd	r22, Y+9	; 0x09
     5da:	7a 85       	ldd	r23, Y+10	; 0x0a
     5dc:	8b 85       	ldd	r24, Y+11	; 0x0b
     5de:	9c 85       	ldd	r25, Y+12	; 0x0c
     5e0:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
     5e4:	dc 01       	movw	r26, r24
     5e6:	cb 01       	movw	r24, r22
     5e8:	9e 87       	std	Y+14, r25	; 0x0e
     5ea:	8d 87       	std	Y+13, r24	; 0x0d
     5ec:	8d 85       	ldd	r24, Y+13	; 0x0d
     5ee:	9e 85       	ldd	r25, Y+14	; 0x0e
     5f0:	9a 8b       	std	Y+18, r25	; 0x12
     5f2:	89 8b       	std	Y+17, r24	; 0x11
     5f4:	89 89       	ldd	r24, Y+17	; 0x11
     5f6:	9a 89       	ldd	r25, Y+18	; 0x12
     5f8:	8c 01       	movw	r16, r24
     5fa:	c8 01       	movw	r24, r16
     5fc:	01 97       	sbiw	r24, 0x01	; 1
     5fe:	f1 f7       	brne	.-4      	; 0x5fc <proveriProtivnika+0x11a>
     600:	8c 01       	movw	r16, r24
     602:	1a 8b       	std	Y+18, r17	; 0x12
     604:	09 8b       	std	Y+17, r16	; 0x11
     606:	8b 89       	ldd	r24, Y+19	; 0x13
     608:	0e 94 06 02 	call	0x40c	; 0x40c <distancaProtivnika>
     60c:	9c 83       	std	Y+4, r25	; 0x04
     60e:	8b 83       	std	Y+3, r24	; 0x03
     610:	8b 81       	ldd	r24, Y+3	; 0x03
     612:	9c 81       	ldd	r25, Y+4	; 0x04
     614:	85 31       	cpi	r24, 0x15	; 21
     616:	91 05       	cpc	r25, r1
     618:	50 f0       	brcs	.+20     	; 0x62e <proveriProtivnika+0x14c>
     61a:	2c 89       	ldd	r18, Y+20	; 0x14
     61c:	3d 89       	ldd	r19, Y+21	; 0x15
     61e:	8b 81       	ldd	r24, Y+3	; 0x03
     620:	9c 81       	ldd	r25, Y+4	; 0x04
     622:	82 17       	cp	r24, r18
     624:	93 07       	cpc	r25, r19
     626:	18 f4       	brcc	.+6      	; 0x62e <proveriProtivnika+0x14c>
     628:	89 81       	ldd	r24, Y+1	; 0x01
     62a:	8f 5f       	subi	r24, 0xFF	; 255
     62c:	89 83       	std	Y+1, r24	; 0x01
     62e:	8a 81       	ldd	r24, Y+2	; 0x02
     630:	8f 5f       	subi	r24, 0xFF	; 255
     632:	8a 83       	std	Y+2, r24	; 0x02
     634:	8a 81       	ldd	r24, Y+2	; 0x02
     636:	85 30       	cpi	r24, 0x05	; 5
     638:	08 f4       	brcc	.+2      	; 0x63c <proveriProtivnika+0x15a>
     63a:	65 cf       	rjmp	.-310    	; 0x506 <proveriProtivnika+0x24>
     63c:	89 81       	ldd	r24, Y+1	; 0x01
     63e:	85 30       	cpi	r24, 0x05	; 5
     640:	11 f4       	brne	.+4      	; 0x646 <proveriProtivnika+0x164>
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	01 c0       	rjmp	.+2      	; 0x648 <proveriProtivnika+0x166>
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	65 96       	adiw	r28, 0x15	; 21
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	f8 94       	cli
     64e:	de bf       	out	0x3e, r29	; 62
     650:	0f be       	out	0x3f, r0	; 63
     652:	cd bf       	out	0x3d, r28	; 61
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	1f 91       	pop	r17
     65a:	0f 91       	pop	r16
     65c:	08 95       	ret

0000065e <main>:
#include "kretanje.h"
#include "funkcije.h"
#include "lcd.h"

int main(void)
{
     65e:	df 93       	push	r29
     660:	cf 93       	push	r28
     662:	cd b7       	in	r28, 0x3d	; 61
     664:	de b7       	in	r29, 0x3e	; 62
	//inicijalizacija robota
	setRobot();
     666:	0e 94 fe 37 	call	0x6ffc	; 0x6ffc <setRobot>

	InitLCD(0);
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <InitLCD>
	LCDClear();
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	60 e0       	ldi	r22, 0x00	; 0
     674:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCDByte>
	
	LCDWriteStringXY(0,1,"STRANA: ")  
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	61 e0       	ldi	r22, 0x01	; 1
     67c:	0e 94 14 27 	call	0x4e28	; 0x4e28 <LCDGotoXY>
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	91 e0       	ldi	r25, 0x01	; 1
     684:	0e 94 6d 26 	call	0x4cda	; 0x4cda <LCDWriteString>
	
	if(getColor() == BLUE)
     688:	0e 94 44 38 	call	0x7088	; 0x7088 <getColor>
     68c:	88 23       	and	r24, r24
     68e:	49 f4       	brne	.+18     	; 0x6a2 <main+0x44>
	{
		LCDWriteStringXY(8,1,"PLAVA");
     690:	88 e0       	ldi	r24, 0x08	; 8
     692:	61 e0       	ldi	r22, 0x01	; 1
     694:	0e 94 14 27 	call	0x4e28	; 0x4e28 <LCDGotoXY>
     698:	89 e0       	ldi	r24, 0x09	; 9
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	0e 94 6d 26 	call	0x4cda	; 0x4cda <LCDWriteString>
     6a0:	08 c0       	rjmp	.+16     	; 0x6b2 <main+0x54>
	}
	else
	{
		LCDWriteStringXY(8,1,"CRVENA");
     6a2:	88 e0       	ldi	r24, 0x08	; 8
     6a4:	61 e0       	ldi	r22, 0x01	; 1
     6a6:	0e 94 14 27 	call	0x4e28	; 0x4e28 <LCDGotoXY>
     6aa:	8f e0       	ldi	r24, 0x0F	; 15
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	0e 94 6d 26 	call	0x4cda	; 0x4cda <LCDWriteString>
	}	
			
	LCDWriteStringXY(0,0,"Taktika:");
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	60 e0       	ldi	r22, 0x00	; 0
     6b6:	0e 94 14 27 	call	0x4e28	; 0x4e28 <LCDGotoXY>
     6ba:	86 e1       	ldi	r24, 0x16	; 22
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	0e 94 6d 26 	call	0x4cda	; 0x4cda <LCDWriteString>
	
	LCDWriteStringXY(0,0,"Taktika:");
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	60 e0       	ldi	r22, 0x00	; 0
     6c6:	0e 94 14 27 	call	0x4e28	; 0x4e28 <LCDGotoXY>
     6ca:	86 e1       	ldi	r24, 0x16	; 22
     6cc:	91 e0       	ldi	r25, 0x01	; 1
     6ce:	0e 94 6d 26 	call	0x4cda	; 0x4cda <LCDWriteString>
	
	if(prekTaktika1Provera() && prekTaktika2Provera())
     6d2:	0e 94 88 36 	call	0x6d10	; 0x6d10 <prekTaktika1Provera>
     6d6:	88 23       	and	r24, r24
     6d8:	69 f0       	breq	.+26     	; 0x6f4 <main+0x96>
     6da:	0e 94 a0 36 	call	0x6d40	; 0x6d40 <prekTaktika2Provera>
     6de:	88 23       	and	r24, r24
     6e0:	49 f0       	breq	.+18     	; 0x6f4 <main+0x96>
	{
		LCDWriteStringXY(8,0,"T1T2MK");
     6e2:	88 e0       	ldi	r24, 0x08	; 8
     6e4:	60 e0       	ldi	r22, 0x00	; 0
     6e6:	0e 94 14 27 	call	0x4e28	; 0x4e28 <LCDGotoXY>
     6ea:	8f e1       	ldi	r24, 0x1F	; 31
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	0e 94 6d 26 	call	0x4cda	; 0x4cda <LCDWriteString>
     6f2:	37 c0       	rjmp	.+110    	; 0x762 <main+0x104>
	}else if((!prekTaktika1Provera()) && (!prekTaktika2Provera()))
     6f4:	0e 94 88 36 	call	0x6d10	; 0x6d10 <prekTaktika1Provera>
     6f8:	88 23       	and	r24, r24
     6fa:	69 f4       	brne	.+26     	; 0x716 <main+0xb8>
     6fc:	0e 94 a0 36 	call	0x6d40	; 0x6d40 <prekTaktika2Provera>
     700:	88 23       	and	r24, r24
     702:	49 f4       	brne	.+18     	; 0x716 <main+0xb8>
	{
		LCDWriteStringXY(8,0,"T1T2MT3K");
     704:	88 e0       	ldi	r24, 0x08	; 8
     706:	60 e0       	ldi	r22, 0x00	; 0
     708:	0e 94 14 27 	call	0x4e28	; 0x4e28 <LCDGotoXY>
     70c:	86 e2       	ldi	r24, 0x26	; 38
     70e:	91 e0       	ldi	r25, 0x01	; 1
     710:	0e 94 6d 26 	call	0x4cda	; 0x4cda <LCDWriteString>
     714:	26 c0       	rjmp	.+76     	; 0x762 <main+0x104>
	}else if(prekTaktika1Provera())
     716:	0e 94 88 36 	call	0x6d10	; 0x6d10 <prekTaktika1Provera>
     71a:	88 23       	and	r24, r24
     71c:	49 f0       	breq	.+18     	; 0x730 <main+0xd2>
	{
		LCDWriteStringXY(8,0,"T1T2T3MK");	
     71e:	88 e0       	ldi	r24, 0x08	; 8
     720:	60 e0       	ldi	r22, 0x00	; 0
     722:	0e 94 14 27 	call	0x4e28	; 0x4e28 <LCDGotoXY>
     726:	8f e2       	ldi	r24, 0x2F	; 47
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	0e 94 6d 26 	call	0x4cda	; 0x4cda <LCDWriteString>
     72e:	19 c0       	rjmp	.+50     	; 0x762 <main+0x104>
	}else
		LCDWriteStringXY(8,0,"T1T2KMK");
     730:	88 e0       	ldi	r24, 0x08	; 8
     732:	60 e0       	ldi	r22, 0x00	; 0
     734:	0e 94 14 27 	call	0x4e28	; 0x4e28 <LCDGotoXY>
     738:	88 e3       	ldi	r24, 0x38	; 56
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	0e 94 6d 26 	call	0x4cda	; 0x4cda <LCDWriteString>
     740:	10 c0       	rjmp	.+32     	; 0x762 <main+0x104>
	
	while(jumperProvera())
	{
		//za pustanje mape pritiskom na taster posle meca
		if(tasGovnoProvera())
     742:	0e 94 48 37 	call	0x6e90	; 0x6e90 <tasGovnoProvera>
     746:	88 23       	and	r24, r24
     748:	61 f0       	breq	.+24     	; 0x762 <main+0x104>
		{
			saljiKinezima(MOTOR_SKUPLJAC_MAPE,50);
     74a:	83 e4       	ldi	r24, 0x43	; 67
     74c:	62 e3       	ldi	r22, 0x32	; 50
     74e:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
			while(tasGovnoProvera());
     752:	0e 94 48 37 	call	0x6e90	; 0x6e90 <tasGovnoProvera>
     756:	88 23       	and	r24, r24
     758:	e1 f7       	brne	.-8      	; 0x752 <main+0xf4>
			saljiKinezima(MOTOR_SKUPLJAC_MAPE,0);	
     75a:	83 e4       	ldi	r24, 0x43	; 67
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
	{
		LCDWriteStringXY(8,0,"T1T2T3MK");	
	}else
		LCDWriteStringXY(8,0,"T1T2KMK");
	
	while(jumperProvera())
     762:	0e 94 b8 36 	call	0x6d70	; 0x6d70 <jumperProvera>
     766:	88 23       	and	r24, r24
     768:	61 f7       	brne	.-40     	; 0x742 <main+0xe4>
			saljiKinezima(MOTOR_SKUPLJAC_MAPE,0);	
		}	
	}
	
	//pocinje brojanje vremena
	startMatch();
     76a:	0e 94 90 37 	call	0x6f20	; 0x6f20 <startMatch>
	
	while(1)
	{
	
		if(getColor() == BLUE)
     76e:	0e 94 44 38 	call	0x7088	; 0x7088 <getColor>
     772:	88 23       	and	r24, r24
     774:	19 f4       	brne	.+6      	; 0x77c <main+0x11e>
			blueSide();
     776:	0e 94 da 04 	call	0x9b4	; 0x9b4 <blueSide>
     77a:	f9 cf       	rjmp	.-14     	; 0x76e <main+0x110>
		else
			redSide();	
     77c:	0e 94 75 0d 	call	0x1aea	; 0x1aea <redSide>
     780:	f6 cf       	rjmp	.-20     	; 0x76e <main+0x110>

00000782 <zatvoriSkupljac>:
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	cd b7       	in	r28, 0x3d	; 61
     788:	de b7       	in	r29, 0x3e	; 62
     78a:	81 e4       	ldi	r24, 0x41	; 65
     78c:	68 e2       	ldi	r22, 0x28	; 40
     78e:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
     792:	82 e4       	ldi	r24, 0x42	; 66
     794:	6c e8       	ldi	r22, 0x8C	; 140
     796:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
     79a:	00 00       	nop
     79c:	0e 94 e8 36 	call	0x6dd0	; 0x6dd0 <tasSkupljacDesniZatvoren>
     7a0:	88 23       	and	r24, r24
     7a2:	e1 f3       	breq	.-8      	; 0x79c <zatvoriSkupljac+0x1a>
     7a4:	0e 94 00 37 	call	0x6e00	; 0x6e00 <tasSkupljacLeviZatvoren>
     7a8:	88 23       	and	r24, r24
     7aa:	c1 f3       	breq	.-16     	; 0x79c <zatvoriSkupljac+0x1a>
     7ac:	81 e4       	ldi	r24, 0x41	; 65
     7ae:	60 e0       	ldi	r22, 0x00	; 0
     7b0:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
     7b4:	82 e4       	ldi	r24, 0x42	; 66
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	08 95       	ret

000007c2 <otvoriSkupljac>:
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	cd b7       	in	r28, 0x3d	; 61
     7c8:	de b7       	in	r29, 0x3e	; 62
     7ca:	81 e4       	ldi	r24, 0x41	; 65
     7cc:	6c e8       	ldi	r22, 0x8C	; 140
     7ce:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
     7d2:	82 e4       	ldi	r24, 0x42	; 66
     7d4:	68 e2       	ldi	r22, 0x28	; 40
     7d6:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
     7da:	00 00       	nop
     7dc:	0e 94 30 37 	call	0x6e60	; 0x6e60 <tasSkupljacDesniOtvoren>
     7e0:	88 23       	and	r24, r24
     7e2:	e1 f3       	breq	.-8      	; 0x7dc <otvoriSkupljac+0x1a>
     7e4:	0e 94 18 37 	call	0x6e30	; 0x6e30 <tasSkupljacLeviOtvoren>
     7e8:	88 23       	and	r24, r24
     7ea:	c1 f3       	breq	.-16     	; 0x7dc <otvoriSkupljac+0x1a>
     7ec:	81 e4       	ldi	r24, 0x41	; 65
     7ee:	60 e0       	ldi	r22, 0x00	; 0
     7f0:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
     7f4:	82 e4       	ldi	r24, 0x42	; 66
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	08 95       	ret

00000802 <pokupiMapu>:
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
     806:	cd b7       	in	r28, 0x3d	; 61
     808:	de b7       	in	r29, 0x3e	; 62
     80a:	83 e4       	ldi	r24, 0x43	; 67
     80c:	66 e9       	ldi	r22, 0x96	; 150
     80e:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
     812:	6c ea       	ldi	r22, 0xAC	; 172
     814:	7d e0       	ldi	r23, 0x0D	; 13
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
     81e:	83 e4       	ldi	r24, 0x43	; 67
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	08 95       	ret

0000082c <skupljacCim>:
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	00 d0       	rcall	.+0      	; 0x832 <skupljacCim+0x6>
     832:	cd b7       	in	r28, 0x3d	; 61
     834:	de b7       	in	r29, 0x3e	; 62
     836:	89 83       	std	Y+1, r24	; 0x01
     838:	6a 83       	std	Y+2, r22	; 0x02
     83a:	89 81       	ldd	r24, Y+1	; 0x01
     83c:	82 34       	cpi	r24, 0x42	; 66
     83e:	41 f4       	brne	.+16     	; 0x850 <skupljacCim+0x24>
     840:	8a 81       	ldd	r24, Y+2	; 0x02
     842:	98 2f       	mov	r25, r24
     844:	9c 59       	subi	r25, 0x9C	; 156
     846:	82 e4       	ldi	r24, 0x42	; 66
     848:	69 2f       	mov	r22, r25
     84a:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
     84e:	04 c0       	rjmp	.+8      	; 0x858 <skupljacCim+0x2c>
     850:	81 e4       	ldi	r24, 0x41	; 65
     852:	6a 81       	ldd	r22, Y+2	; 0x02
     854:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
     858:	68 e7       	ldi	r22, 0x78	; 120
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
     864:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <otvoriSkupljac>
     868:	0f 90       	pop	r0
     86a:	0f 90       	pop	r0
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	08 95       	ret

00000872 <writeCoord>:
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	cd b7       	in	r28, 0x3d	; 61
     878:	de b7       	in	r29, 0x3e	; 62
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	60 e0       	ldi	r22, 0x00	; 0
     87e:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCDByte>
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	0e 94 14 27 	call	0x4e28	; 0x4e28 <LCDGotoXY>
     88a:	80 e4       	ldi	r24, 0x40	; 64
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	0e 94 6d 26 	call	0x4cda	; 0x4cda <LCDWriteString>
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	61 e0       	ldi	r22, 0x01	; 1
     896:	0e 94 14 27 	call	0x4e28	; 0x4e28 <LCDGotoXY>
     89a:	84 e4       	ldi	r24, 0x44	; 68
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	0e 94 6d 26 	call	0x4cda	; 0x4cda <LCDWriteString>
     8a2:	84 e0       	ldi	r24, 0x04	; 4
     8a4:	60 e0       	ldi	r22, 0x00	; 0
     8a6:	0e 94 14 27 	call	0x4e28	; 0x4e28 <LCDGotoXY>
     8aa:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <readX>
     8ae:	64 e0       	ldi	r22, 0x04	; 4
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <LCDWriteInt>
     8b6:	84 e0       	ldi	r24, 0x04	; 4
     8b8:	61 e0       	ldi	r22, 0x01	; 1
     8ba:	0e 94 14 27 	call	0x4e28	; 0x4e28 <LCDGotoXY>
     8be:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <readY>
     8c2:	64 e0       	ldi	r22, 0x04	; 4
     8c4:	70 e0       	ldi	r23, 0x00	; 0
     8c6:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <LCDWriteInt>
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	08 95       	ret

000008d0 <writeTime>:
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	00 d0       	rcall	.+0      	; 0x8d6 <writeTime+0x6>
     8d6:	00 d0       	rcall	.+0      	; 0x8d8 <writeTime+0x8>
     8d8:	00 d0       	rcall	.+0      	; 0x8da <writeTime+0xa>
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
     8de:	0e 94 4d 38 	call	0x709a	; 0x709a <getSystemTime>
     8e2:	dc 01       	movw	r26, r24
     8e4:	cb 01       	movw	r24, r22
     8e6:	89 83       	std	Y+1, r24	; 0x01
     8e8:	9a 83       	std	Y+2, r25	; 0x02
     8ea:	ab 83       	std	Y+3, r26	; 0x03
     8ec:	bc 83       	std	Y+4, r27	; 0x04
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	60 e0       	ldi	r22, 0x00	; 0
     8f2:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCDByte>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	0e 94 14 27 	call	0x4e28	; 0x4e28 <LCDGotoXY>
     8fe:	88 e4       	ldi	r24, 0x48	; 72
     900:	91 e0       	ldi	r25, 0x01	; 1
     902:	0e 94 6d 26 	call	0x4cda	; 0x4cda <LCDWriteString>
     906:	89 81       	ldd	r24, Y+1	; 0x01
     908:	9a 81       	ldd	r25, Y+2	; 0x02
     90a:	ab 81       	ldd	r26, Y+3	; 0x03
     90c:	bc 81       	ldd	r27, Y+4	; 0x04
     90e:	28 ee       	ldi	r18, 0xE8	; 232
     910:	33 e0       	ldi	r19, 0x03	; 3
     912:	40 e0       	ldi	r20, 0x00	; 0
     914:	50 e0       	ldi	r21, 0x00	; 0
     916:	bc 01       	movw	r22, r24
     918:	cd 01       	movw	r24, r26
     91a:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <__divmodsi4>
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	9e 83       	std	Y+6, r25	; 0x06
     924:	8d 83       	std	Y+5, r24	; 0x05
     926:	89 e0       	ldi	r24, 0x09	; 9
     928:	60 e0       	ldi	r22, 0x00	; 0
     92a:	0e 94 14 27 	call	0x4e28	; 0x4e28 <LCDGotoXY>
     92e:	8d 81       	ldd	r24, Y+5	; 0x05
     930:	9e 81       	ldd	r25, Y+6	; 0x06
     932:	62 e0       	ldi	r22, 0x02	; 2
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <LCDWriteInt>
     93a:	26 96       	adiw	r28, 0x06	; 6
     93c:	0f b6       	in	r0, 0x3f	; 63
     93e:	f8 94       	cli
     940:	de bf       	out	0x3e, r29	; 62
     942:	0f be       	out	0x3f, r0	; 63
     944:	cd bf       	out	0x3d, r28	; 61
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	08 95       	ret

0000094c <getDetections>:
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
     950:	00 d0       	rcall	.+0      	; 0x952 <getDetections+0x6>
     952:	cd b7       	in	r28, 0x3d	; 61
     954:	de b7       	in	r29, 0x3e	; 62
     956:	89 83       	std	Y+1, r24	; 0x01
     958:	6a 83       	std	Y+2, r22	; 0x02
     95a:	89 81       	ldd	r24, Y+1	; 0x01
     95c:	82 30       	cpi	r24, 0x02	; 2
     95e:	19 f0       	breq	.+6      	; 0x966 <getDetections+0x1a>
     960:	89 81       	ldd	r24, Y+1	; 0x01
     962:	88 23       	and	r24, r24
     964:	91 f4       	brne	.+36     	; 0x98a <getDetections+0x3e>
     966:	8a 81       	ldd	r24, Y+2	; 0x02
     968:	8f 3f       	cpi	r24, 0xFF	; 255
     96a:	31 f4       	brne	.+12     	; 0x978 <getDetections+0x2c>
     96c:	0e 94 78 37 	call	0x6ef0	; 0x6ef0 <tasRobotNazadProvera>
     970:	88 23       	and	r24, r24
     972:	11 f0       	breq	.+4      	; 0x978 <getDetections+0x2c>
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	19 c0       	rjmp	.+50     	; 0x9aa <getDetections+0x5e>
     978:	8a 81       	ldd	r24, Y+2	; 0x02
     97a:	81 30       	cpi	r24, 0x01	; 1
     97c:	31 f4       	brne	.+12     	; 0x98a <getDetections+0x3e>
     97e:	0e 94 60 37 	call	0x6ec0	; 0x6ec0 <tasRobotNapredProvera>
     982:	88 23       	and	r24, r24
     984:	11 f0       	breq	.+4      	; 0x98a <getDetections+0x3e>
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	10 c0       	rjmp	.+32     	; 0x9aa <getDetections+0x5e>
     98a:	89 81       	ldd	r24, Y+1	; 0x01
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	19 f0       	breq	.+6      	; 0x996 <getDetections+0x4a>
     990:	89 81       	ldd	r24, Y+1	; 0x01
     992:	81 30       	cpi	r24, 0x01	; 1
     994:	49 f4       	brne	.+18     	; 0x9a8 <getDetections+0x5c>
     996:	8a 81       	ldd	r24, Y+2	; 0x02
     998:	6c e3       	ldi	r22, 0x3C	; 60
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <proveriProtivnika>
     9a0:	88 23       	and	r24, r24
     9a2:	11 f0       	breq	.+4      	; 0x9a8 <getDetections+0x5c>
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	01 c0       	rjmp	.+2      	; 0x9aa <getDetections+0x5e>
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	0f 90       	pop	r0
     9ac:	0f 90       	pop	r0
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	08 95       	ret

000009b4 <blueSide>:
	 1,
	 1	
};

void blueSide(void)
{
     9b4:	ef 92       	push	r14
     9b6:	0f 93       	push	r16
     9b8:	1f 93       	push	r17
     9ba:	df 93       	push	r29
     9bc:	cf 93       	push	r28
     9be:	cd b7       	in	r28, 0x3d	; 61
     9c0:	de b7       	in	r29, 0x3e	; 62
     9c2:	a1 97       	sbiw	r28, 0x21	; 33
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	f8 94       	cli
     9c8:	de bf       	out	0x3e, r29	; 62
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	cd bf       	out	0x3d, r28	; 61
	/************************************************************************/
	/*			PROMENLJIVE ZA KONTROLU MECA                                */
	/************************************************************************/
	eNesto state = FAST_AND_FURIOUS;
     9ce:	1f 8e       	std	Y+31, r1	; 0x1f
	eBool totemCollisionFlag = FALSE;
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	8e 8f       	std	Y+30, r24	; 0x1e
	
	unsigned char position = 0, newPosition = 0, collisionCounter = 0, tacticCombination;
     9d4:	1d 8e       	std	Y+29, r1	; 0x1d
     9d6:	1c 8e       	std	Y+28, r1	; 0x1c
     9d8:	1b 8e       	std	Y+27, r1	; 0x1b
	int speed = NORMALSPEED;
     9da:	84 ec       	ldi	r24, 0xC4	; 196
     9dc:	99 e0       	ldi	r25, 0x09	; 9
     9de:	99 8f       	std	Y+25, r25	; 0x19
     9e0:	88 8f       	std	Y+24, r24	; 0x18
	char detectionFlags = ALL_DETECTIONS_ON;
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	8f 8b       	std	Y+23, r24	; 0x17
	
	if(prekTaktika1Provera() && prekTaktika2Provera())
     9e6:	0e 94 88 36 	call	0x6d10	; 0x6d10 <prekTaktika1Provera>
     9ea:	88 23       	and	r24, r24
     9ec:	39 f0       	breq	.+14     	; 0x9fc <blueSide+0x48>
     9ee:	0e 94 a0 36 	call	0x6d40	; 0x6d40 <prekTaktika2Provera>
     9f2:	88 23       	and	r24, r24
     9f4:	19 f0       	breq	.+6      	; 0x9fc <blueSide+0x48>
		tacticCombination = 1;//T1T2MK
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	8a 8f       	std	Y+26, r24	; 0x1a
     9fa:	13 c0       	rjmp	.+38     	; 0xa22 <blueSide+0x6e>
	else if((!prekTaktika1Provera()) && (!prekTaktika2Provera()))
     9fc:	0e 94 88 36 	call	0x6d10	; 0x6d10 <prekTaktika1Provera>
     a00:	88 23       	and	r24, r24
     a02:	31 f4       	brne	.+12     	; 0xa10 <blueSide+0x5c>
     a04:	0e 94 a0 36 	call	0x6d40	; 0x6d40 <prekTaktika2Provera>
     a08:	88 23       	and	r24, r24
     a0a:	11 f4       	brne	.+4      	; 0xa10 <blueSide+0x5c>
		tacticCombination = 0;	//T1T2MT3K
     a0c:	1a 8e       	std	Y+26, r1	; 0x1a
     a0e:	09 c0       	rjmp	.+18     	; 0xa22 <blueSide+0x6e>
	else if(prekTaktika1Provera())
     a10:	0e 94 88 36 	call	0x6d10	; 0x6d10 <prekTaktika1Provera>
     a14:	88 23       	and	r24, r24
     a16:	19 f0       	breq	.+6      	; 0xa1e <blueSide+0x6a>
		tacticCombination = 2;	//T1T2T3MK
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	8a 8f       	std	Y+26, r24	; 0x1a
     a1c:	02 c0       	rjmp	.+4      	; 0xa22 <blueSide+0x6e>
	else
		tacticCombination = 3;	//T1T2KM
     a1e:	83 e0       	ldi	r24, 0x03	; 3
     a20:	8a 8f       	std	Y+26, r24	; 0x1a
	

	/************************************************************************/
	/*		POCETNA POZICIJA ZA LJUBICASTU STRANU                           */
	/************************************************************************/
	setStartPosition(2789,1312,349);  
     a22:	85 ee       	ldi	r24, 0xE5	; 229
     a24:	9a e0       	ldi	r25, 0x0A	; 10
     a26:	60 e2       	ldi	r22, 0x20	; 32
     a28:	75 e0       	ldi	r23, 0x05	; 5
     a2a:	4d e5       	ldi	r20, 0x5D	; 93
     a2c:	51 e0       	ldi	r21, 0x01	; 1
     a2e:	0e 94 ed 28 	call	0x51da	; 0x51da <setStartPosition>
	otvoriSkupljac();
     a32:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <otvoriSkupljac>

	while(1)
	{
		switch(state)
     a36:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a38:	28 2f       	mov	r18, r24
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	39 a3       	std	Y+33, r19	; 0x21
     a3e:	28 a3       	std	Y+32, r18	; 0x20
     a40:	88 a1       	ldd	r24, Y+32	; 0x20
     a42:	99 a1       	ldd	r25, Y+33	; 0x21
     a44:	81 30       	cpi	r24, 0x01	; 1
     a46:	91 05       	cpc	r25, r1
     a48:	09 f4       	brne	.+2      	; 0xa4c <blueSide+0x98>
     a4a:	62 c4       	rjmp	.+2244   	; 0x1310 <__stack+0x211>
     a4c:	28 a1       	ldd	r18, Y+32	; 0x20
     a4e:	39 a1       	ldd	r19, Y+33	; 0x21
     a50:	22 30       	cpi	r18, 0x02	; 2
     a52:	31 05       	cpc	r19, r1
     a54:	09 f4       	brne	.+2      	; 0xa58 <blueSide+0xa4>
     a56:	be c5       	rjmp	.+2940   	; 0x15d4 <__stack+0x4d5>
     a58:	88 a1       	ldd	r24, Y+32	; 0x20
     a5a:	99 a1       	ldd	r25, Y+33	; 0x21
     a5c:	00 97       	sbiw	r24, 0x00	; 0
     a5e:	59 f7       	brne	.-42     	; 0xa36 <blueSide+0x82>
		{
			/************************************************************************/
			/*	GLAVNE PUTANJE ZA MEC                                               */
			/************************************************************************/	
			case FAST_AND_FURIOUS:
				for(position = newPosition; position < brojPozicijaPlavo; position++)
     a60:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a62:	8d 8f       	std	Y+29, r24	; 0x1d
     a64:	50 c4       	rjmp	.+2208   	; 0x1306 <__stack+0x207>
				{
					if(gotoXY(pgm_read_word(&pathXBlue[position]),pgm_read_word(&pathYBlue[position]),pgm_read_byte(&directionBlue[position]),speed,NORMALPRECISION,detectionFlags))
     a66:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a68:	88 2f       	mov	r24, r24
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	88 0f       	add	r24, r24
     a6e:	99 1f       	adc	r25, r25
     a70:	89 52       	subi	r24, 0x29	; 41
     a72:	9f 4f       	sbci	r25, 0xFF	; 255
     a74:	9e 8b       	std	Y+22, r25	; 0x16
     a76:	8d 8b       	std	Y+21, r24	; 0x15
     a78:	8d 89       	ldd	r24, Y+21	; 0x15
     a7a:	9e 89       	ldd	r25, Y+22	; 0x16
     a7c:	fc 01       	movw	r30, r24
     a7e:	85 91       	lpm	r24, Z+
     a80:	94 91       	lpm	r25, Z+
     a82:	9c 8b       	std	Y+20, r25	; 0x14
     a84:	8b 8b       	std	Y+19, r24	; 0x13
     a86:	fe 8b       	std	Y+22, r31	; 0x16
     a88:	ed 8b       	std	Y+21, r30	; 0x15
     a8a:	8b 89       	ldd	r24, Y+19	; 0x13
     a8c:	9c 89       	ldd	r25, Y+20	; 0x14
     a8e:	dc 01       	movw	r26, r24
     a90:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a92:	88 2f       	mov	r24, r24
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	88 0f       	add	r24, r24
     a98:	99 1f       	adc	r25, r25
     a9a:	87 51       	subi	r24, 0x17	; 23
     a9c:	9f 4f       	sbci	r25, 0xFF	; 255
     a9e:	9a 8b       	std	Y+18, r25	; 0x12
     aa0:	89 8b       	std	Y+17, r24	; 0x11
     aa2:	89 89       	ldd	r24, Y+17	; 0x11
     aa4:	9a 89       	ldd	r25, Y+18	; 0x12
     aa6:	fc 01       	movw	r30, r24
     aa8:	85 91       	lpm	r24, Z+
     aaa:	94 91       	lpm	r25, Z+
     aac:	98 8b       	std	Y+16, r25	; 0x10
     aae:	8f 87       	std	Y+15, r24	; 0x0f
     ab0:	fa 8b       	std	Y+18, r31	; 0x12
     ab2:	e9 8b       	std	Y+17, r30	; 0x11
     ab4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ab6:	98 89       	ldd	r25, Y+16	; 0x10
     ab8:	bc 01       	movw	r22, r24
     aba:	8d 8d       	ldd	r24, Y+29	; 0x1d
     abc:	88 2f       	mov	r24, r24
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	85 50       	subi	r24, 0x05	; 5
     ac2:	9f 4f       	sbci	r25, 0xFF	; 255
     ac4:	9e 87       	std	Y+14, r25	; 0x0e
     ac6:	8d 87       	std	Y+13, r24	; 0x0d
     ac8:	ed 85       	ldd	r30, Y+13	; 0x0d
     aca:	fe 85       	ldd	r31, Y+14	; 0x0e
     acc:	84 91       	lpm	r24, Z+
     ace:	8c 87       	std	Y+12, r24	; 0x0c
     ad0:	8c 85       	ldd	r24, Y+12	; 0x0c
     ad2:	48 2f       	mov	r20, r24
     ad4:	28 8d       	ldd	r18, Y+24	; 0x18
     ad6:	39 8d       	ldd	r19, Y+25	; 0x19
     ad8:	cd 01       	movw	r24, r26
     ada:	05 e0       	ldi	r16, 0x05	; 5
     adc:	10 e0       	ldi	r17, 0x00	; 0
     ade:	ef 88       	ldd	r14, Y+23	; 0x17
     ae0:	0e 94 bd 2c 	call	0x597a	; 0x597a <gotoXY>
     ae4:	88 23       	and	r24, r24
     ae6:	59 f0       	breq	.+22     	; 0xafe <blueSide+0x14a>
					{
						newPosition = position;
     ae8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     aea:	8c 8f       	std	Y+28, r24	; 0x1c
						
						state = COLLISION;
     aec:	82 e0       	ldi	r24, 0x02	; 2
     aee:	8f 8f       	std	Y+31, r24	; 0x1f
						speed = NORMALSPEED;
     af0:	84 ec       	ldi	r24, 0xC4	; 196
     af2:	99 e0       	ldi	r25, 0x09	; 9
     af4:	99 8f       	std	Y+25, r25	; 0x19
     af6:	88 8f       	std	Y+24, r24	; 0x18
						detectionFlags = ALL_DETECTIONS_OFF;
     af8:	83 e0       	ldi	r24, 0x03	; 3
     afa:	8f 8b       	std	Y+23, r24	; 0x17
     afc:	9c cf       	rjmp	.-200    	; 0xa36 <blueSide+0x82>
						
						break;	
					}//end collision if
					
					speed = NORMALSPEED;
     afe:	84 ec       	ldi	r24, 0xC4	; 196
     b00:	99 e0       	ldi	r25, 0x09	; 9
     b02:	99 8f       	std	Y+25, r25	; 0x19
     b04:	88 8f       	std	Y+24, r24	; 0x18
					detectionFlags = ALL_DETECTIONS_ON;
     b06:	82 e0       	ldi	r24, 0x02	; 2
     b08:	8f 8b       	std	Y+23, r24	; 0x17
					/************************************************************************/
					/*   ISPRED PRVOG DELA NASEG TOTEMA, PRE OKRETANJA KA NJEMU             */
					/************************************************************************/
					if(position == 0)
     b0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b0c:	88 23       	and	r24, r24
     b0e:	09 f0       	breq	.+2      	; 0xb12 <blueSide+0x15e>
     b10:	d2 c0       	rjmp	.+420    	; 0xcb6 <blueSide+0x302>
					{	
						if(tasRobotNapredProvera())		//u slucaju da je neki pametnjakovic odlucio da odmah dodje do nas, taster ce biti pritisnut
     b12:	0e 94 60 37 	call	0x6ec0	; 0x6ec0 <tasRobotNapredProvera>
     b16:	88 23       	and	r24, r24
     b18:	11 f1       	breq	.+68     	; 0xb5e <blueSide+0x1aa>
						{
							pauza_ms(20);
     b1a:	64 e1       	ldi	r22, 0x14	; 20
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
							moveOnDirection(150,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);	//guramo ga da nam ne smeta
     b26:	86 e9       	ldi	r24, 0x96	; 150
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	61 e0       	ldi	r22, 0x01	; 1
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	44 ec       	ldi	r20, 0xC4	; 196
     b30:	59 e0       	ldi	r21, 0x09	; 9
     b32:	23 e0       	ldi	r18, 0x03	; 3
     b34:	00 e0       	ldi	r16, 0x00	; 0
     b36:	10 e0       	ldi	r17, 0x00	; 0
     b38:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
							pauza_ms(20);
     b3c:	64 e1       	ldi	r22, 0x14	; 20
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
							moveOnDirection(150,-1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);	//vracamo se nazad		
     b48:	86 e9       	ldi	r24, 0x96	; 150
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	6f ef       	ldi	r22, 0xFF	; 255
     b4e:	7f ef       	ldi	r23, 0xFF	; 255
     b50:	44 ec       	ldi	r20, 0xC4	; 196
     b52:	59 e0       	ldi	r21, 0x09	; 9
     b54:	23 e0       	ldi	r18, 0x03	; 3
     b56:	00 e0       	ldi	r16, 0x00	; 0
     b58:	10 e0       	ldi	r17, 0x00	; 0
     b5a:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						}//end taster if
						
						otvoriSkupljac();
     b5e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <otvoriSkupljac>
						
						setUgao(245);	//okrece se ka totemu				
     b62:	85 ef       	ldi	r24, 0xF5	; 245
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
						pauza_ms(10);	
     b6a:	6a e0       	ldi	r22, 0x0A	; 10
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						
						moveOnDirection(150,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);	//prilazi totemu ali ne skroz, pre cimanja diska
     b76:	86 e9       	ldi	r24, 0x96	; 150
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	61 e0       	ldi	r22, 0x01	; 1
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	44 ec       	ldi	r20, 0xC4	; 196
     b80:	59 e0       	ldi	r21, 0x09	; 9
     b82:	23 e0       	ldi	r18, 0x03	; 3
     b84:	00 e0       	ldi	r16, 0x00	; 0
     b86:	10 e0       	ldi	r17, 0x00	; 0
     b88:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						skupljacCim(MOTOR_SKUPLJAC_LEVI,30);	//cima levi skupljac i tako se stiti od diska
     b8c:	81 e4       	ldi	r24, 0x41	; 65
     b8e:	6e e1       	ldi	r22, 0x1E	; 30
     b90:	0e 94 16 04 	call	0x82c	; 0x82c <skupljacCim>
						
						moveOnDirection(140,1,NORMALSPEED,ALL_DETECTIONS_OFF,TWO_SECOND_BREAK_TIME);	//160		//dolazi skroz do drvenog braon govna
     b94:	8c e8       	ldi	r24, 0x8C	; 140
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	61 e0       	ldi	r22, 0x01	; 1
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	44 ec       	ldi	r20, 0xC4	; 196
     b9e:	59 e0       	ldi	r21, 0x09	; 9
     ba0:	23 e0       	ldi	r18, 0x03	; 3
     ba2:	00 ed       	ldi	r16, 0xD0	; 208
     ba4:	17 e0       	ldi	r17, 0x07	; 7
     ba6:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						collisionCounter = 0;
     baa:	1b 8e       	std	Y+27, r1	; 0x1b
     bac:	2c c0       	rjmp	.+88     	; 0xc06 <blueSide+0x252>
						while(setUgao(191))	//cisti sa totema, AKO NE MOZE VRACA SE U PRETHODNI UGAO, UKLJUCUJE CIM I NASTAVLJA
						{
							if(++collisionCounter == 3)
     bae:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bb0:	8f 5f       	subi	r24, 0xFF	; 255
     bb2:	8b 8f       	std	Y+27, r24	; 0x1b
     bb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bb6:	83 30       	cpi	r24, 0x03	; 3
     bb8:	e1 f4       	brne	.+56     	; 0xbf2 <blueSide+0x23e>
							{
								collisionCounter = 0;
     bba:	1b 8e       	std	Y+27, r1	; 0x1b
								moveOnDirection(160,-1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
     bbc:	80 ea       	ldi	r24, 0xA0	; 160
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	6f ef       	ldi	r22, 0xFF	; 255
     bc2:	7f ef       	ldi	r23, 0xFF	; 255
     bc4:	44 ec       	ldi	r20, 0xC4	; 196
     bc6:	59 e0       	ldi	r21, 0x09	; 9
     bc8:	23 e0       	ldi	r18, 0x03	; 3
     bca:	00 e0       	ldi	r16, 0x00	; 0
     bcc:	10 e0       	ldi	r17, 0x00	; 0
     bce:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
								setUgao(245);
     bd2:	85 ef       	ldi	r24, 0xF5	; 245
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
								moveOnDirection(130,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
     bda:	82 e8       	ldi	r24, 0x82	; 130
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	61 e0       	ldi	r22, 0x01	; 1
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	44 ec       	ldi	r20, 0xC4	; 196
     be4:	59 e0       	ldi	r21, 0x09	; 9
     be6:	23 e0       	ldi	r18, 0x03	; 3
     be8:	00 e0       	ldi	r16, 0x00	; 0
     bea:	10 e0       	ldi	r17, 0x00	; 0
     bec:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
     bf0:	0a c0       	rjmp	.+20     	; 0xc06 <blueSide+0x252>
								continue;	
							}	
													
							skupljacCim(MOTOR_SKUPLJAC_LEVI,30);
     bf2:	81 e4       	ldi	r24, 0x41	; 65
     bf4:	6e e1       	ldi	r22, 0x1E	; 30
     bf6:	0e 94 16 04 	call	0x82c	; 0x82c <skupljacCim>
							pauza_ms(50);
     bfa:	62 e3       	ldi	r22, 0x32	; 50
     bfc:	70 e0       	ldi	r23, 0x00	; 0
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						skupljacCim(MOTOR_SKUPLJAC_LEVI,30);	//cima levi skupljac i tako se stiti od diska
						
						moveOnDirection(140,1,NORMALSPEED,ALL_DETECTIONS_OFF,TWO_SECOND_BREAK_TIME);	//160		//dolazi skroz do drvenog braon govna
						
						collisionCounter = 0;
						while(setUgao(191))	//cisti sa totema, AKO NE MOZE VRACA SE U PRETHODNI UGAO, UKLJUCUJE CIM I NASTAVLJA
     c06:	8f eb       	ldi	r24, 0xBF	; 191
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
     c0e:	88 23       	and	r24, r24
     c10:	71 f6       	brne	.-100    	; 0xbae <blueSide+0x1fa>
													
							skupljacCim(MOTOR_SKUPLJAC_LEVI,30);
							pauza_ms(50);
						}//end while(setUgao)
						
						collisionCounter = 0;
     c12:	1b 8e       	std	Y+27, r1	; 0x1b
						
						/************************************************************************/
						/* kupi sta je ocistio, sve dok ne dodje gde treba                      */
						/************************************************************************/
	
						moveOnDirection(270,1,NORMALSPEED,TASTER_SUDAR_ON,NO_BREAK_TIME); //ide malo napred i tako kupi sta je srusio
     c14:	8e e0       	ldi	r24, 0x0E	; 14
     c16:	91 e0       	ldi	r25, 0x01	; 1
     c18:	61 e0       	ldi	r22, 0x01	; 1
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	44 ec       	ldi	r20, 0xC4	; 196
     c1e:	59 e0       	ldi	r21, 0x09	; 9
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	00 e0       	ldi	r16, 0x00	; 0
     c24:	10 e0       	ldi	r17, 0x00	; 0
     c26:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
     c2a:	0b c0       	rjmp	.+22     	; 0xc42 <blueSide+0x28e>
						
						while(setUgao(210))			//malo koriguje ugao, da bi mogao skupiti i ostale
						{
							moveOnDirection(30,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
     c2c:	8e e1       	ldi	r24, 0x1E	; 30
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	61 e0       	ldi	r22, 0x01	; 1
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	44 ec       	ldi	r20, 0xC4	; 196
     c36:	59 e0       	ldi	r21, 0x09	; 9
     c38:	23 e0       	ldi	r18, 0x03	; 3
     c3a:	00 e0       	ldi	r16, 0x00	; 0
     c3c:	10 e0       	ldi	r17, 0x00	; 0
     c3e:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						/* kupi sta je ocistio, sve dok ne dodje gde treba                      */
						/************************************************************************/
	
						moveOnDirection(270,1,NORMALSPEED,TASTER_SUDAR_ON,NO_BREAK_TIME); //ide malo napred i tako kupi sta je srusio
						
						while(setUgao(210))			//malo koriguje ugao, da bi mogao skupiti i ostale
     c42:	82 ed       	ldi	r24, 0xD2	; 210
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
     c4a:	88 23       	and	r24, r24
     c4c:	79 f7       	brne	.-34     	; 0xc2c <blueSide+0x278>
						{
							moveOnDirection(30,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
						}	
						
						moveOnDirection(350,1,NORMALSPEED,TASTER_SUDAR_ON,NO_BREAK_TIME);  //IDE skroz do naseg broda, tu mora da dodje!
     c4e:	8e e5       	ldi	r24, 0x5E	; 94
     c50:	91 e0       	ldi	r25, 0x01	; 1
     c52:	61 e0       	ldi	r22, 0x01	; 1
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	44 ec       	ldi	r20, 0xC4	; 196
     c58:	59 e0       	ldi	r21, 0x09	; 9
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	00 e0       	ldi	r16, 0x00	; 0
     c5e:	10 e0       	ldi	r17, 0x00	; 0
     c60:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						setUgao(180);	//okrece se pre ulaska u cilj
     c64:	84 eb       	ldi	r24, 0xB4	; 180
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
						
						pauza_ms(5);
     c6c:	65 e0       	ldi	r22, 0x05	; 5
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						
						moveOnDirection(260,1,NORMALSPEED,ALL_DETECTIONS_OFF,TWO_SECOND_BREAK_TIME);	//ulazim u cilj
     c78:	84 e0       	ldi	r24, 0x04	; 4
     c7a:	91 e0       	ldi	r25, 0x01	; 1
     c7c:	61 e0       	ldi	r22, 0x01	; 1
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	44 ec       	ldi	r20, 0xC4	; 196
     c82:	59 e0       	ldi	r21, 0x09	; 9
     c84:	23 e0       	ldi	r18, 0x03	; 3
     c86:	00 ed       	ldi	r16, 0xD0	; 208
     c88:	17 e0       	ldi	r17, 0x07	; 7
     c8a:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						pauza_ms(5);
     c8e:	65 e0       	ldi	r22, 0x05	; 5
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						moveOnDirection(210,-1,NORMALSPEED,TASTER_SUDAR_ON,NO_BREAK_TIME);	//izlazim iz cilja
     c9a:	82 ed       	ldi	r24, 0xD2	; 210
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	6f ef       	ldi	r22, 0xFF	; 255
     ca0:	7f ef       	ldi	r23, 0xFF	; 255
     ca2:	44 ec       	ldi	r20, 0xC4	; 196
     ca4:	59 e0       	ldi	r21, 0x09	; 9
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	00 e0       	ldi	r16, 0x00	; 0
     caa:	10 e0       	ldi	r17, 0x00	; 0
     cac:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						zatvoriSkupljac();		//zatvara govna
     cb0:	0e 94 c1 03 	call	0x782	; 0x782 <zatvoriSkupljac>
     cb4:	25 c3       	rjmp	.+1610   	; 0x1300 <__stack+0x201>
					}//end position if	
					
					/************************************************************************/
					/*   IDE DA KUPI DRUGI DEO TOTEMA, PRE KOSE KRETNJE                     */
					/************************************************************************/
					if(position == 1)
     cb6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	11 f4       	brne	.+4      	; 0xcc0 <blueSide+0x30c>
					{
						collisionCounter = 0;
     cbc:	1b 8e       	std	Y+27, r1	; 0x1b
     cbe:	20 c3       	rjmp	.+1600   	; 0x1300 <__stack+0x201>
					}
					
					/************************************************************************/
					/*	NALAZI SE ISPRED DRUGOG DELA NASEG TOTEMA                           */
					/************************************************************************/
					if(position == 2)
     cc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cc2:	82 30       	cpi	r24, 0x02	; 2
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <blueSide+0x314>
     cc6:	26 c1       	rjmp	.+588    	; 0xf14 <blueSide+0x560>
					{				
						setCommandInt('V',NORMALSPEED);
     cc8:	86 e5       	ldi	r24, 0x56	; 86
     cca:	64 ec       	ldi	r22, 0xC4	; 196
     ccc:	79 e0       	ldi	r23, 0x09	; 9
     cce:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <setCommandInt>
						setUgao(105);	//okrece se ka totemu
     cd2:	89 e6       	ldi	r24, 0x69	; 105
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
						otvoriSkupljac();
     cda:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <otvoriSkupljac>
						
						moveOnDirection(280,1,NORMALSPEED,ALL_DETECTIONS_OFF,TWO_SECOND_BREAK_TIME); //285 prilazi totemu pre cimanja diska		
     cde:	88 e1       	ldi	r24, 0x18	; 24
     ce0:	91 e0       	ldi	r25, 0x01	; 1
     ce2:	61 e0       	ldi	r22, 0x01	; 1
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	44 ec       	ldi	r20, 0xC4	; 196
     ce8:	59 e0       	ldi	r21, 0x09	; 9
     cea:	23 e0       	ldi	r18, 0x03	; 3
     cec:	00 ed       	ldi	r16, 0xD0	; 208
     cee:	17 e0       	ldi	r17, 0x07	; 7
     cf0:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						skupljacCim(MOTOR_SKUPLJAC_DESNI,45);
     cf4:	82 e4       	ldi	r24, 0x42	; 66
     cf6:	6d e2       	ldi	r22, 0x2D	; 45
     cf8:	0e 94 16 04 	call	0x82c	; 0x82c <skupljacCim>
						
						if(moveOnDirection(60,1,NORMALSPEED,ALL_DETECTIONS_OFF,ONE_SECOND_BREAK_TIME))	//skroz prilazi totemu  70
     cfc:	8c e3       	ldi	r24, 0x3C	; 60
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	61 e0       	ldi	r22, 0x01	; 1
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	44 ec       	ldi	r20, 0xC4	; 196
     d06:	59 e0       	ldi	r21, 0x09	; 9
     d08:	23 e0       	ldi	r18, 0x03	; 3
     d0a:	00 eb       	ldi	r16, 0xB0	; 176
     d0c:	14 e0       	ldi	r17, 0x04	; 4
     d0e:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
     d12:	88 23       	and	r24, r24
     d14:	79 f0       	breq	.+30     	; 0xd34 <blueSide+0x380>
						{
							skupljacCim(MOTOR_SKUPLJAC_LEVI,40);
     d16:	81 e4       	ldi	r24, 0x41	; 65
     d18:	68 e2       	ldi	r22, 0x28	; 40
     d1a:	0e 94 16 04 	call	0x82c	; 0x82c <skupljacCim>
							moveOnDirection(10,1,NORMALSPEED,ALL_DETECTIONS_OFF,ONE_SECOND_BREAK_TIME);
     d1e:	8a e0       	ldi	r24, 0x0A	; 10
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	61 e0       	ldi	r22, 0x01	; 1
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	44 ec       	ldi	r20, 0xC4	; 196
     d28:	59 e0       	ldi	r21, 0x09	; 9
     d2a:	23 e0       	ldi	r18, 0x03	; 3
     d2c:	00 eb       	ldi	r16, 0xB0	; 176
     d2e:	14 e0       	ldi	r17, 0x04	; 4
     d30:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						}						
							
						skupljacCim(MOTOR_SKUPLJAC_DESNI,30);	//CIMA (DVA PUTA) DA SE NE BI ZAPUCO U DISK NA TOTEMU PRILIKOM CISCENJA
     d34:	82 e4       	ldi	r24, 0x42	; 66
     d36:	6e e1       	ldi	r22, 0x1E	; 30
     d38:	0e 94 16 04 	call	0x82c	; 0x82c <skupljacCim>
						pauza_ms(100);
     d3c:	64 e6       	ldi	r22, 0x64	; 100
     d3e:	70 e0       	ldi	r23, 0x00	; 0
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						skupljacCim(MOTOR_SKUPLJAC_DESNI,30);
     d48:	82 e4       	ldi	r24, 0x42	; 66
     d4a:	6e e1       	ldi	r22, 0x1E	; 30
     d4c:	0e 94 16 04 	call	0x82c	; 0x82c <skupljacCim>
     d50:	0a c0       	rjmp	.+20     	; 0xd66 <blueSide+0x3b2>
						
						while(setUgao(170))	//cisti sa totema  //++++
						{
							skupljacCim(MOTOR_SKUPLJAC_DESNI,30);	//ako ne moze da se okrene ukljucuje cim i pokusava ponovo
     d52:	82 e4       	ldi	r24, 0x42	; 66
     d54:	6e e1       	ldi	r22, 0x1E	; 30
     d56:	0e 94 16 04 	call	0x82c	; 0x82c <skupljacCim>
							pauza_ms(10);
     d5a:	6a e0       	ldi	r22, 0x0A	; 10
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
							
						skupljacCim(MOTOR_SKUPLJAC_DESNI,30);	//CIMA (DVA PUTA) DA SE NE BI ZAPUCO U DISK NA TOTEMU PRILIKOM CISCENJA
						pauza_ms(100);
						skupljacCim(MOTOR_SKUPLJAC_DESNI,30);
						
						while(setUgao(170))	//cisti sa totema  //++++
     d66:	8a ea       	ldi	r24, 0xAA	; 170
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
     d6e:	88 23       	and	r24, r24
     d70:	81 f7       	brne	.-32     	; 0xd52 <blueSide+0x39e>
						{
							skupljacCim(MOTOR_SKUPLJAC_DESNI,30);	//ako ne moze da se okrene ukljucuje cim i pokusava ponovo
							pauza_ms(10);
						}
						
						moveOnDirection(270,1,NORMALSPEED,TASTER_SUDAR_ON,NO_BREAK_TIME);	//ide napred prema cilju, mora da dodje tu
     d72:	8e e0       	ldi	r24, 0x0E	; 14
     d74:	91 e0       	ldi	r25, 0x01	; 1
     d76:	61 e0       	ldi	r22, 0x01	; 1
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	44 ec       	ldi	r20, 0xC4	; 196
     d7c:	59 e0       	ldi	r21, 0x09	; 9
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	00 e0       	ldi	r16, 0x00	; 0
     d82:	10 e0       	ldi	r17, 0x00	; 0
     d84:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						pauza_ms(5);
     d88:	65 e0       	ldi	r22, 0x05	; 5
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
     d94:	0b c0       	rjmp	.+22     	; 0xdac <blueSide+0x3f8>
						
						while(setUgao(130))	//okrece se prema totemu da pokupi ono sto mu je ispalo	130
						{
							moveOnDirection(50,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);		//TESTIRATI!!!
     d96:	82 e3       	ldi	r24, 0x32	; 50
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	61 e0       	ldi	r22, 0x01	; 1
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	44 ec       	ldi	r20, 0xC4	; 196
     da0:	59 e0       	ldi	r21, 0x09	; 9
     da2:	23 e0       	ldi	r18, 0x03	; 3
     da4:	00 e0       	ldi	r16, 0x00	; 0
     da6:	10 e0       	ldi	r17, 0x00	; 0
     da8:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						}
						
						moveOnDirection(270,1,NORMALSPEED,TASTER_SUDAR_ON,NO_BREAK_TIME);	//ide napred prema cilju, mora da dodje tu
						pauza_ms(5);
						
						while(setUgao(130))	//okrece se prema totemu da pokupi ono sto mu je ispalo	130
     dac:	82 e8       	ldi	r24, 0x82	; 130
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
     db4:	88 23       	and	r24, r24
     db6:	79 f7       	brne	.-34     	; 0xd96 <blueSide+0x3e2>
						{
							moveOnDirection(50,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);		//TESTIRATI!!!
						}
						
						moveOnDirection(510,1,NORMALSPEED,ALL_DETECTIONS_ON,NO_BREAK_TIME); //ide jos malo prema cilju
     db8:	8e ef       	ldi	r24, 0xFE	; 254
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	61 e0       	ldi	r22, 0x01	; 1
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	44 ec       	ldi	r20, 0xC4	; 196
     dc2:	59 e0       	ldi	r21, 0x09	; 9
     dc4:	22 e0       	ldi	r18, 0x02	; 2
     dc6:	00 e0       	ldi	r16, 0x00	; 0
     dc8:	10 e0       	ldi	r17, 0x00	; 0
     dca:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						saljiKinezima(MOTOR_SKUPLJAC_DESNI,135);	//delimicno zatvara skupljace da ne bi sebe zeznuo
     dce:	82 e4       	ldi	r24, 0x42	; 66
     dd0:	67 e8       	ldi	r22, 0x87	; 135
     dd2:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						saljiKinezima(MOTOR_SKUPLJAC_LEVI,35);
     dd6:	81 e4       	ldi	r24, 0x41	; 65
     dd8:	63 e2       	ldi	r22, 0x23	; 35
     dda:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						pauza_ms(110);
     dde:	6e e6       	ldi	r22, 0x6E	; 110
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						saljiKinezima(MOTOR_SKUPLJAC_DESNI,0);	
     dea:	82 e4       	ldi	r24, 0x42	; 66
     dec:	60 e0       	ldi	r22, 0x00	; 0
     dee:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						saljiKinezima(MOTOR_SKUPLJAC_LEVI,0);
     df2:	81 e4       	ldi	r24, 0x41	; 65
     df4:	60 e0       	ldi	r22, 0x00	; 0
     df6:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						
						moveOnDirection(135,1,NORMALSPEED,TASTER_SUDAR_ON,TWO_SECOND_BREAK_TIME);	//PRE ULASKA U CILJ
     dfa:	87 e8       	ldi	r24, 0x87	; 135
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	61 e0       	ldi	r22, 0x01	; 1
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	44 ec       	ldi	r20, 0xC4	; 196
     e04:	59 e0       	ldi	r21, 0x09	; 9
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	00 ed       	ldi	r16, 0xD0	; 208
     e0a:	17 e0       	ldi	r17, 0x07	; 7
     e0c:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						setUgao(180);	//okrece se da udje u cilj
     e10:	84 eb       	ldi	r24, 0xB4	; 180
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
						
						moveOnDirection(140,1,NORMALSPEED,ALL_DETECTIONS_OFF,TWO_SECOND_BREAK_TIME);	//ulazi u cilj
     e18:	8c e8       	ldi	r24, 0x8C	; 140
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	61 e0       	ldi	r22, 0x01	; 1
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	44 ec       	ldi	r20, 0xC4	; 196
     e22:	59 e0       	ldi	r21, 0x09	; 9
     e24:	23 e0       	ldi	r18, 0x03	; 3
     e26:	00 ed       	ldi	r16, 0xD0	; 208
     e28:	17 e0       	ldi	r17, 0x07	; 7
     e2a:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						pauza_ms(5);
     e2e:	65 e0       	ldi	r22, 0x05	; 5
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						
						moveOnDirection(320,-1,NORMALSPEED,TASTER_SUDAR_ON,NO_BREAK_TIME);	//izlazim iz cilja
     e3a:	80 e4       	ldi	r24, 0x40	; 64
     e3c:	91 e0       	ldi	r25, 0x01	; 1
     e3e:	6f ef       	ldi	r22, 0xFF	; 255
     e40:	7f ef       	ldi	r23, 0xFF	; 255
     e42:	44 ec       	ldi	r20, 0xC4	; 196
     e44:	59 e0       	ldi	r21, 0x09	; 9
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	00 e0       	ldi	r16, 0x00	; 0
     e4a:	10 e0       	ldi	r17, 0x00	; 0
     e4c:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						setUgao(270);	//postavlja se da da moze da ide da kupi mapu
     e50:	8e e0       	ldi	r24, 0x0E	; 14
     e52:	91 e0       	ldi	r25, 0x01	; 1
     e54:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
						
						moveOnDirection(200,-1,NORMALSPEED,ALL_DETECTIONS_ON,NO_BREAK_TIME);	//izlazi malo da se na putu do mape ne bi spuco u totem
     e58:	88 ec       	ldi	r24, 0xC8	; 200
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	6f ef       	ldi	r22, 0xFF	; 255
     e5e:	7f ef       	ldi	r23, 0xFF	; 255
     e60:	44 ec       	ldi	r20, 0xC4	; 196
     e62:	59 e0       	ldi	r21, 0x09	; 9
     e64:	22 e0       	ldi	r18, 0x02	; 2
     e66:	00 e0       	ldi	r16, 0x00	; 0
     e68:	10 e0       	ldi	r17, 0x00	; 0
     e6a:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						zatvoriSkupljac();
     e6e:	0e 94 c1 03 	call	0x782	; 0x782 <zatvoriSkupljac>
						
						collisionCounter = 0;
     e72:	1b 8e       	std	Y+27, r1	; 0x1b
						
						if((tacticCombination == 2) || ((tacticCombination == 0) && (totemCollisionFlag == TRUE)))	
     e74:	8a 8d       	ldd	r24, Y+26	; 0x1a
     e76:	82 30       	cpi	r24, 0x02	; 2
     e78:	31 f0       	breq	.+12     	; 0xe86 <blueSide+0x4d2>
     e7a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     e7c:	88 23       	and	r24, r24
     e7e:	69 f4       	brne	.+26     	; 0xe9a <blueSide+0x4e6>
     e80:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e82:	88 23       	and	r24, r24
     e84:	51 f4       	brne	.+20     	; 0xe9a <blueSide+0x4e6>
						{
							setUgao(270);
     e86:	8e e0       	ldi	r24, 0x0E	; 14
     e88:	91 e0       	ldi	r25, 0x01	; 1
     e8a:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
							otvoriSkupljac();
     e8e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <otvoriSkupljac>
							newPosition = 4;//ide na protivnicki totem
     e92:	84 e0       	ldi	r24, 0x04	; 4
     e94:	8c 8f       	std	Y+28, r24	; 0x1c
							state = FAST_AND_FURIOUS;	
     e96:	1f 8e       	std	Y+31, r1	; 0x1f
     e98:	ce cd       	rjmp	.-1124   	; 0xa36 <blueSide+0x82>
							
							break;
						}
						
						if((tacticCombination == 3) || ((tacticCombination == 1) && (totemCollisionFlag == TRUE)))	//ide da krade
     e9a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     e9c:	83 30       	cpi	r24, 0x03	; 3
     e9e:	41 f0       	breq	.+16     	; 0xeb0 <blueSide+0x4fc>
     ea0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	09 f0       	breq	.+2      	; 0xea8 <blueSide+0x4f4>
     ea6:	2c c2       	rjmp	.+1112   	; 0x1300 <__stack+0x201>
     ea8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     eaa:	88 23       	and	r24, r24
     eac:	09 f0       	breq	.+2      	; 0xeb0 <blueSide+0x4fc>
     eae:	28 c2       	rjmp	.+1104   	; 0x1300 <__stack+0x201>
						{
							setUgao(270);
     eb0:	8e e0       	ldi	r24, 0x0E	; 14
     eb2:	91 e0       	ldi	r25, 0x01	; 1
     eb4:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
     eb8:	17 c0       	rjmp	.+46     	; 0xee8 <blueSide+0x534>
							
							while(gotoXY(2700,1835,-1,NORMALSPEED,NORMALPRECISION,ALL_DETECTIONS_ON))	//ide na poziciju odakle krece da krade
							{
								pauza_ms(50);
     eba:	62 e3       	ldi	r22, 0x32	; 50
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
								moveOnDirection(20,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
     ec6:	84 e1       	ldi	r24, 0x14	; 20
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	61 e0       	ldi	r22, 0x01	; 1
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	44 ec       	ldi	r20, 0xC4	; 196
     ed0:	59 e0       	ldi	r21, 0x09	; 9
     ed2:	23 e0       	ldi	r18, 0x03	; 3
     ed4:	00 e0       	ldi	r16, 0x00	; 0
     ed6:	10 e0       	ldi	r17, 0x00	; 0
     ed8:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
								pauza_ms(500);
     edc:	64 ef       	ldi	r22, 0xF4	; 244
     ede:	71 e0       	ldi	r23, 0x01	; 1
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						
						if((tacticCombination == 3) || ((tacticCombination == 1) && (totemCollisionFlag == TRUE)))	//ide da krade
						{
							setUgao(270);
							
							while(gotoXY(2700,1835,-1,NORMALSPEED,NORMALPRECISION,ALL_DETECTIONS_ON))	//ide na poziciju odakle krece da krade
     ee8:	8c e8       	ldi	r24, 0x8C	; 140
     eea:	9a e0       	ldi	r25, 0x0A	; 10
     eec:	6b e2       	ldi	r22, 0x2B	; 43
     eee:	77 e0       	ldi	r23, 0x07	; 7
     ef0:	4f ef       	ldi	r20, 0xFF	; 255
     ef2:	24 ec       	ldi	r18, 0xC4	; 196
     ef4:	39 e0       	ldi	r19, 0x09	; 9
     ef6:	05 e0       	ldi	r16, 0x05	; 5
     ef8:	10 e0       	ldi	r17, 0x00	; 0
     efa:	ee 24       	eor	r14, r14
     efc:	68 94       	set
     efe:	e1 f8       	bld	r14, 1
     f00:	0e 94 bd 2c 	call	0x597a	; 0x597a <gotoXY>
     f04:	88 23       	and	r24, r24
     f06:	c9 f6       	brne	.-78     	; 0xeba <blueSide+0x506>
								pauza_ms(50);
								moveOnDirection(20,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
								pauza_ms(500);
							}
								
							newPosition = 7;
     f08:	87 e0       	ldi	r24, 0x07	; 7
     f0a:	8c 8f       	std	Y+28, r24	; 0x1c
							state = FAST_AND_FURIOUS;
     f0c:	1f 8e       	std	Y+31, r1	; 0x1f
							detectionFlags = ALL_DETECTIONS_ON;
     f0e:	82 e0       	ldi	r24, 0x02	; 2
     f10:	8f 8b       	std	Y+23, r24	; 0x17
     f12:	91 cd       	rjmp	.-1246   	; 0xa36 <blueSide+0x82>
					}//end position if
					
					/************************************************************************/
					/*  DOSAO JE KOD MAPE                                                   */
					/************************************************************************/
					if(position == 3)
     f14:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f16:	83 30       	cpi	r24, 0x03	; 3
     f18:	09 f0       	breq	.+2      	; 0xf1c <blueSide+0x568>
     f1a:	73 c0       	rjmp	.+230    	; 0x1002 <blueSide+0x64e>
					{
						zatvoriSkupljac();	
     f1c:	0e 94 c1 03 	call	0x782	; 0x782 <zatvoriSkupljac>
						//ako regularno ide po mapu ovaj uslov ce biti ispunjen,
						//to je posle drugog dela totema ili posle istovaranja u start
						//ako tu ide prinudno, tj. zbog sudara onda nece biti ispunjen
						//if((readUgaoStepeni()>90) && (readUgaoStepeni()<270))		
						//{
						if((tacticCombination != 3)  && (tacticCombination != 2))	//ulazi ovde samo ako je ovo planski, tj. ne zbog sudara
     f20:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f22:	83 30       	cpi	r24, 0x03	; 3
     f24:	19 f1       	breq	.+70     	; 0xf6c <blueSide+0x5b8>
     f26:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f28:	82 30       	cpi	r24, 0x02	; 2
     f2a:	01 f1       	breq	.+64     	; 0xf6c <blueSide+0x5b8>
						{
							setUgao(180);				//okrece se paralelno mapi
     f2c:	84 eb       	ldi	r24, 0xB4	; 180
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
						
							moveOnDirection(100,-1,NORMALSPEED,TASTER_SUDAR_ON,NO_BREAK_TIME);	//guram disk koji se mozda nalazi iza
     f34:	84 e6       	ldi	r24, 0x64	; 100
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	6f ef       	ldi	r22, 0xFF	; 255
     f3a:	7f ef       	ldi	r23, 0xFF	; 255
     f3c:	44 ec       	ldi	r20, 0xC4	; 196
     f3e:	59 e0       	ldi	r21, 0x09	; 9
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	00 e0       	ldi	r16, 0x00	; 0
     f44:	10 e0       	ldi	r17, 0x00	; 0
     f46:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
							pauza_ms(5);
     f4a:	65 e0       	ldi	r22, 0x05	; 5
     f4c:	70 e0       	ldi	r23, 0x00	; 0
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
							moveOnDirection(100,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);	//vracam se nazad
     f56:	84 e6       	ldi	r24, 0x64	; 100
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	61 e0       	ldi	r22, 0x01	; 1
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	44 ec       	ldi	r20, 0xC4	; 196
     f60:	59 e0       	ldi	r21, 0x09	; 9
     f62:	23 e0       	ldi	r18, 0x03	; 3
     f64:	00 e0       	ldi	r16, 0x00	; 0
     f66:	10 e0       	ldi	r17, 0x00	; 0
     f68:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						}											
					
						if(tacticCombination == 3)	//ako je usao u slucaju sudara menjam mu taktiku
     f6c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f6e:	83 30       	cpi	r24, 0x03	; 3
     f70:	11 f4       	brne	.+4      	; 0xf76 <blueSide+0x5c2>
							tacticCombination = 1;
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	8a 8f       	std	Y+26, r24	; 0x1a
						if(tacticCombination == 2)
     f76:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f78:	82 30       	cpi	r24, 0x02	; 2
     f7a:	09 f4       	brne	.+2      	; 0xf7e <blueSide+0x5ca>
							tacticCombination = 0;
     f7c:	1a 8e       	std	Y+26, r1	; 0x1a
							
						setUgao(272);				//okrece se da moze da pokupi mapu
     f7e:	80 e1       	ldi	r24, 0x10	; 16
     f80:	91 e0       	ldi	r25, 0x01	; 1
     f82:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
						saljiKinezima(MOTOR_SKUPLJAC_MAPE,SKUPLJAC_MAPE_BRZINA);
     f86:	83 e4       	ldi	r24, 0x43	; 67
     f88:	66 e9       	ldi	r22, 0x96	; 150
     f8a:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						moveOnDirection(1000,-1,LOWSPEED,ALL_DETECTIONS_OFF,TWO_SECOND_BREAK_TIME); //prilazi mapi
     f8e:	88 ee       	ldi	r24, 0xE8	; 232
     f90:	93 e0       	ldi	r25, 0x03	; 3
     f92:	6f ef       	ldi	r22, 0xFF	; 255
     f94:	7f ef       	ldi	r23, 0xFF	; 255
     f96:	48 ee       	ldi	r20, 0xE8	; 232
     f98:	53 e0       	ldi	r21, 0x03	; 3
     f9a:	23 e0       	ldi	r18, 0x03	; 3
     f9c:	00 ed       	ldi	r16, 0xD0	; 208
     f9e:	17 e0       	ldi	r17, 0x07	; 7
     fa0:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						pokupiMapu();	
     fa4:	0e 94 01 04 	call	0x802	; 0x802 <pokupiMapu>
						
						moveOnDirection(320,1,NORMALSPEED,TASTER_SUDAR_ON,NO_BREAK_TIME);
     fa8:	80 e4       	ldi	r24, 0x40	; 64
     faa:	91 e0       	ldi	r25, 0x01	; 1
     fac:	61 e0       	ldi	r22, 0x01	; 1
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	44 ec       	ldi	r20, 0xC4	; 196
     fb2:	59 e0       	ldi	r21, 0x09	; 9
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	00 e0       	ldi	r16, 0x00	; 0
     fb8:	10 e0       	ldi	r17, 0x00	; 0
     fba:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						saljiKinezima(MOTOR_SKUPLJAC_MAPE,150);	//ponovo aktivira aktuator da se ne bi mapa vukla po podu
     fbe:	83 e4       	ldi	r24, 0x43	; 67
     fc0:	66 e9       	ldi	r22, 0x96	; 150
     fc2:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						pauza_ms(600);
     fc6:	68 e5       	ldi	r22, 0x58	; 88
     fc8:	72 e0       	ldi	r23, 0x02	; 2
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						saljiKinezima(MOTOR_SKUPLJAC_MAPE,0);
     fd2:	83 e4       	ldi	r24, 0x43	; 67
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						
						if(totemCollisionFlag == TRUE)	//indikacija da nije pokupio drugi deo naseg totema
     fda:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fdc:	88 23       	and	r24, r24
     fde:	29 f4       	brne	.+10     	; 0xfea <blueSide+0x636>
						{
							state = RIDE_THE_LIGHTING;	//ide da kupi drugi deo naseg totema
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	8f 8f       	std	Y+31, r24	; 0x1f
							newPosition = 3;
     fe4:	83 e0       	ldi	r24, 0x03	; 3
     fe6:	8c 8f       	std	Y+28, r24	; 0x1c
     fe8:	26 cd       	rjmp	.-1460   	; 0xa36 <blueSide+0x82>
							
							break;	
						}
						
						if(tacticCombination != 0)	
     fea:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fec:	88 23       	and	r24, r24
     fee:	31 f0       	breq	.+12     	; 0xffc <blueSide+0x648>
						{
							newPosition = 7;	//ide da krade
     ff0:	87 e0       	ldi	r24, 0x07	; 7
     ff2:	8c 8f       	std	Y+28, r24	; 0x1c
							state = FAST_AND_FURIOUS;
     ff4:	1f 8e       	std	Y+31, r1	; 0x1f
							detectionFlags = ALL_DETECTIONS_ON;;
     ff6:	82 e0       	ldi	r24, 0x02	; 2
     ff8:	8f 8b       	std	Y+23, r24	; 0x17
     ffa:	1d cd       	rjmp	.-1478   	; 0xa36 <blueSide+0x82>
							break;
						}
						
						otvoriSkupljac();	
     ffc:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <otvoriSkupljac>
    1000:	7f c1       	rjmp	.+766    	; 0x1300 <__stack+0x201>
					}//end position if
					
					/************************************************************************/
					/*  NALAZI SE ISPRED PROTIVNICKOG TOTEMA                                */
					/************************************************************************/
					if(position == 4)
    1002:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1004:	84 30       	cpi	r24, 0x04	; 4
    1006:	e9 f5       	brne	.+122    	; 0x1082 <blueSide+0x6ce>
					{
						setUgao(245);   //nalazi se ispred protivnickog totema, okrece se da bi mu mogao prici
    1008:	85 ef       	ldi	r24, 0xF5	; 245
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
						
						moveOnDirection(140,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
    1010:	8c e8       	ldi	r24, 0x8C	; 140
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	61 e0       	ldi	r22, 0x01	; 1
    1016:	70 e0       	ldi	r23, 0x00	; 0
    1018:	44 ec       	ldi	r20, 0xC4	; 196
    101a:	59 e0       	ldi	r21, 0x09	; 9
    101c:	23 e0       	ldi	r18, 0x03	; 3
    101e:	00 e0       	ldi	r16, 0x00	; 0
    1020:	10 e0       	ldi	r17, 0x00	; 0
    1022:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						skupljacCim(MOTOR_SKUPLJAC_LEVI,35);	//brani se od onog sugavog diska na uglu
    1026:	81 e4       	ldi	r24, 0x41	; 65
    1028:	63 e2       	ldi	r22, 0x23	; 35
    102a:	0e 94 16 04 	call	0x82c	; 0x82c <skupljacCim>
						
						moveOnDirection(95,1,NORMALSPEED,ALL_DETECTIONS_OFF,TWO_SECOND_BREAK_TIME);	//prilazi skroz
    102e:	8f e5       	ldi	r24, 0x5F	; 95
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	61 e0       	ldi	r22, 0x01	; 1
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	44 ec       	ldi	r20, 0xC4	; 196
    1038:	59 e0       	ldi	r21, 0x09	; 9
    103a:	23 e0       	ldi	r18, 0x03	; 3
    103c:	00 ed       	ldi	r16, 0xD0	; 208
    103e:	17 e0       	ldi	r17, 0x07	; 7
    1040:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						setUgao(195);  //cisti sa totema  190
    1044:	83 ec       	ldi	r24, 0xC3	; 195
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
						moveOnDirection(150,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);	//kupi
    104c:	86 e9       	ldi	r24, 0x96	; 150
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	61 e0       	ldi	r22, 0x01	; 1
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	44 ec       	ldi	r20, 0xC4	; 196
    1056:	59 e0       	ldi	r21, 0x09	; 9
    1058:	23 e0       	ldi	r18, 0x03	; 3
    105a:	00 e0       	ldi	r16, 0x00	; 0
    105c:	10 e0       	ldi	r17, 0x00	; 0
    105e:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						setUgao(165); //155	//ispravlja se
    1062:	85 ea       	ldi	r24, 0xA5	; 165
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
						moveOnDirection(300,1,NORMALSPEED,ALL_DETECTIONS_ON,NO_BREAK_TIME); //ide malo napred ka startu
    106a:	8c e2       	ldi	r24, 0x2C	; 44
    106c:	91 e0       	ldi	r25, 0x01	; 1
    106e:	61 e0       	ldi	r22, 0x01	; 1
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	44 ec       	ldi	r20, 0xC4	; 196
    1074:	59 e0       	ldi	r21, 0x09	; 9
    1076:	22 e0       	ldi	r18, 0x02	; 2
    1078:	00 e0       	ldi	r16, 0x00	; 0
    107a:	10 e0       	ldi	r17, 0x00	; 0
    107c:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
    1080:	3f c1       	rjmp	.+638    	; 0x1300 <__stack+0x201>
					}//end position if
					
					/************************************************************************/
					/*   SKORO PA ISPRED NASEG STARTA- KABINE                               */
					/************************************************************************/
					if(position == 5)
    1082:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1084:	85 30       	cpi	r24, 0x05	; 5
    1086:	b1 f5       	brne	.+108    	; 0x10f4 <blueSide+0x740>
					{
						if(tasSkupljacDesniOtvoren() || tasSkupljacLeviOtvoren())	//u slucaju branja protivnickog totema 
    1088:	0e 94 30 37 	call	0x6e60	; 0x6e60 <tasSkupljacDesniOtvoren>
    108c:	88 23       	and	r24, r24
    108e:	21 f4       	brne	.+8      	; 0x1098 <blueSide+0x6e4>
    1090:	0e 94 18 37 	call	0x6e30	; 0x6e30 <tasSkupljacLeviOtvoren>
    1094:	88 23       	and	r24, r24
    1096:	b9 f0       	breq	.+46     	; 0x10c6 <blueSide+0x712>
						{
							saljiKinezima(MOTOR_SKUPLJAC_LEVI,35);	//delimicno zatvara govna pre ulaska u start - kabinu
    1098:	81 e4       	ldi	r24, 0x41	; 65
    109a:	63 e2       	ldi	r22, 0x23	; 35
    109c:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
							saljiKinezima(MOTOR_SKUPLJAC_DESNI,135);
    10a0:	82 e4       	ldi	r24, 0x42	; 66
    10a2:	67 e8       	ldi	r22, 0x87	; 135
    10a4:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
							pauza_ms(110);
    10a8:	6e e6       	ldi	r22, 0x6E	; 110
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
							saljiKinezima(MOTOR_SKUPLJAC_LEVI,0);
    10b4:	81 e4       	ldi	r24, 0x41	; 65
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
							saljiKinezima(MOTOR_SKUPLJAC_DESNI,0);
    10bc:	82 e4       	ldi	r24, 0x42	; 66
    10be:	60 e0       	ldi	r22, 0x00	; 0
    10c0:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
    10c4:	1d c1       	rjmp	.+570    	; 0x1300 <__stack+0x201>
						}else         //u slucaju kradje sa protivnickog cilja
						{
							saljiKinezima(MOTOR_SKUPLJAC_LEVI,135);	//delimicno otvara govna pre ulaska u start - kabinu
    10c6:	81 e4       	ldi	r24, 0x41	; 65
    10c8:	67 e8       	ldi	r22, 0x87	; 135
    10ca:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
							saljiKinezima(MOTOR_SKUPLJAC_DESNI,35);
    10ce:	82 e4       	ldi	r24, 0x42	; 66
    10d0:	63 e2       	ldi	r22, 0x23	; 35
    10d2:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
							pauza_ms(170);
    10d6:	6a ea       	ldi	r22, 0xAA	; 170
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
							saljiKinezima(MOTOR_SKUPLJAC_LEVI,0);
    10e2:	81 e4       	ldi	r24, 0x41	; 65
    10e4:	60 e0       	ldi	r22, 0x00	; 0
    10e6:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
							saljiKinezima(MOTOR_SKUPLJAC_DESNI,0);	
    10ea:	82 e4       	ldi	r24, 0x42	; 66
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
    10f2:	06 c1       	rjmp	.+524    	; 0x1300 <__stack+0x201>
					}//end position if
					
					/************************************************************************/
					/*	U STARTU                                                            */
					/************************************************************************/
					if(position == 6)
    10f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10f6:	86 30       	cpi	r24, 0x06	; 6
    10f8:	81 f5       	brne	.+96     	; 0x115a <__stack+0x5b>
					{
						saljiKinezima(MOTOR_SKUPLJAC_DESNI,50);
    10fa:	82 e4       	ldi	r24, 0x42	; 66
    10fc:	62 e3       	ldi	r22, 0x32	; 50
    10fe:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						saljiKinezima(MOTOR_SKUPLJAC_LEVI,150);
    1102:	81 e4       	ldi	r24, 0x41	; 65
    1104:	66 e9       	ldi	r22, 0x96	; 150
    1106:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						pauza_ms(50);
    110a:	62 e3       	ldi	r22, 0x32	; 50
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						saljiKinezima(MOTOR_SKUPLJAC_LEVI,0);
    1116:	81 e4       	ldi	r24, 0x41	; 65
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						saljiKinezima(MOTOR_SKUPLJAC_DESNI,0);	
    111e:	82 e4       	ldi	r24, 0x42	; 66
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						
						if((tacticCombination == 2) || (tacticCombination == 3))	//ide na mapu
    1126:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1128:	82 30       	cpi	r24, 0x02	; 2
    112a:	21 f0       	breq	.+8      	; 0x1134 <__stack+0x35>
    112c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    112e:	83 30       	cpi	r24, 0x03	; 3
    1130:	09 f0       	breq	.+2      	; 0x1134 <__stack+0x35>
    1132:	e6 c0       	rjmp	.+460    	; 0x1300 <__stack+0x201>
						{
							moveOnDirection(220,-1,NORMALSPEED,ALL_DETECTIONS_ON,NO_BREAK_TIME);
    1134:	8c ed       	ldi	r24, 0xDC	; 220
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	6f ef       	ldi	r22, 0xFF	; 255
    113a:	7f ef       	ldi	r23, 0xFF	; 255
    113c:	44 ec       	ldi	r20, 0xC4	; 196
    113e:	59 e0       	ldi	r21, 0x09	; 9
    1140:	22 e0       	ldi	r18, 0x02	; 2
    1142:	00 e0       	ldi	r16, 0x00	; 0
    1144:	10 e0       	ldi	r17, 0x00	; 0
    1146:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
							zatvoriSkupljac();
    114a:	0e 94 c1 03 	call	0x782	; 0x782 <zatvoriSkupljac>
							
							newPosition = 1;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	8c 8f       	std	Y+28, r24	; 0x1c
							state = RIDE_THE_LIGHTING;
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	8f 8f       	std	Y+31, r24	; 0x1f
							collisionCounter = 0;
    1156:	1b 8e       	std	Y+27, r1	; 0x1b
    1158:	6e cc       	rjmp	.-1828   	; 0xa36 <blueSide+0x82>
					}//end position if
					
					/************************************************************************/
					/*	IDE NA DRUGI KRAJ STOLA, PRE KRADJE                                 */
					/************************************************************************/
					if(position == 7)
    115a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    115c:	87 30       	cpi	r24, 0x07	; 7
    115e:	29 f4       	brne	.+10     	; 0x116a <__stack+0x6b>
					{
						zatvoriSkupljac();
    1160:	0e 94 c1 03 	call	0x782	; 0x782 <zatvoriSkupljac>
						detectionFlags = ALL_DETECTIONS_ON;
    1164:	82 e0       	ldi	r24, 0x02	; 2
    1166:	8f 8b       	std	Y+23, r24	; 0x17
    1168:	cb c0       	rjmp	.+406    	; 0x1300 <__stack+0x201>
					}
					
					/************************************************************************/
					/*		ISPRED PROTIVNICKOG BRODA                                       */
					/************************************************************************/
					if(position == 8)
    116a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    116c:	88 30       	cpi	r24, 0x08	; 8
    116e:	09 f0       	breq	.+2      	; 0x1172 <__stack+0x73>
    1170:	c7 c0       	rjmp	.+398    	; 0x1300 <__stack+0x201>
					{
						setUgaoNula();	//okrecem se ka protivnickom brodu
    1172:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <setUgaoNula>
						otvoriSkupljac();	//otvaram govna
    1176:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <otvoriSkupljac>
						
						moveOnDirection(160,1,NORMALSPEED,ALL_DETECTIONS_ON,NO_BREAK_TIME);
    117a:	80 ea       	ldi	r24, 0xA0	; 160
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	61 e0       	ldi	r22, 0x01	; 1
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	44 ec       	ldi	r20, 0xC4	; 196
    1184:	59 e0       	ldi	r21, 0x09	; 9
    1186:	22 e0       	ldi	r18, 0x02	; 2
    1188:	00 e0       	ldi	r16, 0x00	; 0
    118a:	10 e0       	ldi	r17, 0x00	; 0
    118c:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						saljiKinezima(MOTOR_SKUPLJAC_DESNI,150);
    1190:	82 e4       	ldi	r24, 0x42	; 66
    1192:	66 e9       	ldi	r22, 0x96	; 150
    1194:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						saljiKinezima(MOTOR_SKUPLJAC_LEVI,50);
    1198:	81 e4       	ldi	r24, 0x41	; 65
    119a:	62 e3       	ldi	r22, 0x32	; 50
    119c:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						pauza_ms(70);
    11a0:	66 e4       	ldi	r22, 0x46	; 70
    11a2:	70 e0       	ldi	r23, 0x00	; 0
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						otvoriSkupljac();
    11ac:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <otvoriSkupljac>
						moveOnDirection(100,1,NORMALSPEED,ALL_DETECTIONS_OFF,TWO_SECOND_BREAK_TIME);
    11b0:	84 e6       	ldi	r24, 0x64	; 100
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	61 e0       	ldi	r22, 0x01	; 1
    11b6:	70 e0       	ldi	r23, 0x00	; 0
    11b8:	44 ec       	ldi	r20, 0xC4	; 196
    11ba:	59 e0       	ldi	r21, 0x09	; 9
    11bc:	23 e0       	ldi	r18, 0x03	; 3
    11be:	00 ed       	ldi	r16, 0xD0	; 208
    11c0:	17 e0       	ldi	r17, 0x07	; 7
    11c2:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						saljiKinezima(MOTOR_SKUPLJAC_DESNI,150);
    11c6:	82 e4       	ldi	r24, 0x42	; 66
    11c8:	66 e9       	ldi	r22, 0x96	; 150
    11ca:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						saljiKinezima(MOTOR_SKUPLJAC_LEVI,50);
    11ce:	81 e4       	ldi	r24, 0x41	; 65
    11d0:	62 e3       	ldi	r22, 0x32	; 50
    11d2:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						pauza_ms(80);
    11d6:	60 e5       	ldi	r22, 0x50	; 80
    11d8:	70 e0       	ldi	r23, 0x00	; 0
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						otvoriSkupljac();
    11e2:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <otvoriSkupljac>
						moveOnDirection(90,1,NORMALSPEED,ALL_DETECTIONS_OFF,TWO_SECOND_BREAK_TIME);
    11e6:	8a e5       	ldi	r24, 0x5A	; 90
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	61 e0       	ldi	r22, 0x01	; 1
    11ec:	70 e0       	ldi	r23, 0x00	; 0
    11ee:	44 ec       	ldi	r20, 0xC4	; 196
    11f0:	59 e0       	ldi	r21, 0x09	; 9
    11f2:	23 e0       	ldi	r18, 0x03	; 3
    11f4:	00 ed       	ldi	r16, 0xD0	; 208
    11f6:	17 e0       	ldi	r17, 0x07	; 7
    11f8:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						saljiKinezima(MOTOR_SKUPLJAC_DESNI,150);
    11fc:	82 e4       	ldi	r24, 0x42	; 66
    11fe:	66 e9       	ldi	r22, 0x96	; 150
    1200:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						saljiKinezima(MOTOR_SKUPLJAC_LEVI,50);
    1204:	81 e4       	ldi	r24, 0x41	; 65
    1206:	62 e3       	ldi	r22, 0x32	; 50
    1208:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						pauza_ms(70);
    120c:	66 e4       	ldi	r22, 0x46	; 70
    120e:	70 e0       	ldi	r23, 0x00	; 0
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						otvoriSkupljac();
    1218:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <otvoriSkupljac>
						moveOnDirection(40,1,NORMALSPEED,ALL_DETECTIONS_OFF,TWO_SECOND_BREAK_TIME);
    121c:	88 e2       	ldi	r24, 0x28	; 40
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	61 e0       	ldi	r22, 0x01	; 1
    1222:	70 e0       	ldi	r23, 0x00	; 0
    1224:	44 ec       	ldi	r20, 0xC4	; 196
    1226:	59 e0       	ldi	r21, 0x09	; 9
    1228:	23 e0       	ldi	r18, 0x03	; 3
    122a:	00 ed       	ldi	r16, 0xD0	; 208
    122c:	17 e0       	ldi	r17, 0x07	; 7
    122e:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>

					
						saljiKinezima(MOTOR_SKUPLJAC_DESNI,140);
    1232:	82 e4       	ldi	r24, 0x42	; 66
    1234:	6c e8       	ldi	r22, 0x8C	; 140
    1236:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						saljiKinezima(MOTOR_SKUPLJAC_LEVI,40);
    123a:	81 e4       	ldi	r24, 0x41	; 65
    123c:	68 e2       	ldi	r22, 0x28	; 40
    123e:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						pauza_ms(350);
    1242:	6e e5       	ldi	r22, 0x5E	; 94
    1244:	71 e0       	ldi	r23, 0x01	; 1
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						saljiKinezima(MOTOR_SKUPLJAC_LEVI,0);
    124e:	81 e4       	ldi	r24, 0x41	; 65
    1250:	60 e0       	ldi	r22, 0x00	; 0
    1252:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						saljiKinezima(MOTOR_SKUPLJAC_DESNI,0);
    1256:	82 e4       	ldi	r24, 0x42	; 66
    1258:	60 e0       	ldi	r22, 0x00	; 0
    125a:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						pauza_ms(10);
    125e:	6a e0       	ldi	r22, 0x0A	; 10
    1260:	70 e0       	ldi	r23, 0x00	; 0
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						saljiKinezima(MOTOR_SKUPLJAC_LEVI,10);
    126a:	81 e4       	ldi	r24, 0x41	; 65
    126c:	6a e0       	ldi	r22, 0x0A	; 10
    126e:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						saljiKinezima(MOTOR_SKUPLJAC_DESNI,110);
    1272:	82 e4       	ldi	r24, 0x42	; 66
    1274:	6e e6       	ldi	r22, 0x6E	; 110
    1276:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						moveOnDirection(350,-1,NORMALSPEED,TASTER_SUDAR_ON,NO_BREAK_TIME);	//izlazim iz broda  290
    127a:	8e e5       	ldi	r24, 0x5E	; 94
    127c:	91 e0       	ldi	r25, 0x01	; 1
    127e:	6f ef       	ldi	r22, 0xFF	; 255
    1280:	7f ef       	ldi	r23, 0xFF	; 255
    1282:	44 ec       	ldi	r20, 0xC4	; 196
    1284:	59 e0       	ldi	r21, 0x09	; 9
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	00 e0       	ldi	r16, 0x00	; 0
    128a:	10 e0       	ldi	r17, 0x00	; 0
    128c:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
    1290:	17 c0       	rjmp	.+46     	; 0x12c0 <__stack+0x1c1>
						
						while(gotoXY(2620,readY()-60,1,NORMALSPEED,NORMALPRECISION,ALL_DETECTIONS_ON))	//idem na poziciju odakle krecem ka svojoj kabini- startu
						{
							pauza_ms(5);
    1292:	65 e0       	ldi	r22, 0x05	; 5
    1294:	70 e0       	ldi	r23, 0x00	; 0
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
							moveOnDirection(10,-1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
    129e:	8a e0       	ldi	r24, 0x0A	; 10
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	6f ef       	ldi	r22, 0xFF	; 255
    12a4:	7f ef       	ldi	r23, 0xFF	; 255
    12a6:	44 ec       	ldi	r20, 0xC4	; 196
    12a8:	59 e0       	ldi	r21, 0x09	; 9
    12aa:	23 e0       	ldi	r18, 0x03	; 3
    12ac:	00 e0       	ldi	r16, 0x00	; 0
    12ae:	10 e0       	ldi	r17, 0x00	; 0
    12b0:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
							pauza_ms(1000);
    12b4:	68 ee       	ldi	r22, 0xE8	; 232
    12b6:	73 e0       	ldi	r23, 0x03	; 3
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						pauza_ms(10);
						saljiKinezima(MOTOR_SKUPLJAC_LEVI,10);
						saljiKinezima(MOTOR_SKUPLJAC_DESNI,110);
						moveOnDirection(350,-1,NORMALSPEED,TASTER_SUDAR_ON,NO_BREAK_TIME);	//izlazim iz broda  290
						
						while(gotoXY(2620,readY()-60,1,NORMALSPEED,NORMALPRECISION,ALL_DETECTIONS_ON))	//idem na poziciju odakle krecem ka svojoj kabini- startu
    12c0:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <readY>
    12c4:	9c 01       	movw	r18, r24
    12c6:	2c 53       	subi	r18, 0x3C	; 60
    12c8:	30 40       	sbci	r19, 0x00	; 0
    12ca:	8c e3       	ldi	r24, 0x3C	; 60
    12cc:	9a e0       	ldi	r25, 0x0A	; 10
    12ce:	b9 01       	movw	r22, r18
    12d0:	41 e0       	ldi	r20, 0x01	; 1
    12d2:	24 ec       	ldi	r18, 0xC4	; 196
    12d4:	39 e0       	ldi	r19, 0x09	; 9
    12d6:	05 e0       	ldi	r16, 0x05	; 5
    12d8:	10 e0       	ldi	r17, 0x00	; 0
    12da:	ee 24       	eor	r14, r14
    12dc:	68 94       	set
    12de:	e1 f8       	bld	r14, 1
    12e0:	0e 94 bd 2c 	call	0x597a	; 0x597a <gotoXY>
    12e4:	88 23       	and	r24, r24
    12e6:	a9 f6       	brne	.-86     	; 0x1292 <__stack+0x193>
							pauza_ms(5);
							moveOnDirection(10,-1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
							pauza_ms(1000);
						}
						
						saljiKinezima(MOTOR_SKUPLJAC_LEVI,0);
    12e8:	81 e4       	ldi	r24, 0x41	; 65
    12ea:	60 e0       	ldi	r22, 0x00	; 0
    12ec:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						saljiKinezima(MOTOR_SKUPLJAC_DESNI,0);
    12f0:	82 e4       	ldi	r24, 0x42	; 66
    12f2:	60 e0       	ldi	r22, 0x00	; 0
    12f4:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						
						state = FAST_AND_FURIOUS;
    12f8:	1f 8e       	std	Y+31, r1	; 0x1f
						newPosition = 5;
    12fa:	85 e0       	ldi	r24, 0x05	; 5
    12fc:	8c 8f       	std	Y+28, r24	; 0x1c
    12fe:	9b cb       	rjmp	.-2250   	; 0xa36 <blueSide+0x82>
		{
			/************************************************************************/
			/*	GLAVNE PUTANJE ZA MEC                                               */
			/************************************************************************/	
			case FAST_AND_FURIOUS:
				for(position = newPosition; position < brojPozicijaPlavo; position++)
    1300:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1302:	8f 5f       	subi	r24, 0xFF	; 255
    1304:	8d 8f       	std	Y+29, r24	; 0x1d
    1306:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1308:	89 30       	cpi	r24, 0x09	; 9
    130a:	08 f4       	brcc	.+2      	; 0x130e <__stack+0x20f>
    130c:	ac cb       	rjmp	.-2216   	; 0xa66 <blueSide+0xb2>
    130e:	93 cb       	rjmp	.-2266   	; 0xa36 <blueSide+0x82>
			
			/************************************************************************/
			/*		ALTERNATIVNE I POMOCNE KRETNJE                                  */
			/************************************************************************/	
			case RIDE_THE_LIGHTING:
				for(position = newPosition; position<brojPozicijaPlavoAlt;position++)
    1310:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1312:	8d 8f       	std	Y+29, r24	; 0x1d
    1314:	5a c1       	rjmp	.+692    	; 0x15ca <__stack+0x4cb>
				{
					if(gotoXY(pgm_read_word(&pathXBlueAlt[position]),pgm_read_word(&pathYBlueAlt[position]),pgm_read_byte(&directionBlueAlt[position]),NORMALSPEED,NORMALPRECISION,detectionFlags))
    1316:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1318:	88 2f       	mov	r24, r24
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	8c 5f       	subi	r24, 0xFC	; 252
    1322:	9e 4f       	sbci	r25, 0xFE	; 254
    1324:	9b 87       	std	Y+11, r25	; 0x0b
    1326:	8a 87       	std	Y+10, r24	; 0x0a
    1328:	8a 85       	ldd	r24, Y+10	; 0x0a
    132a:	9b 85       	ldd	r25, Y+11	; 0x0b
    132c:	fc 01       	movw	r30, r24
    132e:	85 91       	lpm	r24, Z+
    1330:	94 91       	lpm	r25, Z+
    1332:	99 87       	std	Y+9, r25	; 0x09
    1334:	88 87       	std	Y+8, r24	; 0x08
    1336:	fb 87       	std	Y+11, r31	; 0x0b
    1338:	ea 87       	std	Y+10, r30	; 0x0a
    133a:	88 85       	ldd	r24, Y+8	; 0x08
    133c:	99 85       	ldd	r25, Y+9	; 0x09
    133e:	bc 01       	movw	r22, r24
    1340:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1342:	88 2f       	mov	r24, r24
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	84 5f       	subi	r24, 0xF4	; 244
    134c:	9e 4f       	sbci	r25, 0xFE	; 254
    134e:	9f 83       	std	Y+7, r25	; 0x07
    1350:	8e 83       	std	Y+6, r24	; 0x06
    1352:	8e 81       	ldd	r24, Y+6	; 0x06
    1354:	9f 81       	ldd	r25, Y+7	; 0x07
    1356:	fc 01       	movw	r30, r24
    1358:	85 91       	lpm	r24, Z+
    135a:	94 91       	lpm	r25, Z+
    135c:	9d 83       	std	Y+5, r25	; 0x05
    135e:	8c 83       	std	Y+4, r24	; 0x04
    1360:	ff 83       	std	Y+7, r31	; 0x07
    1362:	ee 83       	std	Y+6, r30	; 0x06
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	ac 01       	movw	r20, r24
    136a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    136c:	88 2f       	mov	r24, r24
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	8c 5e       	subi	r24, 0xEC	; 236
    1372:	9e 4f       	sbci	r25, 0xFE	; 254
    1374:	9b 83       	std	Y+3, r25	; 0x03
    1376:	8a 83       	std	Y+2, r24	; 0x02
    1378:	ea 81       	ldd	r30, Y+2	; 0x02
    137a:	fb 81       	ldd	r31, Y+3	; 0x03
    137c:	84 91       	lpm	r24, Z+
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	28 2f       	mov	r18, r24
    1384:	cb 01       	movw	r24, r22
    1386:	ba 01       	movw	r22, r20
    1388:	42 2f       	mov	r20, r18
    138a:	24 ec       	ldi	r18, 0xC4	; 196
    138c:	39 e0       	ldi	r19, 0x09	; 9
    138e:	05 e0       	ldi	r16, 0x05	; 5
    1390:	10 e0       	ldi	r17, 0x00	; 0
    1392:	ef 88       	ldd	r14, Y+23	; 0x17
    1394:	0e 94 bd 2c 	call	0x597a	; 0x597a <gotoXY>
    1398:	88 23       	and	r24, r24
    139a:	61 f0       	breq	.+24     	; 0x13b4 <__stack+0x2b5>
					{
						state=COLLISION;
    139c:	82 e0       	ldi	r24, 0x02	; 2
    139e:	8f 8f       	std	Y+31, r24	; 0x1f
						newPosition = position + 100;
    13a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13a2:	8c 59       	subi	r24, 0x9C	; 156
    13a4:	8c 8f       	std	Y+28, r24	; 0x1c
						speed = NORMALSPEED;
    13a6:	84 ec       	ldi	r24, 0xC4	; 196
    13a8:	99 e0       	ldi	r25, 0x09	; 9
    13aa:	99 8f       	std	Y+25, r25	; 0x19
    13ac:	88 8f       	std	Y+24, r24	; 0x18
						detectionFlags = ALL_DETECTIONS_ON;
    13ae:	82 e0       	ldi	r24, 0x02	; 2
    13b0:	8f 8b       	std	Y+23, r24	; 0x17
    13b2:	41 cb       	rjmp	.-2430   	; 0xa36 <blueSide+0x82>
		
						break;	
					}//end collison if	
					
					detectionFlags = ALL_DETECTIONS_ON;
    13b4:	82 e0       	ldi	r24, 0x02	; 2
    13b6:	8f 8b       	std	Y+23, r24	; 0x17
					speed = NORMALSPEED;
    13b8:	84 ec       	ldi	r24, 0xC4	; 196
    13ba:	99 e0       	ldi	r25, 0x09	; 9
    13bc:	99 8f       	std	Y+25, r25	; 0x19
    13be:	88 8f       	std	Y+24, r24	; 0x18
					
					/************************************************************************/
					/* POZICIJA BLIZU ZIDA ODAKLE KRECE NA MAPU                            */
					/************************************************************************/
					if(position == 0)
    13c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13c2:	88 23       	and	r24, r24
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <__stack+0x2c9>
    13c6:	fe c0       	rjmp	.+508    	; 0x15c4 <__stack+0x4c5>
					}//end position if
					
					/************************************************************************/
					/* NALAZI SE ISPRED MAPE PARALELNO SA ZIDOM                             */
					/************************************************************************/
					if(position == 1)
    13c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13ca:	81 30       	cpi	r24, 0x01	; 1
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <__stack+0x2d1>
    13ce:	62 c0       	rjmp	.+196    	; 0x1494 <__stack+0x395>
					{
						moveOnDirection(100,-1,NORMALSPEED,TASTER_SUDAR_ON,NO_BREAK_TIME);
    13d0:	84 e6       	ldi	r24, 0x64	; 100
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	6f ef       	ldi	r22, 0xFF	; 255
    13d6:	7f ef       	ldi	r23, 0xFF	; 255
    13d8:	44 ec       	ldi	r20, 0xC4	; 196
    13da:	59 e0       	ldi	r21, 0x09	; 9
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	00 e0       	ldi	r16, 0x00	; 0
    13e0:	10 e0       	ldi	r17, 0x00	; 0
    13e2:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						pauza_ms(50);
    13e6:	62 e3       	ldi	r22, 0x32	; 50
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						moveOnDirection(100,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
    13f2:	84 e6       	ldi	r24, 0x64	; 100
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	61 e0       	ldi	r22, 0x01	; 1
    13f8:	70 e0       	ldi	r23, 0x00	; 0
    13fa:	44 ec       	ldi	r20, 0xC4	; 196
    13fc:	59 e0       	ldi	r21, 0x09	; 9
    13fe:	23 e0       	ldi	r18, 0x03	; 3
    1400:	00 e0       	ldi	r16, 0x00	; 0
    1402:	10 e0       	ldi	r17, 0x00	; 0
    1404:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						setUgao(270);
    1408:	8e e0       	ldi	r24, 0x0E	; 14
    140a:	91 e0       	ldi	r25, 0x01	; 1
    140c:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
						
						saljiKinezima(MOTOR_SKUPLJAC_MAPE,SKUPLJAC_MAPE_BRZINA);
    1410:	83 e4       	ldi	r24, 0x43	; 67
    1412:	66 e9       	ldi	r22, 0x96	; 150
    1414:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						moveOnDirection(1000,-1,LOWSPEED,ALL_DETECTIONS_OFF,TWO_SECOND_BREAK_TIME);
    1418:	88 ee       	ldi	r24, 0xE8	; 232
    141a:	93 e0       	ldi	r25, 0x03	; 3
    141c:	6f ef       	ldi	r22, 0xFF	; 255
    141e:	7f ef       	ldi	r23, 0xFF	; 255
    1420:	48 ee       	ldi	r20, 0xE8	; 232
    1422:	53 e0       	ldi	r21, 0x03	; 3
    1424:	23 e0       	ldi	r18, 0x03	; 3
    1426:	00 ed       	ldi	r16, 0xD0	; 208
    1428:	17 e0       	ldi	r17, 0x07	; 7
    142a:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						pokupiMapu();
    142e:	0e 94 01 04 	call	0x802	; 0x802 <pokupiMapu>
						
						moveOnDirection(320,1,NORMALSPEED,TASTER_SUDAR_ON,NO_BREAK_TIME);
    1432:	80 e4       	ldi	r24, 0x40	; 64
    1434:	91 e0       	ldi	r25, 0x01	; 1
    1436:	61 e0       	ldi	r22, 0x01	; 1
    1438:	70 e0       	ldi	r23, 0x00	; 0
    143a:	44 ec       	ldi	r20, 0xC4	; 196
    143c:	59 e0       	ldi	r21, 0x09	; 9
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	00 e0       	ldi	r16, 0x00	; 0
    1442:	10 e0       	ldi	r17, 0x00	; 0
    1444:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						saljiKinezima(MOTOR_SKUPLJAC_MAPE,150);	//ponovo aktivira aktuator da se ne bi mapa vukla po podu
    1448:	83 e4       	ldi	r24, 0x43	; 67
    144a:	66 e9       	ldi	r22, 0x96	; 150
    144c:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						pauza_ms(1000);
    1450:	68 ee       	ldi	r22, 0xE8	; 232
    1452:	73 e0       	ldi	r23, 0x03	; 3
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						saljiKinezima(MOTOR_SKUPLJAC_MAPE,0);
    145c:	83 e4       	ldi	r24, 0x43	; 67
    145e:	60 e0       	ldi	r22, 0x00	; 0
    1460:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						
						if(totemCollisionFlag == TRUE)	//ako je drugi deo naseg totema nepokupljen
    1464:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1466:	88 23       	and	r24, r24
    1468:	39 f4       	brne	.+14     	; 0x1478 <__stack+0x379>
						{
							state = RIDE_THE_LIGHTING;	//IDEM NA POZICIJU ODAKLE SE VRACAM NA DRUGI DEO TOTEMA, NEMA VEZE STO JE DIREKTNO ISPOD OVAKO ZNAM STA RADIM :-)
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	8f 8f       	std	Y+31, r24	; 0x1f
							newPosition = 3;
    146e:	83 e0       	ldi	r24, 0x03	; 3
    1470:	8c 8f       	std	Y+28, r24	; 0x1c
							detectionFlags = ALL_DETECTIONS_ON;
    1472:	82 e0       	ldi	r24, 0x02	; 2
    1474:	8f 8b       	std	Y+23, r24	; 0x17
    1476:	df ca       	rjmp	.-2626   	; 0xa36 <blueSide+0x82>
								
							break;
						}//end totem if	
						
						if(tacticCombination != 0)	
    1478:	8a 8d       	ldd	r24, Y+26	; 0x1a
    147a:	88 23       	and	r24, r24
    147c:	39 f0       	breq	.+14     	; 0x148c <__stack+0x38d>
						{
							state = FAST_AND_FURIOUS;
    147e:	1f 8e       	std	Y+31, r1	; 0x1f
							newPosition = 7;	//prelazim na kradju
    1480:	87 e0       	ldi	r24, 0x07	; 7
    1482:	8c 8f       	std	Y+28, r24	; 0x1c
							tacticCombination = 0;  //PROVERITI
    1484:	1a 8e       	std	Y+26, r1	; 0x1a
							detectionFlags = ALL_DETECTIONS_ON;
    1486:	82 e0       	ldi	r24, 0x02	; 2
    1488:	8f 8b       	std	Y+23, r24	; 0x17
    148a:	d5 ca       	rjmp	.-2646   	; 0xa36 <blueSide+0x82>
							break;	
						}//end tactisCombination if
						
						state = FAST_AND_FURIOUS;
    148c:	1f 8e       	std	Y+31, r1	; 0x1f
						newPosition = 4;	//pozicija za kupljenje protivnickog totema
    148e:	84 e0       	ldi	r24, 0x04	; 4
    1490:	8c 8f       	std	Y+28, r24	; 0x1c
    1492:	d1 ca       	rjmp	.-2654   	; 0xa36 <blueSide+0x82>
					}//end position if
					
					/************************************************************************/
					/*	NALAZI SE KOD DRVETA                                                */
					/************************************************************************/
					if(position == 2)
    1494:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1496:	82 30       	cpi	r24, 0x02	; 2
    1498:	09 f0       	breq	.+2      	; 0x149c <__stack+0x39d>
    149a:	82 c0       	rjmp	.+260    	; 0x15a0 <__stack+0x4a1>
					{
						setUgao(270);	//okrecem se ka mapi
    149c:	8e e0       	ldi	r24, 0x0E	; 14
    149e:	91 e0       	ldi	r25, 0x01	; 1
    14a0:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
						
						if(gotoXY(readX()+350,readY(),-1,NORMALSPEED,NORMALPRECISION,TASTER_SUDAR_ON))	//pokusava da dodje blizu mape	
    14a4:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <readX>
    14a8:	8c 01       	movw	r16, r24
    14aa:	02 5a       	subi	r16, 0xA2	; 162
    14ac:	1e 4f       	sbci	r17, 0xFE	; 254
    14ae:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <readY>
    14b2:	9c 01       	movw	r18, r24
    14b4:	c8 01       	movw	r24, r16
    14b6:	b9 01       	movw	r22, r18
    14b8:	4f ef       	ldi	r20, 0xFF	; 255
    14ba:	24 ec       	ldi	r18, 0xC4	; 196
    14bc:	39 e0       	ldi	r19, 0x09	; 9
    14be:	05 e0       	ldi	r16, 0x05	; 5
    14c0:	10 e0       	ldi	r17, 0x00	; 0
    14c2:	ee 24       	eor	r14, r14
    14c4:	0e 94 bd 2c 	call	0x597a	; 0x597a <gotoXY>
    14c8:	88 23       	and	r24, r24
    14ca:	19 f1       	breq	.+70     	; 0x1512 <__stack+0x413>
						{
							pauza_ms(50);
    14cc:	62 e3       	ldi	r22, 0x32	; 50
    14ce:	70 e0       	ldi	r23, 0x00	; 0
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
							moveOnDirection(70,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);	
    14d8:	86 e4       	ldi	r24, 0x46	; 70
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	61 e0       	ldi	r22, 0x01	; 1
    14de:	70 e0       	ldi	r23, 0x00	; 0
    14e0:	44 ec       	ldi	r20, 0xC4	; 196
    14e2:	59 e0       	ldi	r21, 0x09	; 9
    14e4:	23 e0       	ldi	r18, 0x03	; 3
    14e6:	00 e0       	ldi	r16, 0x00	; 0
    14e8:	10 e0       	ldi	r17, 0x00	; 0
    14ea:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
							pauza_ms(300);
    14ee:	6c e2       	ldi	r22, 0x2C	; 44
    14f0:	71 e0       	ldi	r23, 0x01	; 1
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
							
							if(totemCollisionFlag == TRUE)	//ako je drugi deo naseg totema nepokupljen
    14fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14fc:	88 23       	and	r24, r24
    14fe:	49 f4       	brne	.+18     	; 0x1512 <__stack+0x413>
							{
								state = RIDE_THE_LIGHTING;	//IDEM NA POZICIJU ODAKLE SE VRACAM NA DRUGI DEO TOTEMA, NEMA VEZE STO JE DIRETNO ISPOD OVAKO ZNAM STA RADIM :-)
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	8f 8f       	std	Y+31, r24	; 0x1f
								newPosition = 3;
    1504:	83 e0       	ldi	r24, 0x03	; 3
    1506:	8c 8f       	std	Y+28, r24	; 0x1c
								detectionFlags = ALL_DETECTIONS_ON;
    1508:	82 e0       	ldi	r24, 0x02	; 2
    150a:	8f 8b       	std	Y+23, r24	; 0x17
								totemCollisionFlag = FALSE;
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	8e 8f       	std	Y+30, r24	; 0x1e
    1510:	92 ca       	rjmp	.-2780   	; 0xa36 <blueSide+0x82>
								
								break;
							}//end totem if		
						}//end gotoxy If
						
						pauza_ms(50);
    1512:	62 e3       	ldi	r22, 0x32	; 50
    1514:	70 e0       	ldi	r23, 0x00	; 0
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						saljiKinezima(MOTOR_SKUPLJAC_MAPE,SKUPLJAC_MAPE_BRZINA);
    151e:	83 e4       	ldi	r24, 0x43	; 67
    1520:	66 e9       	ldi	r22, 0x96	; 150
    1522:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						moveOnDirection(1000,-1,LOWSPEED,ALL_DETECTIONS_OFF,TWO_SECOND_BREAK_TIME);
    1526:	88 ee       	ldi	r24, 0xE8	; 232
    1528:	93 e0       	ldi	r25, 0x03	; 3
    152a:	6f ef       	ldi	r22, 0xFF	; 255
    152c:	7f ef       	ldi	r23, 0xFF	; 255
    152e:	48 ee       	ldi	r20, 0xE8	; 232
    1530:	53 e0       	ldi	r21, 0x03	; 3
    1532:	23 e0       	ldi	r18, 0x03	; 3
    1534:	00 ed       	ldi	r16, 0xD0	; 208
    1536:	17 e0       	ldi	r17, 0x07	; 7
    1538:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						pokupiMapu();
    153c:	0e 94 01 04 	call	0x802	; 0x802 <pokupiMapu>
						
						moveOnDirection(320,1,NORMALSPEED,TASTER_SUDAR_ON,NO_BREAK_TIME);
    1540:	80 e4       	ldi	r24, 0x40	; 64
    1542:	91 e0       	ldi	r25, 0x01	; 1
    1544:	61 e0       	ldi	r22, 0x01	; 1
    1546:	70 e0       	ldi	r23, 0x00	; 0
    1548:	44 ec       	ldi	r20, 0xC4	; 196
    154a:	59 e0       	ldi	r21, 0x09	; 9
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	00 e0       	ldi	r16, 0x00	; 0
    1550:	10 e0       	ldi	r17, 0x00	; 0
    1552:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						saljiKinezima(MOTOR_SKUPLJAC_MAPE,150);	//ponovo aktivira aktuator da se ne bi mapa vukla po podu
    1556:	83 e4       	ldi	r24, 0x43	; 67
    1558:	66 e9       	ldi	r22, 0x96	; 150
    155a:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						pauza_ms(1000);
    155e:	68 ee       	ldi	r22, 0xE8	; 232
    1560:	73 e0       	ldi	r23, 0x03	; 3
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						saljiKinezima(MOTOR_SKUPLJAC_MAPE,0);
    156a:	83 e4       	ldi	r24, 0x43	; 67
    156c:	60 e0       	ldi	r22, 0x00	; 0
    156e:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						
						if(totemCollisionFlag == TRUE)	//ako je drugi deo naseg totema nepokupljen
    1572:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1574:	88 23       	and	r24, r24
    1576:	39 f4       	brne	.+14     	; 0x1586 <__stack+0x487>
						{
							state = RIDE_THE_LIGHTING;	//IDEM NA POZICIJU ODAKLE SE VRACAM NA DRUGI DEO TOTEMA, NEMA VEZE STO JE DIRETNO ISPOD OVAKO ZNAM STA RADIM :-)
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	8f 8f       	std	Y+31, r24	; 0x1f
							newPosition = 3;
    157c:	83 e0       	ldi	r24, 0x03	; 3
    157e:	8c 8f       	std	Y+28, r24	; 0x1c
							detectionFlags = ALL_DETECTIONS_ON;
    1580:	82 e0       	ldi	r24, 0x02	; 2
    1582:	8f 8b       	std	Y+23, r24	; 0x17
    1584:	58 ca       	rjmp	.-2896   	; 0xa36 <blueSide+0x82>
								
							break;
						}//end totem if	
						
						if(tacticCombination != 0)	//prelazim na kradju
    1586:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1588:	88 23       	and	r24, r24
    158a:	31 f0       	breq	.+12     	; 0x1598 <__stack+0x499>
						{
							state = FAST_AND_FURIOUS;
    158c:	1f 8e       	std	Y+31, r1	; 0x1f
							newPosition = 7;
    158e:	87 e0       	ldi	r24, 0x07	; 7
    1590:	8c 8f       	std	Y+28, r24	; 0x1c
							detectionFlags = ALL_DETECTIONS_ON;
    1592:	82 e0       	ldi	r24, 0x02	; 2
    1594:	8f 8b       	std	Y+23, r24	; 0x17
    1596:	4f ca       	rjmp	.-2914   	; 0xa36 <blueSide+0x82>
							break;	
						}//end tactisCombination if
						
						state = FAST_AND_FURIOUS;	//PROTIVNICKI TOTEM
    1598:	1f 8e       	std	Y+31, r1	; 0x1f
						newPosition = 4;
    159a:	84 e0       	ldi	r24, 0x04	; 4
    159c:	8c 8f       	std	Y+28, r24	; 0x1c
    159e:	4b ca       	rjmp	.-2922   	; 0xa36 <blueSide+0x82>
					}//end position if
					
					/************************************************************************/
					/* NASTAVLJA SA KUPLJENJEM DRUGOG DELA NASEG TOTEMA                     */
					/************************************************************************/
					if(position == 3)
    15a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15a2:	83 30       	cpi	r24, 0x03	; 3
    15a4:	79 f4       	brne	.+30     	; 0x15c4 <__stack+0x4c5>
					{
						setUgao(90);
    15a6:	8a e5       	ldi	r24, 0x5A	; 90
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
						collisionCounter = 0;
    15ae:	1b 8e       	std	Y+27, r1	; 0x1b
						
						state = FAST_AND_FURIOUS;
    15b0:	1f 8e       	std	Y+31, r1	; 0x1f
						newPosition = 1;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	8c 8f       	std	Y+28, r24	; 0x1c
						
						speed = NORMALSPEED;
    15b6:	84 ec       	ldi	r24, 0xC4	; 196
    15b8:	99 e0       	ldi	r25, 0x09	; 9
    15ba:	99 8f       	std	Y+25, r25	; 0x19
    15bc:	88 8f       	std	Y+24, r24	; 0x18
						detectionFlags = ALL_DETECTIONS_ON;
    15be:	82 e0       	ldi	r24, 0x02	; 2
    15c0:	8f 8b       	std	Y+23, r24	; 0x17
    15c2:	39 ca       	rjmp	.-2958   	; 0xa36 <blueSide+0x82>
			
			/************************************************************************/
			/*		ALTERNATIVNE I POMOCNE KRETNJE                                  */
			/************************************************************************/	
			case RIDE_THE_LIGHTING:
				for(position = newPosition; position<brojPozicijaPlavoAlt;position++)
    15c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15c6:	8f 5f       	subi	r24, 0xFF	; 255
    15c8:	8d 8f       	std	Y+29, r24	; 0x1d
    15ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15cc:	84 30       	cpi	r24, 0x04	; 4
    15ce:	08 f4       	brcc	.+2      	; 0x15d2 <__stack+0x4d3>
    15d0:	a2 ce       	rjmp	.-700    	; 0x1316 <__stack+0x217>
    15d2:	31 ca       	rjmp	.-2974   	; 0xa36 <blueSide+0x82>
			case COLLISION:
			
				/************************************************************************/
				/*		DETEKCIJA ODMAH PRI IZLASKU IZ STARTA                           */
				/************************************************************************/
				if(newPosition == 0)
    15d4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    15d6:	88 23       	and	r24, r24
    15d8:	99 f5       	brne	.+102    	; 0x1640 <__stack+0x541>
				{
					if(tasRobotNapredProvera())	//ovde ce uci ako je neko bas brzo doleteo do nas, a posto nam smeta dobice svoje
    15da:	0e 94 60 37 	call	0x6ec0	; 0x6ec0 <tasRobotNapredProvera>
    15de:	88 23       	and	r24, r24
    15e0:	f9 f0       	breq	.+62     	; 0x1620 <__stack+0x521>
					{
						pauza_ms(10);
    15e2:	6a e0       	ldi	r22, 0x0A	; 10
    15e4:	70 e0       	ldi	r23, 0x00	; 0
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						moveOnDirection(150,-1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
    15ee:	86 e9       	ldi	r24, 0x96	; 150
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	6f ef       	ldi	r22, 0xFF	; 255
    15f4:	7f ef       	ldi	r23, 0xFF	; 255
    15f6:	44 ec       	ldi	r20, 0xC4	; 196
    15f8:	59 e0       	ldi	r21, 0x09	; 9
    15fa:	23 e0       	ldi	r18, 0x03	; 3
    15fc:	00 e0       	ldi	r16, 0x00	; 0
    15fe:	10 e0       	ldi	r17, 0x00	; 0
    1600:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						pauza_ms(500);
    1604:	64 ef       	ldi	r22, 0xF4	; 244
    1606:	71 e0       	ldi	r23, 0x01	; 1
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						
						speed = UPSPEED;	//za guranje, steta sto nemamo 30kg kao neki seljaci
    1610:	88 eb       	ldi	r24, 0xB8	; 184
    1612:	9b e0       	ldi	r25, 0x0B	; 11
    1614:	99 8f       	std	Y+25, r25	; 0x19
    1616:	88 8f       	std	Y+24, r24	; 0x18
						detectionFlags = ALL_DETECTIONS_OFF;
    1618:	83 e0       	ldi	r24, 0x03	; 3
    161a:	8f 8b       	std	Y+23, r24	; 0x17
						state = FAST_AND_FURIOUS;	
    161c:	1f 8e       	std	Y+31, r1	; 0x1f
    161e:	0b ca       	rjmp	.-3050   	; 0xa36 <blueSide+0x82>
						
						break;
					}//end taster if
					
					zatvoriSkupljac();	
    1620:	0e 94 c1 03 	call	0x782	; 0x782 <zatvoriSkupljac>
					pauza_ms(300);
    1624:	6c e2       	ldi	r22, 0x2C	; 44
    1626:	71 e0       	ldi	r23, 0x01	; 1
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
					
					speed = NORMALSPEED + 100;
    1630:	88 e2       	ldi	r24, 0x28	; 40
    1632:	9a e0       	ldi	r25, 0x0A	; 10
    1634:	99 8f       	std	Y+25, r25	; 0x19
    1636:	88 8f       	std	Y+24, r24	; 0x18
					detectionFlags = TASTER_SUDAR_ON;
    1638:	1f 8a       	std	Y+23, r1	; 0x17
					
					state = FAST_AND_FURIOUS;	//kupljenje prvog dela totema
    163a:	1f 8e       	std	Y+31, r1	; 0x1f
					newPosition = 0;
    163c:	1c 8e       	std	Y+28, r1	; 0x1c
    163e:	fb c9       	rjmp	.-3082   	; 0xa36 <blueSide+0x82>
				}//end position if
				
				/******************************************************************************/
				/*    SUDAR PRI DOLASKU NA DRUGI KRAJ STOLA PRE KUPLJENJA DRUGOG DELA TOTEMA  */
				/******************************************************************************/
				if(newPosition == 1)
    1640:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1642:	81 30       	cpi	r24, 0x01	; 1
    1644:	09 f0       	breq	.+2      	; 0x1648 <__stack+0x549>
    1646:	81 c0       	rjmp	.+258    	; 0x174a <__stack+0x64b>
				{
					if(++collisionCounter < 3)	//pokusavam 3 puta da prodjem
    1648:	8b 8d       	ldd	r24, Y+27	; 0x1b
    164a:	8f 5f       	subi	r24, 0xFF	; 255
    164c:	8b 8f       	std	Y+27, r24	; 0x1b
    164e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1650:	83 30       	cpi	r24, 0x03	; 3
    1652:	68 f5       	brcc	.+90     	; 0x16ae <__stack+0x5af>
					{
						moveOnDirection(50,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
    1654:	82 e3       	ldi	r24, 0x32	; 50
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	61 e0       	ldi	r22, 0x01	; 1
    165a:	70 e0       	ldi	r23, 0x00	; 0
    165c:	44 ec       	ldi	r20, 0xC4	; 196
    165e:	59 e0       	ldi	r21, 0x09	; 9
    1660:	23 e0       	ldi	r18, 0x03	; 3
    1662:	00 e0       	ldi	r16, 0x00	; 0
    1664:	10 e0       	ldi	r17, 0x00	; 0
    1666:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						pauza_ms(500);
    166a:	64 ef       	ldi	r22, 0xF4	; 244
    166c:	71 e0       	ldi	r23, 0x01	; 1
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						
						detectionFlags = TASTER_SUDAR_ON;
    1676:	1f 8a       	std	Y+23, r1	; 0x17
						state = FAST_AND_FURIOUS;	//kupljenje drugog dela totema
    1678:	1f 8e       	std	Y+31, r1	; 0x1f
						newPosition = 1;
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	8c 8f       	std	Y+28, r24	; 0x1c
    167e:	db c9       	rjmp	.-3146   	; 0xa36 <blueSide+0x82>
					
					//zatvoriSkupljac();	NEPOTREBNO?	
				
					while(gotoXY(2320,readY(),1,NORMALSPEED,NORMALPRECISION,ALL_DETECTIONS_ON))		//idem na poziciju odakle mogu da krenem na mapu
					{
						pauza_ms(5);
    1680:	65 e0       	ldi	r22, 0x05	; 5
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						moveOnDirection(10,-1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
    168c:	8a e0       	ldi	r24, 0x0A	; 10
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	6f ef       	ldi	r22, 0xFF	; 255
    1692:	7f ef       	ldi	r23, 0xFF	; 255
    1694:	44 ec       	ldi	r20, 0xC4	; 196
    1696:	59 e0       	ldi	r21, 0x09	; 9
    1698:	23 e0       	ldi	r18, 0x03	; 3
    169a:	00 e0       	ldi	r16, 0x00	; 0
    169c:	10 e0       	ldi	r17, 0x00	; 0
    169e:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						pauza_ms(700);
    16a2:	6c eb       	ldi	r22, 0xBC	; 188
    16a4:	72 e0       	ldi	r23, 0x02	; 2
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						break;
					}//end collisionCounter if
					
					//zatvoriSkupljac();	NEPOTREBNO?	
				
					while(gotoXY(2320,readY(),1,NORMALSPEED,NORMALPRECISION,ALL_DETECTIONS_ON))		//idem na poziciju odakle mogu da krenem na mapu
    16ae:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <readY>
    16b2:	9c 01       	movw	r18, r24
    16b4:	80 e1       	ldi	r24, 0x10	; 16
    16b6:	99 e0       	ldi	r25, 0x09	; 9
    16b8:	b9 01       	movw	r22, r18
    16ba:	41 e0       	ldi	r20, 0x01	; 1
    16bc:	24 ec       	ldi	r18, 0xC4	; 196
    16be:	39 e0       	ldi	r19, 0x09	; 9
    16c0:	05 e0       	ldi	r16, 0x05	; 5
    16c2:	10 e0       	ldi	r17, 0x00	; 0
    16c4:	ee 24       	eor	r14, r14
    16c6:	68 94       	set
    16c8:	e1 f8       	bld	r14, 1
    16ca:	0e 94 bd 2c 	call	0x597a	; 0x597a <gotoXY>
    16ce:	88 23       	and	r24, r24
    16d0:	b9 f6       	brne	.-82     	; 0x1680 <__stack+0x581>
						pauza_ms(5);
						moveOnDirection(10,-1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
						pauza_ms(700);
					}//end while if
					
					if(totemCollisionFlag == TRUE)	//ako je vec pokupio mapu
    16d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16d4:	88 23       	and	r24, r24
    16d6:	41 f5       	brne	.+80     	; 0x1728 <__stack+0x629>
    16d8:	06 c0       	rjmp	.+12     	; 0x16e6 <__stack+0x5e7>
					{
						while(gotoXY(2615,readY(),1,NORMALSPEED,NORMALPRECISION,ALL_DETECTIONS_ON))	//ide na poziciju odakle nastavlja dalje
							pauza_ms(500);	
    16da:	64 ef       	ldi	r22, 0xF4	; 244
    16dc:	71 e0       	ldi	r23, 0x01	; 1
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						pauza_ms(700);
					}//end while if
					
					if(totemCollisionFlag == TRUE)	//ako je vec pokupio mapu
					{
						while(gotoXY(2615,readY(),1,NORMALSPEED,NORMALPRECISION,ALL_DETECTIONS_ON))	//ide na poziciju odakle nastavlja dalje
    16e6:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <readY>
    16ea:	9c 01       	movw	r18, r24
    16ec:	87 e3       	ldi	r24, 0x37	; 55
    16ee:	9a e0       	ldi	r25, 0x0A	; 10
    16f0:	b9 01       	movw	r22, r18
    16f2:	41 e0       	ldi	r20, 0x01	; 1
    16f4:	24 ec       	ldi	r18, 0xC4	; 196
    16f6:	39 e0       	ldi	r19, 0x09	; 9
    16f8:	05 e0       	ldi	r16, 0x05	; 5
    16fa:	10 e0       	ldi	r17, 0x00	; 0
    16fc:	ee 24       	eor	r14, r14
    16fe:	68 94       	set
    1700:	e1 f8       	bld	r14, 1
    1702:	0e 94 bd 2c 	call	0x597a	; 0x597a <gotoXY>
    1706:	88 23       	and	r24, r24
    1708:	41 f7       	brne	.-48     	; 0x16da <__stack+0x5db>
							pauza_ms(500);	
						
						if(tacticCombination == 0)
    170a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    170c:	88 23       	and	r24, r24
    170e:	31 f4       	brne	.+12     	; 0x171c <__stack+0x61d>
						{
							state = FAST_AND_FURIOUS; //totem
    1710:	1f 8e       	std	Y+31, r1	; 0x1f
							newPosition = 4;
    1712:	84 e0       	ldi	r24, 0x04	; 4
    1714:	8c 8f       	std	Y+28, r24	; 0x1c
							otvoriSkupljac();	
    1716:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <otvoriSkupljac>
    171a:	8d c9       	rjmp	.-3302   	; 0xa36 <blueSide+0x82>
						}else
						{
							state = FAST_AND_FURIOUS;//kradja
    171c:	1f 8e       	std	Y+31, r1	; 0x1f
							newPosition = 7;
    171e:	87 e0       	ldi	r24, 0x07	; 7
    1720:	8c 8f       	std	Y+28, r24	; 0x1c
							detectionFlags = ALL_DETECTIONS_ON;	
    1722:	82 e0       	ldi	r24, 0x02	; 2
    1724:	8f 8b       	std	Y+23, r24	; 0x17
    1726:	87 c9       	rjmp	.-3314   	; 0xa36 <blueSide+0x82>
						}
							
						break;	
					}
					
					detectionFlags = ALL_DETECTIONS_ON;
    1728:	82 e0       	ldi	r24, 0x02	; 2
    172a:	8f 8b       	std	Y+23, r24	; 0x17
					totemCollisionFlag = TRUE;	//ako je mapa nepokupljena idem na nju
    172c:	1e 8e       	std	Y+30, r1	; 0x1e
					state = FAST_AND_FURIOUS;								
    172e:	1f 8e       	std	Y+31, r1	; 0x1f
					newPosition = 3;
    1730:	83 e0       	ldi	r24, 0x03	; 3
    1732:	8c 8f       	std	Y+28, r24	; 0x1c
					
					if(tacticCombination == 3)
    1734:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1736:	83 30       	cpi	r24, 0x03	; 3
    1738:	11 f4       	brne	.+4      	; 0x173e <__stack+0x63f>
						tacticCombination = 1;
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	8a 8f       	std	Y+26, r24	; 0x1a
					if(tacticCombination == 2)
    173e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1740:	82 30       	cpi	r24, 0x02	; 2
    1742:	09 f0       	breq	.+2      	; 0x1746 <__stack+0x647>
    1744:	78 c9       	rjmp	.-3344   	; 0xa36 <blueSide+0x82>
						tacticCombination = 0;
    1746:	1a 8e       	std	Y+26, r1	; 0x1a
    1748:	76 c9       	rjmp	.-3348   	; 0xa36 <blueSide+0x82>
				}//end position if
				
				/************************************************************************/
				/*	SUDAR KADA IDE KOSIM PUTEM DO DRUGOG DELA TOTEMA                    */
				/************************************************************************/
				if(newPosition == 2)
    174a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    174c:	82 30       	cpi	r24, 0x02	; 2
    174e:	09 f0       	breq	.+2      	; 0x1752 <__stack+0x653>
    1750:	c2 c0       	rjmp	.+388    	; 0x18d6 <__stack+0x7d7>
				{
					if(collisionCounter == 0)	//ako prvi put detektujem
    1752:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1754:	88 23       	and	r24, r24
    1756:	91 f4       	brne	.+36     	; 0x177c <__stack+0x67d>
					{
						pauza_ms(900);
    1758:	64 e8       	ldi	r22, 0x84	; 132
    175a:	73 e0       	ldi	r23, 0x03	; 3
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						state = FAST_AND_FURIOUS;
    1764:	1f 8e       	std	Y+31, r1	; 0x1f
						newPosition = 2;	//pokusavam ponovo sa malom brzinom i bez sharpa
    1766:	82 e0       	ldi	r24, 0x02	; 2
    1768:	8c 8f       	std	Y+28, r24	; 0x1c
						speed = LOWSPEED;
    176a:	88 ee       	ldi	r24, 0xE8	; 232
    176c:	93 e0       	ldi	r25, 0x03	; 3
    176e:	99 8f       	std	Y+25, r25	; 0x19
    1770:	88 8f       	std	Y+24, r24	; 0x18
						detectionFlags = TASTER_SUDAR_ON;
    1772:	1f 8a       	std	Y+23, r1	; 0x17
						collisionCounter++;
    1774:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1776:	8f 5f       	subi	r24, 0xFF	; 255
    1778:	8b 8f       	std	Y+27, r24	; 0x1b
    177a:	5d c9       	rjmp	.-3398   	; 0xa36 <blueSide+0x82>
						
						break;
					}
					
					if(++collisionCounter>2)	//ako bas ne moze da dodje
    177c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    177e:	8f 5f       	subi	r24, 0xFF	; 255
    1780:	8b 8f       	std	Y+27, r24	; 0x1b
    1782:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1784:	83 30       	cpi	r24, 0x03	; 3
    1786:	08 f4       	brcc	.+2      	; 0x178a <__stack+0x68b>
    1788:	86 c0       	rjmp	.+268    	; 0x1896 <__stack+0x797>
					{
						pauza_ms(500);	
    178a:	64 ef       	ldi	r22, 0xF4	; 244
    178c:	71 e0       	ldi	r23, 0x01	; 1
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						
						gotoXY(1620,1680,1,NORMALSPEED,NORMALPRECISION,ALL_DETECTIONS_OFF);	//vracam se tako da bih mogao da kupim mapu
    1796:	84 e5       	ldi	r24, 0x54	; 84
    1798:	96 e0       	ldi	r25, 0x06	; 6
    179a:	60 e9       	ldi	r22, 0x90	; 144
    179c:	76 e0       	ldi	r23, 0x06	; 6
    179e:	41 e0       	ldi	r20, 0x01	; 1
    17a0:	24 ec       	ldi	r18, 0xC4	; 196
    17a2:	39 e0       	ldi	r19, 0x09	; 9
    17a4:	05 e0       	ldi	r16, 0x05	; 5
    17a6:	10 e0       	ldi	r17, 0x00	; 0
    17a8:	0f 2e       	mov	r0, r31
    17aa:	f3 e0       	ldi	r31, 0x03	; 3
    17ac:	ef 2e       	mov	r14, r31
    17ae:	f0 2d       	mov	r31, r0
    17b0:	0e 94 bd 2c 	call	0x597a	; 0x597a <gotoXY>
						detectionFlags = ALL_DETECTIONS_ON;
    17b4:	82 e0       	ldi	r24, 0x02	; 2
    17b6:	8f 8b       	std	Y+23, r24	; 0x17
						collisionCounter = 0;
    17b8:	1b 8e       	std	Y+27, r1	; 0x1b
						pauza_ms(300);
    17ba:	6c e2       	ldi	r22, 0x2C	; 44
    17bc:	71 e0       	ldi	r23, 0x01	; 1
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
    17c6:	28 c0       	rjmp	.+80     	; 0x1818 <__stack+0x719>
						while(gotoXY(2320,1680,-1,NORMALSPEED,NORMALPRECISION,ALL_DETECTIONS_ON))		//idem na prvi deo stola, tu odlucujem sta dalje   /-1
						{
							if(++collisionCounter>=5)	//ako ni tu ne moze doci vraca se da pokusa ponovo sa totemom
    17c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17ca:	8f 5f       	subi	r24, 0xFF	; 255
    17cc:	8b 8f       	std	Y+27, r24	; 0x1b
    17ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17d0:	85 30       	cpi	r24, 0x05	; 5
    17d2:	58 f0       	brcs	.+22     	; 0x17ea <__stack+0x6eb>
							{
								state = FAST_AND_FURIOUS;
    17d4:	1f 8e       	std	Y+31, r1	; 0x1f
								speed = NORMALSPEED;
    17d6:	84 ec       	ldi	r24, 0xC4	; 196
    17d8:	99 e0       	ldi	r25, 0x09	; 9
    17da:	99 8f       	std	Y+25, r25	; 0x19
    17dc:	88 8f       	std	Y+24, r24	; 0x18
								detectionFlags = ALL_DETECTIONS_ON;
    17de:	82 e0       	ldi	r24, 0x02	; 2
    17e0:	8f 8b       	std	Y+23, r24	; 0x17
								collisionCounter = 0;
    17e2:	1b 8e       	std	Y+27, r1	; 0x1b
								newPosition = 1;
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	8c 8f       	std	Y+28, r24	; 0x1c
    17e8:	27 c0       	rjmp	.+78     	; 0x1838 <__stack+0x739>
								
								break;	
							}//end if
							
							pauza_ms(10);
    17ea:	6a e0       	ldi	r22, 0x0A	; 10
    17ec:	70 e0       	ldi	r23, 0x00	; 0
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
							moveOnDirection(20,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
    17f6:	84 e1       	ldi	r24, 0x14	; 20
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	61 e0       	ldi	r22, 0x01	; 1
    17fc:	70 e0       	ldi	r23, 0x00	; 0
    17fe:	44 ec       	ldi	r20, 0xC4	; 196
    1800:	59 e0       	ldi	r21, 0x09	; 9
    1802:	23 e0       	ldi	r18, 0x03	; 3
    1804:	00 e0       	ldi	r16, 0x00	; 0
    1806:	10 e0       	ldi	r17, 0x00	; 0
    1808:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
							pauza_ms(500);
    180c:	64 ef       	ldi	r22, 0xF4	; 244
    180e:	71 e0       	ldi	r23, 0x01	; 1
    1810:	80 e0       	ldi	r24, 0x00	; 0
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						
						gotoXY(1620,1680,1,NORMALSPEED,NORMALPRECISION,ALL_DETECTIONS_OFF);	//vracam se tako da bih mogao da kupim mapu
						detectionFlags = ALL_DETECTIONS_ON;
						collisionCounter = 0;
						pauza_ms(300);
						while(gotoXY(2320,1680,-1,NORMALSPEED,NORMALPRECISION,ALL_DETECTIONS_ON))		//idem na prvi deo stola, tu odlucujem sta dalje   /-1
    1818:	80 e1       	ldi	r24, 0x10	; 16
    181a:	99 e0       	ldi	r25, 0x09	; 9
    181c:	60 e9       	ldi	r22, 0x90	; 144
    181e:	76 e0       	ldi	r23, 0x06	; 6
    1820:	4f ef       	ldi	r20, 0xFF	; 255
    1822:	24 ec       	ldi	r18, 0xC4	; 196
    1824:	39 e0       	ldi	r19, 0x09	; 9
    1826:	05 e0       	ldi	r16, 0x05	; 5
    1828:	10 e0       	ldi	r17, 0x00	; 0
    182a:	ee 24       	eor	r14, r14
    182c:	68 94       	set
    182e:	e1 f8       	bld	r14, 1
    1830:	0e 94 bd 2c 	call	0x597a	; 0x597a <gotoXY>
    1834:	88 23       	and	r24, r24
    1836:	41 f6       	brne	.-112    	; 0x17c8 <__stack+0x6c9>
							pauza_ms(10);
							moveOnDirection(20,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
							pauza_ms(500);
						}//end while()
						
						collisionCounter = 0;
    1838:	1b 8e       	std	Y+27, r1	; 0x1b
						
						
						if(totemCollisionFlag == FALSE)	
    183a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    183c:	81 30       	cpi	r24, 0x01	; 1
    183e:	79 f4       	brne	.+30     	; 0x185e <__stack+0x75f>
						{
							totemCollisionFlag = TRUE;	//ukljucujem indikaciju da nije pokupio drugi deo totema
    1840:	1e 8e       	std	Y+30, r1	; 0x1e
							state = FAST_AND_FURIOUS;	//i idem na mapu
    1842:	1f 8e       	std	Y+31, r1	; 0x1f
							newPosition = 3;
    1844:	83 e0       	ldi	r24, 0x03	; 3
    1846:	8c 8f       	std	Y+28, r24	; 0x1c
							
							if(tacticCombination == 3)
    1848:	8a 8d       	ldd	r24, Y+26	; 0x1a
    184a:	83 30       	cpi	r24, 0x03	; 3
    184c:	11 f4       	brne	.+4      	; 0x1852 <__stack+0x753>
								tacticCombination = 1;
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	8a 8f       	std	Y+26, r24	; 0x1a
							if(tacticCombination == 2)
    1852:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1854:	82 30       	cpi	r24, 0x02	; 2
    1856:	09 f0       	breq	.+2      	; 0x185a <__stack+0x75b>
    1858:	ee c8       	rjmp	.-3620   	; 0xa36 <blueSide+0x82>
								tacticCombination = 0;
    185a:	1a 8e       	std	Y+26, r1	; 0x1a
    185c:	ec c8       	rjmp	.-3624   	; 0xa36 <blueSide+0x82>
							
							break;
						}
						
						if(tacticCombination == 0)
    185e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1860:	88 23       	and	r24, r24
    1862:	31 f4       	brne	.+12     	; 0x1870 <__stack+0x771>
						{
							otvoriSkupljac();
    1864:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <otvoriSkupljac>
							state = FAST_AND_FURIOUS; //totem
    1868:	1f 8e       	std	Y+31, r1	; 0x1f
							newPosition = 4;
    186a:	84 e0       	ldi	r24, 0x04	; 4
    186c:	8c 8f       	std	Y+28, r24	; 0x1c
    186e:	e3 c8       	rjmp	.-3642   	; 0xa36 <blueSide+0x82>
							
						}else
						{
							gotoXY(2700,1835,-1,NORMALSPEED,NORMALPRECISION,ALL_DETECTIONS_ON);
    1870:	8c e8       	ldi	r24, 0x8C	; 140
    1872:	9a e0       	ldi	r25, 0x0A	; 10
    1874:	6b e2       	ldi	r22, 0x2B	; 43
    1876:	77 e0       	ldi	r23, 0x07	; 7
    1878:	4f ef       	ldi	r20, 0xFF	; 255
    187a:	24 ec       	ldi	r18, 0xC4	; 196
    187c:	39 e0       	ldi	r19, 0x09	; 9
    187e:	05 e0       	ldi	r16, 0x05	; 5
    1880:	10 e0       	ldi	r17, 0x00	; 0
    1882:	ee 24       	eor	r14, r14
    1884:	68 94       	set
    1886:	e1 f8       	bld	r14, 1
    1888:	0e 94 bd 2c 	call	0x597a	; 0x597a <gotoXY>
							state = FAST_AND_FURIOUS; //kradja
    188c:	1f 8e       	std	Y+31, r1	; 0x1f
							newPosition = 7;	
    188e:	87 e0       	ldi	r24, 0x07	; 7
    1890:	8c 8f       	std	Y+28, r24	; 0x1c
							detectionFlags =	TASTER_SUDAR_ON;
    1892:	1f 8a       	std	Y+23, r1	; 0x17
    1894:	d0 c8       	rjmp	.-3680   	; 0xa36 <blueSide+0x82>
							
						break;
						
					}//end collision if
					
					pauza_ms(10);
    1896:	6a e0       	ldi	r22, 0x0A	; 10
    1898:	70 e0       	ldi	r23, 0x00	; 0
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
					moveOnDirection(30,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
    18a2:	8e e1       	ldi	r24, 0x1E	; 30
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	61 e0       	ldi	r22, 0x01	; 1
    18a8:	70 e0       	ldi	r23, 0x00	; 0
    18aa:	44 ec       	ldi	r20, 0xC4	; 196
    18ac:	59 e0       	ldi	r21, 0x09	; 9
    18ae:	23 e0       	ldi	r18, 0x03	; 3
    18b0:	00 e0       	ldi	r16, 0x00	; 0
    18b2:	10 e0       	ldi	r17, 0x00	; 0
    18b4:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
					pauza_ms(500);	
    18b8:	64 ef       	ldi	r22, 0xF4	; 244
    18ba:	71 e0       	ldi	r23, 0x01	; 1
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
					
					newPosition = 2;	//pokusavam ponovo
    18c4:	82 e0       	ldi	r24, 0x02	; 2
    18c6:	8c 8f       	std	Y+28, r24	; 0x1c
					state = FAST_AND_FURIOUS;
    18c8:	1f 8e       	std	Y+31, r1	; 0x1f
					speed = NORMALSPEED;
    18ca:	84 ec       	ldi	r24, 0xC4	; 196
    18cc:	99 e0       	ldi	r25, 0x09	; 9
    18ce:	99 8f       	std	Y+25, r25	; 0x19
    18d0:	88 8f       	std	Y+24, r24	; 0x18
					detectionFlags = TASTER_SUDAR_ON;
    18d2:	1f 8a       	std	Y+23, r1	; 0x17
    18d4:	b0 c8       	rjmp	.-3744   	; 0xa36 <blueSide+0x82>
				}//end position if
				
				/************************************************************************/
				/*		SUDAR NA PUTU DO MAPE                                           */
				/************************************************************************/
				if(newPosition == 3)
    18d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18d8:	83 30       	cpi	r24, 0x03	; 3
    18da:	99 f4       	brne	.+38     	; 0x1902 <__stack+0x803>
				{
					pauza_ms(600);	
    18dc:	68 e5       	ldi	r22, 0x58	; 88
    18de:	72 e0       	ldi	r23, 0x02	; 2
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>

					zatvoriSkupljac();
    18e8:	0e 94 c1 03 	call	0x782	; 0x782 <zatvoriSkupljac>
					
					collisionCounter = 1;		//ide do zida
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	8b 8f       	std	Y+27, r24	; 0x1b
					detectionFlags = TASTER_SUDAR_ON;		//TESTIRATI
    18f0:	1f 8a       	std	Y+23, r1	; 0x17
					speed = NORMALSPEED;
    18f2:	84 ec       	ldi	r24, 0xC4	; 196
    18f4:	99 e0       	ldi	r25, 0x09	; 9
    18f6:	99 8f       	std	Y+25, r25	; 0x19
    18f8:	88 8f       	std	Y+24, r24	; 0x18
					
					state = RIDE_THE_LIGHTING;	//dolazi do zida, pokusace paralelno mapi da dodje do nje
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	8f 8f       	std	Y+31, r24	; 0x1f
					newPosition = 0;
    18fe:	1c 8e       	std	Y+28, r1	; 0x1c
    1900:	9a c8       	rjmp	.-3788   	; 0xa36 <blueSide+0x82>
				}//end position if
				
				/************************************************************************/
				/* SUDAR NA PUTU DO PROTIVNICKOG TOTEMA				                    */
				/************************************************************************/
				if(newPosition == 4)
    1902:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1904:	84 30       	cpi	r24, 0x04	; 4
    1906:	51 f5       	brne	.+84     	; 0x195c <__stack+0x85d>
				{
					if((tacticCombination == 2) && (readY()>2530))	//ako je presao mapu odlazi da kupi nju(mapa prethodno nije pokupljena)
    1908:	8a 8d       	ldd	r24, Y+26	; 0x1a
    190a:	82 30       	cpi	r24, 0x02	; 2
    190c:	e9 f4       	brne	.+58     	; 0x1948 <__stack+0x849>
    190e:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <readY>
    1912:	29 e0       	ldi	r18, 0x09	; 9
    1914:	83 3e       	cpi	r24, 0xE3	; 227
    1916:	92 07       	cpc	r25, r18
    1918:	bc f0       	brlt	.+46     	; 0x1948 <__stack+0x849>
					{						
						moveOnDirection(50,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
    191a:	82 e3       	ldi	r24, 0x32	; 50
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	61 e0       	ldi	r22, 0x01	; 1
    1920:	70 e0       	ldi	r23, 0x00	; 0
    1922:	44 ec       	ldi	r20, 0xC4	; 196
    1924:	59 e0       	ldi	r21, 0x09	; 9
    1926:	23 e0       	ldi	r18, 0x03	; 3
    1928:	00 e0       	ldi	r16, 0x00	; 0
    192a:	10 e0       	ldi	r17, 0x00	; 0
    192c:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						state = FAST_AND_FURIOUS;
    1930:	1f 8e       	std	Y+31, r1	; 0x1f
						newPosition = 3;
    1932:	83 e0       	ldi	r24, 0x03	; 3
    1934:	8c 8f       	std	Y+28, r24	; 0x1c
						
						detectionFlags = ALL_DETECTIONS_ON;
    1936:	82 e0       	ldi	r24, 0x02	; 2
    1938:	8f 8b       	std	Y+23, r24	; 0x17
						
						pauza_ms(500);
    193a:	64 ef       	ldi	r22, 0xF4	; 244
    193c:	71 e0       	ldi	r23, 0x01	; 1
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
    1946:	77 c8       	rjmp	.-3858   	; 0xa36 <blueSide+0x82>
						
						break;
					}
					
					pauza_ms(500);	//u suprotnom pokusava ponovo
    1948:	64 ef       	ldi	r22, 0xF4	; 244
    194a:	71 e0       	ldi	r23, 0x01	; 1
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
					detectionFlags = ALL_DETECTIONS_ON;
    1954:	82 e0       	ldi	r24, 0x02	; 2
    1956:	8f 8b       	std	Y+23, r24	; 0x17
					state = FAST_AND_FURIOUS;
    1958:	1f 8e       	std	Y+31, r1	; 0x1f
    195a:	6d c8       	rjmp	.-3878   	; 0xa36 <blueSide+0x82>
				}//end position if
				
				/************************************************************************/
				/* SUDAR NA PUTU DO PROTIVNICKOG BRODA				                    */
				/************************************************************************/
				if(newPosition == 7)
    195c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    195e:	87 30       	cpi	r24, 0x07	; 7
    1960:	71 f5       	brne	.+92     	; 0x19be <__stack+0x8bf>
				{
					if(((tacticCombination) == 3) && (readY()>2530))	//ako je presao mapu odlazi da kupi nju(mapa prethodno nije pokupljena)
    1962:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1964:	83 30       	cpi	r24, 0x03	; 3
    1966:	09 f5       	brne	.+66     	; 0x19aa <__stack+0x8ab>
    1968:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <readY>
    196c:	39 e0       	ldi	r19, 0x09	; 9
    196e:	83 3e       	cpi	r24, 0xE3	; 227
    1970:	93 07       	cpc	r25, r19
    1972:	dc f0       	brlt	.+54     	; 0x19aa <__stack+0x8ab>
					{
						moveOnDirection(50,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
    1974:	82 e3       	ldi	r24, 0x32	; 50
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	61 e0       	ldi	r22, 0x01	; 1
    197a:	70 e0       	ldi	r23, 0x00	; 0
    197c:	44 ec       	ldi	r20, 0xC4	; 196
    197e:	59 e0       	ldi	r21, 0x09	; 9
    1980:	23 e0       	ldi	r18, 0x03	; 3
    1982:	00 e0       	ldi	r16, 0x00	; 0
    1984:	10 e0       	ldi	r17, 0x00	; 0
    1986:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						state = FAST_AND_FURIOUS;
    198a:	1f 8e       	std	Y+31, r1	; 0x1f
						newPosition = 3;
    198c:	83 e0       	ldi	r24, 0x03	; 3
    198e:	8c 8f       	std	Y+28, r24	; 0x1c
						PORTG = 0xFF;
    1990:	e5 e6       	ldi	r30, 0x65	; 101
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	8f ef       	ldi	r24, 0xFF	; 255
    1996:	80 83       	st	Z, r24
						detectionFlags = ALL_DETECTIONS_ON;
    1998:	82 e0       	ldi	r24, 0x02	; 2
    199a:	8f 8b       	std	Y+23, r24	; 0x17
						pauza_ms(500);
    199c:	64 ef       	ldi	r22, 0xF4	; 244
    199e:	71 e0       	ldi	r23, 0x01	; 1
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
    19a8:	46 c8       	rjmp	.-3956   	; 0xa36 <blueSide+0x82>
						
						break;
					}
					
					pauza_ms(500);
    19aa:	64 ef       	ldi	r22, 0xF4	; 244
    19ac:	71 e0       	ldi	r23, 0x01	; 1
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
					
					detectionFlags = ALL_DETECTIONS_ON;
    19b6:	82 e0       	ldi	r24, 0x02	; 2
    19b8:	8f 8b       	std	Y+23, r24	; 0x17
					state = FAST_AND_FURIOUS;
    19ba:	1f 8e       	std	Y+31, r1	; 0x1f
    19bc:	3c c8       	rjmp	.-3976   	; 0xa36 <blueSide+0x82>
					
					break;
				}//end position if
				
				if(newPosition == 8)
    19be:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19c0:	88 30       	cpi	r24, 0x08	; 8
    19c2:	01 f5       	brne	.+64     	; 0x1a04 <__stack+0x905>
				{
					pauza_ms(500);
    19c4:	64 ef       	ldi	r22, 0xF4	; 244
    19c6:	71 e0       	ldi	r23, 0x01	; 1
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
					
					
					if(tacticCombination == 3)	//ako je presao mapu odlazi da kupi nju(mapa prethodno nije pokupljena)
    19d0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19d2:	83 30       	cpi	r24, 0x03	; 3
    19d4:	b9 f4       	brne	.+46     	; 0x1a04 <__stack+0x905>
					{
						gotoXY(2700,readY(),1,NORMALSPEED,NORMALPRECISION,ALL_DETECTIONS_OFF);
    19d6:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <readY>
    19da:	9c 01       	movw	r18, r24
    19dc:	8c e8       	ldi	r24, 0x8C	; 140
    19de:	9a e0       	ldi	r25, 0x0A	; 10
    19e0:	b9 01       	movw	r22, r18
    19e2:	41 e0       	ldi	r20, 0x01	; 1
    19e4:	24 ec       	ldi	r18, 0xC4	; 196
    19e6:	39 e0       	ldi	r19, 0x09	; 9
    19e8:	05 e0       	ldi	r16, 0x05	; 5
    19ea:	10 e0       	ldi	r17, 0x00	; 0
    19ec:	0f 2e       	mov	r0, r31
    19ee:	f3 e0       	ldi	r31, 0x03	; 3
    19f0:	ef 2e       	mov	r14, r31
    19f2:	f0 2d       	mov	r31, r0
    19f4:	0e 94 bd 2c 	call	0x597a	; 0x597a <gotoXY>
						state = FAST_AND_FURIOUS;
    19f8:	1f 8e       	std	Y+31, r1	; 0x1f
						newPosition = 3;
    19fa:	83 e0       	ldi	r24, 0x03	; 3
    19fc:	8c 8f       	std	Y+28, r24	; 0x1c
						
						detectionFlags = ALL_DETECTIONS_ON;
    19fe:	82 e0       	ldi	r24, 0x02	; 2
    1a00:	8f 8b       	std	Y+23, r24	; 0x17
    1a02:	19 c8       	rjmp	.-4046   	; 0xa36 <blueSide+0x82>
				}
				
				/************************************************************************/
				/*	SUDAR PRILIKOM DOLASKA DO MAPE PARALELNO ZIDU                      */
				/************************************************************************/
				if(newPosition == 101)
    1a04:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a06:	85 36       	cpi	r24, 0x65	; 101
    1a08:	99 f5       	brne	.+102    	; 0x1a70 <__stack+0x971>
				{
					pauza_ms(500);
    1a0a:	64 ef       	ldi	r22, 0xF4	; 244
    1a0c:	71 e0       	ldi	r23, 0x01	; 1
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
					if((++collisionCounter > 3) && (totemCollisionFlag == TRUE))	//ako pokusava 4. put da dodje a nije pokupio drugi deo totema
    1a16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a18:	8f 5f       	subi	r24, 0xFF	; 255
    1a1a:	8b 8f       	std	Y+27, r24	; 0x1b
    1a1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a1e:	84 30       	cpi	r24, 0x04	; 4
    1a20:	58 f0       	brcs	.+22     	; 0x1a38 <__stack+0x939>
    1a22:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a24:	88 23       	and	r24, r24
    1a26:	41 f4       	brne	.+16     	; 0x1a38 <__stack+0x939>
					{
						state = RIDE_THE_LIGHTING;
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	8f 8f       	std	Y+31, r24	; 0x1f
						newPosition = 3;
    1a2c:	83 e0       	ldi	r24, 0x03	; 3
    1a2e:	8c 8f       	std	Y+28, r24	; 0x1c
						totemCollisionFlag = FALSE;
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	8e 8f       	std	Y+30, r24	; 0x1e
    1a34:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <blueSide+0x82>
						break;	
					}//end collisionCounter if	
					
					pauza_ms(500);
    1a38:	64 ef       	ldi	r22, 0xF4	; 244
    1a3a:	71 e0       	ldi	r23, 0x01	; 1
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
					
					gotoXY(2740,1760,1,NORMALSPEED,NORMALPRECISION,ALL_DETECTIONS_OFF);	//IDE DO NEKE TACKE
    1a44:	84 eb       	ldi	r24, 0xB4	; 180
    1a46:	9a e0       	ldi	r25, 0x0A	; 10
    1a48:	60 ee       	ldi	r22, 0xE0	; 224
    1a4a:	76 e0       	ldi	r23, 0x06	; 6
    1a4c:	41 e0       	ldi	r20, 0x01	; 1
    1a4e:	24 ec       	ldi	r18, 0xC4	; 196
    1a50:	39 e0       	ldi	r19, 0x09	; 9
    1a52:	05 e0       	ldi	r16, 0x05	; 5
    1a54:	10 e0       	ldi	r17, 0x00	; 0
    1a56:	0f 2e       	mov	r0, r31
    1a58:	f3 e0       	ldi	r31, 0x03	; 3
    1a5a:	ef 2e       	mov	r14, r31
    1a5c:	f0 2d       	mov	r31, r0
    1a5e:	0e 94 bd 2c 	call	0x597a	; 0x597a <gotoXY>
					
					state = RIDE_THE_LIGHTING;	//vraca se do zida, i pokusava da ide do drveta
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	8f 8f       	std	Y+31, r24	; 0x1f
					newPosition = 2;
    1a66:	82 e0       	ldi	r24, 0x02	; 2
    1a68:	8c 8f       	std	Y+28, r24	; 0x1c
					detectionFlags = TASTER_SUDAR_ON;
    1a6a:	1f 8a       	std	Y+23, r1	; 0x17
    1a6c:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <blueSide+0x82>
				}//end position if
				
				/************************************************************************/
				/*	SUDAR PRILIKOM DOLASKA DO DRVETA                                    */
				/************************************************************************/
				if(newPosition == 102)
    1a70:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a72:	86 36       	cpi	r24, 0x66	; 102
    1a74:	e9 f4       	brne	.+58     	; 0x1ab0 <__stack+0x9b1>
				{
					pauza_ms(500);
    1a76:	64 ef       	ldi	r22, 0xF4	; 244
    1a78:	71 e0       	ldi	r23, 0x01	; 1
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
					if((++collisionCounter > 3) && (totemCollisionFlag == TRUE))	//ako pokusava 4. put da dodje a nije pokupio drugi deo totema
    1a82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a84:	8f 5f       	subi	r24, 0xFF	; 255
    1a86:	8b 8f       	std	Y+27, r24	; 0x1b
    1a88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a8a:	84 30       	cpi	r24, 0x04	; 4
    1a8c:	60 f0       	brcs	.+24     	; 0x1aa6 <__stack+0x9a7>
    1a8e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a90:	88 23       	and	r24, r24
    1a92:	49 f4       	brne	.+18     	; 0x1aa6 <__stack+0x9a7>
					{
						collisionCounter = 0;
    1a94:	1b 8e       	std	Y+27, r1	; 0x1b
						
						totemCollisionFlag = FALSE;
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	8e 8f       	std	Y+30, r24	; 0x1e
						state = RIDE_THE_LIGHTING;	//ide do pozicije odakle krece na drugi deo totema
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	8f 8f       	std	Y+31, r24	; 0x1f
						newPosition = 3;
    1a9e:	83 e0       	ldi	r24, 0x03	; 3
    1aa0:	8c 8f       	std	Y+28, r24	; 0x1c
    1aa2:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <blueSide+0x82>

						break;	
					}//end collisionCounter if	
					
					state = RIDE_THE_LIGHTING;	//ide do zida, ponovo pokusava paralelno mapi da dodje do nje
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	8f 8f       	std	Y+31, r24	; 0x1f
					newPosition = 0;
    1aaa:	1c 8e       	std	Y+28, r1	; 0x1c
    1aac:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <blueSide+0x82>
					
					break;
				}//end position if
				
				if(newPosition>=100)
    1ab0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ab2:	84 36       	cpi	r24, 0x64	; 100
    1ab4:	78 f0       	brcs	.+30     	; 0x1ad4 <__stack+0x9d5>
				{
					detectionFlags = ALL_DETECTIONS_ON;
    1ab6:	82 e0       	ldi	r24, 0x02	; 2
    1ab8:	8f 8b       	std	Y+23, r24	; 0x17
					pauza_ms(600);
    1aba:	68 e5       	ldi	r22, 0x58	; 88
    1abc:	72 e0       	ldi	r23, 0x02	; 2
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
					newPosition -= 100;
    1ac6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ac8:	84 56       	subi	r24, 0x64	; 100
    1aca:	8c 8f       	std	Y+28, r24	; 0x1c
					state = RIDE_THE_LIGHTING;
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	8f 8f       	std	Y+31, r24	; 0x1f
    1ad0:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <blueSide+0x82>
					
					break;	
				}//end position if
				
				pauza_ms(600);
    1ad4:	68 e5       	ldi	r22, 0x58	; 88
    1ad6:	72 e0       	ldi	r23, 0x02	; 2
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
				detectionFlags = ALL_DETECTIONS_ON;
    1ae0:	82 e0       	ldi	r24, 0x02	; 2
    1ae2:	8f 8b       	std	Y+23, r24	; 0x17
				state = FAST_AND_FURIOUS;
    1ae4:	1f 8e       	std	Y+31, r1	; 0x1f
    1ae6:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <blueSide+0x82>

00001aea <redSide>:
/*												CRVENA STRANA																							   */
/*												CRVENA STRANA                                                                                              */
/***********************************************************************************************************************************************************/

void redSide(void)
{
    1aea:	ef 92       	push	r14
    1aec:	0f 93       	push	r16
    1aee:	1f 93       	push	r17
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
    1af8:	a1 97       	sbiw	r28, 0x21	; 33
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	f8 94       	cli
    1afe:	de bf       	out	0x3e, r29	; 62
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	cd bf       	out	0x3d, r28	; 61
	/************************************************************************/
	/*			PROMENLJIVE ZA KONTROLU MECA                                */
	/************************************************************************/
	eNesto state = FAST_AND_FURIOUS;
    1b04:	1f 8e       	std	Y+31, r1	; 0x1f
	eBool totemCollisionFlag = FALSE;
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	8e 8f       	std	Y+30, r24	; 0x1e
	
	unsigned char position = 0, newPosition = 0, collisionCounter = 0, tacticCombination;
    1b0a:	1d 8e       	std	Y+29, r1	; 0x1d
    1b0c:	1c 8e       	std	Y+28, r1	; 0x1c
    1b0e:	1b 8e       	std	Y+27, r1	; 0x1b
	int speed = NORMALSPEED;
    1b10:	84 ec       	ldi	r24, 0xC4	; 196
    1b12:	99 e0       	ldi	r25, 0x09	; 9
    1b14:	99 8f       	std	Y+25, r25	; 0x19
    1b16:	88 8f       	std	Y+24, r24	; 0x18
	char detectionFlags = ALL_DETECTIONS_ON;
    1b18:	82 e0       	ldi	r24, 0x02	; 2
    1b1a:	8f 8b       	std	Y+23, r24	; 0x17
	
	if(prekTaktika1Provera() && prekTaktika2Provera())
    1b1c:	0e 94 88 36 	call	0x6d10	; 0x6d10 <prekTaktika1Provera>
    1b20:	88 23       	and	r24, r24
    1b22:	39 f0       	breq	.+14     	; 0x1b32 <redSide+0x48>
    1b24:	0e 94 a0 36 	call	0x6d40	; 0x6d40 <prekTaktika2Provera>
    1b28:	88 23       	and	r24, r24
    1b2a:	19 f0       	breq	.+6      	; 0x1b32 <redSide+0x48>
		tacticCombination = 1;//T1T2MK
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	8a 8f       	std	Y+26, r24	; 0x1a
    1b30:	13 c0       	rjmp	.+38     	; 0x1b58 <redSide+0x6e>
	else if((!prekTaktika1Provera()) && (!prekTaktika2Provera()))
    1b32:	0e 94 88 36 	call	0x6d10	; 0x6d10 <prekTaktika1Provera>
    1b36:	88 23       	and	r24, r24
    1b38:	31 f4       	brne	.+12     	; 0x1b46 <redSide+0x5c>
    1b3a:	0e 94 a0 36 	call	0x6d40	; 0x6d40 <prekTaktika2Provera>
    1b3e:	88 23       	and	r24, r24
    1b40:	11 f4       	brne	.+4      	; 0x1b46 <redSide+0x5c>
		tacticCombination = 0;	//T1T2MT3K
    1b42:	1a 8e       	std	Y+26, r1	; 0x1a
    1b44:	09 c0       	rjmp	.+18     	; 0x1b58 <redSide+0x6e>
	else if(prekTaktika1Provera())
    1b46:	0e 94 88 36 	call	0x6d10	; 0x6d10 <prekTaktika1Provera>
    1b4a:	88 23       	and	r24, r24
    1b4c:	19 f0       	breq	.+6      	; 0x1b54 <redSide+0x6a>
		tacticCombination = 2;	//T1T2T3MK
    1b4e:	82 e0       	ldi	r24, 0x02	; 2
    1b50:	8a 8f       	std	Y+26, r24	; 0x1a
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <redSide+0x6e>
	else
		tacticCombination = 3;	//T1T2KM
    1b54:	83 e0       	ldi	r24, 0x03	; 3
    1b56:	8a 8f       	std	Y+26, r24	; 0x1a
	

	/************************************************************************/
	/*		POCETNA POZICIJA ZA CRVENU STRANU		                        */
	/************************************************************************/
	setStartPosition(2789,3688,191);  
    1b58:	85 ee       	ldi	r24, 0xE5	; 229
    1b5a:	9a e0       	ldi	r25, 0x0A	; 10
    1b5c:	68 e6       	ldi	r22, 0x68	; 104
    1b5e:	7e e0       	ldi	r23, 0x0E	; 14
    1b60:	4f eb       	ldi	r20, 0xBF	; 191
    1b62:	50 e0       	ldi	r21, 0x00	; 0
    1b64:	0e 94 ed 28 	call	0x51da	; 0x51da <setStartPosition>
	otvoriSkupljac();
    1b68:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <otvoriSkupljac>
	while(1)
	{
		switch(state)
    1b6c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	39 a3       	std	Y+33, r19	; 0x21
    1b74:	28 a3       	std	Y+32, r18	; 0x20
    1b76:	88 a1       	ldd	r24, Y+32	; 0x20
    1b78:	99 a1       	ldd	r25, Y+33	; 0x21
    1b7a:	81 30       	cpi	r24, 0x01	; 1
    1b7c:	91 05       	cpc	r25, r1
    1b7e:	09 f4       	brne	.+2      	; 0x1b82 <redSide+0x98>
    1b80:	6a c4       	rjmp	.+2260   	; 0x2456 <redSide+0x96c>
    1b82:	28 a1       	ldd	r18, Y+32	; 0x20
    1b84:	39 a1       	ldd	r19, Y+33	; 0x21
    1b86:	22 30       	cpi	r18, 0x02	; 2
    1b88:	31 05       	cpc	r19, r1
    1b8a:	09 f4       	brne	.+2      	; 0x1b8e <redSide+0xa4>
    1b8c:	c6 c5       	rjmp	.+2956   	; 0x271a <redSide+0xc30>
    1b8e:	88 a1       	ldd	r24, Y+32	; 0x20
    1b90:	99 a1       	ldd	r25, Y+33	; 0x21
    1b92:	00 97       	sbiw	r24, 0x00	; 0
    1b94:	59 f7       	brne	.-42     	; 0x1b6c <redSide+0x82>
		{
			/************************************************************************/
			/*	GLAVNE PUTANJE ZA MEC                                               */
			/************************************************************************/	
			case FAST_AND_FURIOUS:
				for(position = newPosition; position < brojPozicijaPlavo; position++)
    1b96:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b98:	8d 8f       	std	Y+29, r24	; 0x1d
    1b9a:	58 c4       	rjmp	.+2224   	; 0x244c <redSide+0x962>
				{
					if(gotoXY(pgm_read_word(&pathXRed[position]),pgm_read_word(&pathYRed[position]),pgm_read_byte(&directionRed[position]),speed,NORMALPRECISION,detectionFlags))
    1b9c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b9e:	88 2f       	mov	r24, r24
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	88 0f       	add	r24, r24
    1ba4:	99 1f       	adc	r25, r25
    1ba6:	88 5e       	subi	r24, 0xE8	; 232
    1ba8:	9e 4f       	sbci	r25, 0xFE	; 254
    1baa:	9e 8b       	std	Y+22, r25	; 0x16
    1bac:	8d 8b       	std	Y+21, r24	; 0x15
    1bae:	8d 89       	ldd	r24, Y+21	; 0x15
    1bb0:	9e 89       	ldd	r25, Y+22	; 0x16
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	85 91       	lpm	r24, Z+
    1bb6:	94 91       	lpm	r25, Z+
    1bb8:	9c 8b       	std	Y+20, r25	; 0x14
    1bba:	8b 8b       	std	Y+19, r24	; 0x13
    1bbc:	fe 8b       	std	Y+22, r31	; 0x16
    1bbe:	ed 8b       	std	Y+21, r30	; 0x15
    1bc0:	8b 89       	ldd	r24, Y+19	; 0x13
    1bc2:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bc8:	88 2f       	mov	r24, r24
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	88 0f       	add	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	86 5d       	subi	r24, 0xD6	; 214
    1bd2:	9e 4f       	sbci	r25, 0xFE	; 254
    1bd4:	9a 8b       	std	Y+18, r25	; 0x12
    1bd6:	89 8b       	std	Y+17, r24	; 0x11
    1bd8:	89 89       	ldd	r24, Y+17	; 0x11
    1bda:	9a 89       	ldd	r25, Y+18	; 0x12
    1bdc:	fc 01       	movw	r30, r24
    1bde:	85 91       	lpm	r24, Z+
    1be0:	94 91       	lpm	r25, Z+
    1be2:	98 8b       	std	Y+16, r25	; 0x10
    1be4:	8f 87       	std	Y+15, r24	; 0x0f
    1be6:	fa 8b       	std	Y+18, r31	; 0x12
    1be8:	e9 8b       	std	Y+17, r30	; 0x11
    1bea:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bec:	98 89       	ldd	r25, Y+16	; 0x10
    1bee:	bc 01       	movw	r22, r24
    1bf0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bf2:	88 2f       	mov	r24, r24
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	84 5c       	subi	r24, 0xC4	; 196
    1bf8:	9e 4f       	sbci	r25, 0xFE	; 254
    1bfa:	9e 87       	std	Y+14, r25	; 0x0e
    1bfc:	8d 87       	std	Y+13, r24	; 0x0d
    1bfe:	ed 85       	ldd	r30, Y+13	; 0x0d
    1c00:	fe 85       	ldd	r31, Y+14	; 0x0e
    1c02:	84 91       	lpm	r24, Z+
    1c04:	8c 87       	std	Y+12, r24	; 0x0c
    1c06:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c08:	48 2f       	mov	r20, r24
    1c0a:	28 8d       	ldd	r18, Y+24	; 0x18
    1c0c:	39 8d       	ldd	r19, Y+25	; 0x19
    1c0e:	cd 01       	movw	r24, r26
    1c10:	05 e0       	ldi	r16, 0x05	; 5
    1c12:	10 e0       	ldi	r17, 0x00	; 0
    1c14:	ef 88       	ldd	r14, Y+23	; 0x17
    1c16:	0e 94 bd 2c 	call	0x597a	; 0x597a <gotoXY>
    1c1a:	88 23       	and	r24, r24
    1c1c:	59 f0       	breq	.+22     	; 0x1c34 <redSide+0x14a>
					{
						newPosition = position;
    1c1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c20:	8c 8f       	std	Y+28, r24	; 0x1c
						
						state = COLLISION;
    1c22:	82 e0       	ldi	r24, 0x02	; 2
    1c24:	8f 8f       	std	Y+31, r24	; 0x1f
						speed = NORMALSPEED;
    1c26:	84 ec       	ldi	r24, 0xC4	; 196
    1c28:	99 e0       	ldi	r25, 0x09	; 9
    1c2a:	99 8f       	std	Y+25, r25	; 0x19
    1c2c:	88 8f       	std	Y+24, r24	; 0x18
						detectionFlags = ALL_DETECTIONS_OFF;
    1c2e:	83 e0       	ldi	r24, 0x03	; 3
    1c30:	8f 8b       	std	Y+23, r24	; 0x17
    1c32:	9c cf       	rjmp	.-200    	; 0x1b6c <redSide+0x82>
						
						break;	
					}//end collision if
					
					speed = NORMALSPEED;
    1c34:	84 ec       	ldi	r24, 0xC4	; 196
    1c36:	99 e0       	ldi	r25, 0x09	; 9
    1c38:	99 8f       	std	Y+25, r25	; 0x19
    1c3a:	88 8f       	std	Y+24, r24	; 0x18
					detectionFlags = ALL_DETECTIONS_ON;
    1c3c:	82 e0       	ldi	r24, 0x02	; 2
    1c3e:	8f 8b       	std	Y+23, r24	; 0x17
					/************************************************************************/
					/*   ISPRED PRVOG DELA NASEG TOTEMA, PRE OKRETANJA KA NJEMU             */
					/************************************************************************/
					if(position == 0)
    1c40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c42:	88 23       	and	r24, r24
    1c44:	09 f0       	breq	.+2      	; 0x1c48 <redSide+0x15e>
    1c46:	d5 c0       	rjmp	.+426    	; 0x1df2 <redSide+0x308>
					{
						if(tasRobotNapredProvera())		//u slucaju da je neki pametnjakovic odlucio da odmah dodje do nas, taster ce biti pritisnut
    1c48:	0e 94 60 37 	call	0x6ec0	; 0x6ec0 <tasRobotNapredProvera>
    1c4c:	88 23       	and	r24, r24
    1c4e:	11 f1       	breq	.+68     	; 0x1c94 <redSide+0x1aa>
						{
							pauza_ms(20);
    1c50:	64 e1       	ldi	r22, 0x14	; 20
    1c52:	70 e0       	ldi	r23, 0x00	; 0
    1c54:	80 e0       	ldi	r24, 0x00	; 0
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
							moveOnDirection(150,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);	//guramo ga da nam ne smeta
    1c5c:	86 e9       	ldi	r24, 0x96	; 150
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	61 e0       	ldi	r22, 0x01	; 1
    1c62:	70 e0       	ldi	r23, 0x00	; 0
    1c64:	44 ec       	ldi	r20, 0xC4	; 196
    1c66:	59 e0       	ldi	r21, 0x09	; 9
    1c68:	23 e0       	ldi	r18, 0x03	; 3
    1c6a:	00 e0       	ldi	r16, 0x00	; 0
    1c6c:	10 e0       	ldi	r17, 0x00	; 0
    1c6e:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
							pauza_ms(20);
    1c72:	64 e1       	ldi	r22, 0x14	; 20
    1c74:	70 e0       	ldi	r23, 0x00	; 0
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
							moveOnDirection(150,-1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);	//vracamo se nazad		
    1c7e:	86 e9       	ldi	r24, 0x96	; 150
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	6f ef       	ldi	r22, 0xFF	; 255
    1c84:	7f ef       	ldi	r23, 0xFF	; 255
    1c86:	44 ec       	ldi	r20, 0xC4	; 196
    1c88:	59 e0       	ldi	r21, 0x09	; 9
    1c8a:	23 e0       	ldi	r18, 0x03	; 3
    1c8c:	00 e0       	ldi	r16, 0x00	; 0
    1c8e:	10 e0       	ldi	r17, 0x00	; 0
    1c90:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						}//end taster if
						
						otvoriSkupljac();
    1c94:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <otvoriSkupljac>
						setCommandInt('V',NORMALSPEED);
    1c98:	86 e5       	ldi	r24, 0x56	; 86
    1c9a:	64 ec       	ldi	r22, 0xC4	; 196
    1c9c:	79 e0       	ldi	r23, 0x09	; 9
    1c9e:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <setCommandInt>
						setUgao(295);	//okrece se ka totemu				
    1ca2:	87 e2       	ldi	r24, 0x27	; 39
    1ca4:	91 e0       	ldi	r25, 0x01	; 1
    1ca6:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
				
						pauza_ms(10);	
    1caa:	6a e0       	ldi	r22, 0x0A	; 10
    1cac:	70 e0       	ldi	r23, 0x00	; 0
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						
						moveOnDirection(130,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);	//prilazi totemu ali ne skroz, pre cimanja diska
    1cb6:	82 e8       	ldi	r24, 0x82	; 130
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	61 e0       	ldi	r22, 0x01	; 1
    1cbc:	70 e0       	ldi	r23, 0x00	; 0
    1cbe:	44 ec       	ldi	r20, 0xC4	; 196
    1cc0:	59 e0       	ldi	r21, 0x09	; 9
    1cc2:	23 e0       	ldi	r18, 0x03	; 3
    1cc4:	00 e0       	ldi	r16, 0x00	; 0
    1cc6:	10 e0       	ldi	r17, 0x00	; 0
    1cc8:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						skupljacCim(MOTOR_SKUPLJAC_DESNI,30);	//cima levi skupljac i tako se stiti od diska
    1ccc:	82 e4       	ldi	r24, 0x42	; 66
    1cce:	6e e1       	ldi	r22, 0x1E	; 30
    1cd0:	0e 94 16 04 	call	0x82c	; 0x82c <skupljacCim>
						
						moveOnDirection(145,1,NORMALSPEED,ALL_DETECTIONS_OFF,TWO_SECOND_BREAK_TIME);			//150 dolazi skroz do drvenog braon govna
    1cd4:	81 e9       	ldi	r24, 0x91	; 145
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	61 e0       	ldi	r22, 0x01	; 1
    1cda:	70 e0       	ldi	r23, 0x00	; 0
    1cdc:	44 ec       	ldi	r20, 0xC4	; 196
    1cde:	59 e0       	ldi	r21, 0x09	; 9
    1ce0:	23 e0       	ldi	r18, 0x03	; 3
    1ce2:	00 ed       	ldi	r16, 0xD0	; 208
    1ce4:	17 e0       	ldi	r17, 0x07	; 7
    1ce6:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						collisionCounter = 0;
    1cea:	1b 8e       	std	Y+27, r1	; 0x1b
    1cec:	2c c0       	rjmp	.+88     	; 0x1d46 <redSide+0x25c>
						while(setUgao(352))	//348 cisti sa totema, AKO NE MOZE VRACA SE U PRETHODNI UGAO, UKLJUCUJE CIM I NASTAVLJA
						{				//193
							if(++collisionCounter == 4)
    1cee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cf0:	8f 5f       	subi	r24, 0xFF	; 255
    1cf2:	8b 8f       	std	Y+27, r24	; 0x1b
    1cf4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cf6:	84 30       	cpi	r24, 0x04	; 4
    1cf8:	e1 f4       	brne	.+56     	; 0x1d32 <redSide+0x248>
							{
								collisionCounter = 0;
    1cfa:	1b 8e       	std	Y+27, r1	; 0x1b
								moveOnDirection(160,-1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
    1cfc:	80 ea       	ldi	r24, 0xA0	; 160
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	6f ef       	ldi	r22, 0xFF	; 255
    1d02:	7f ef       	ldi	r23, 0xFF	; 255
    1d04:	44 ec       	ldi	r20, 0xC4	; 196
    1d06:	59 e0       	ldi	r21, 0x09	; 9
    1d08:	23 e0       	ldi	r18, 0x03	; 3
    1d0a:	00 e0       	ldi	r16, 0x00	; 0
    1d0c:	10 e0       	ldi	r17, 0x00	; 0
    1d0e:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
								setUgao(295);
    1d12:	87 e2       	ldi	r24, 0x27	; 39
    1d14:	91 e0       	ldi	r25, 0x01	; 1
    1d16:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
								moveOnDirection(140,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
    1d1a:	8c e8       	ldi	r24, 0x8C	; 140
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	61 e0       	ldi	r22, 0x01	; 1
    1d20:	70 e0       	ldi	r23, 0x00	; 0
    1d22:	44 ec       	ldi	r20, 0xC4	; 196
    1d24:	59 e0       	ldi	r21, 0x09	; 9
    1d26:	23 e0       	ldi	r18, 0x03	; 3
    1d28:	00 e0       	ldi	r16, 0x00	; 0
    1d2a:	10 e0       	ldi	r17, 0x00	; 0
    1d2c:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
    1d30:	0a c0       	rjmp	.+20     	; 0x1d46 <redSide+0x25c>
								continue;	
							}	
													
							skupljacCim(MOTOR_SKUPLJAC_LEVI,50);
    1d32:	81 e4       	ldi	r24, 0x41	; 65
    1d34:	62 e3       	ldi	r22, 0x32	; 50
    1d36:	0e 94 16 04 	call	0x82c	; 0x82c <skupljacCim>
							pauza_ms(50);
    1d3a:	62 e3       	ldi	r22, 0x32	; 50
    1d3c:	70 e0       	ldi	r23, 0x00	; 0
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						skupljacCim(MOTOR_SKUPLJAC_DESNI,30);	//cima levi skupljac i tako se stiti od diska
						
						moveOnDirection(145,1,NORMALSPEED,ALL_DETECTIONS_OFF,TWO_SECOND_BREAK_TIME);			//150 dolazi skroz do drvenog braon govna
						
						collisionCounter = 0;
						while(setUgao(352))	//348 cisti sa totema, AKO NE MOZE VRACA SE U PRETHODNI UGAO, UKLJUCUJE CIM I NASTAVLJA
    1d46:	80 e6       	ldi	r24, 0x60	; 96
    1d48:	91 e0       	ldi	r25, 0x01	; 1
    1d4a:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
    1d4e:	88 23       	and	r24, r24
    1d50:	71 f6       	brne	.-100    	; 0x1cee <redSide+0x204>
													
							skupljacCim(MOTOR_SKUPLJAC_LEVI,50);
							pauza_ms(50);
						}//end while(setUgao)
						
						collisionCounter = 0;
    1d52:	1b 8e       	std	Y+27, r1	; 0x1b
						
						/************************************************************************/
						/* kupi sta je ocistio, sve dok ne dodje gde treba                      */
						/************************************************************************/
	
						moveOnDirection(280,1,NORMALSPEED,TASTER_SUDAR_ON,NO_BREAK_TIME); //ide malo napred i tako kupi sta je srusio
    1d54:	88 e1       	ldi	r24, 0x18	; 24
    1d56:	91 e0       	ldi	r25, 0x01	; 1
    1d58:	61 e0       	ldi	r22, 0x01	; 1
    1d5a:	70 e0       	ldi	r23, 0x00	; 0
    1d5c:	44 ec       	ldi	r20, 0xC4	; 196
    1d5e:	59 e0       	ldi	r21, 0x09	; 9
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	00 e0       	ldi	r16, 0x00	; 0
    1d64:	10 e0       	ldi	r17, 0x00	; 0
    1d66:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
    1d6a:	0b c0       	rjmp	.+22     	; 0x1d82 <redSide+0x298>
						
						while(setUgao(329))			//malo koriguje ugao, da bi mogao skupiti i ostale
						{
							moveOnDirection(30,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
    1d6c:	8e e1       	ldi	r24, 0x1E	; 30
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	61 e0       	ldi	r22, 0x01	; 1
    1d72:	70 e0       	ldi	r23, 0x00	; 0
    1d74:	44 ec       	ldi	r20, 0xC4	; 196
    1d76:	59 e0       	ldi	r21, 0x09	; 9
    1d78:	23 e0       	ldi	r18, 0x03	; 3
    1d7a:	00 e0       	ldi	r16, 0x00	; 0
    1d7c:	10 e0       	ldi	r17, 0x00	; 0
    1d7e:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						/* kupi sta je ocistio, sve dok ne dodje gde treba                      */
						/************************************************************************/
	
						moveOnDirection(280,1,NORMALSPEED,TASTER_SUDAR_ON,NO_BREAK_TIME); //ide malo napred i tako kupi sta je srusio
						
						while(setUgao(329))			//malo koriguje ugao, da bi mogao skupiti i ostale
    1d82:	89 e4       	ldi	r24, 0x49	; 73
    1d84:	91 e0       	ldi	r25, 0x01	; 1
    1d86:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
    1d8a:	88 23       	and	r24, r24
    1d8c:	79 f7       	brne	.-34     	; 0x1d6c <redSide+0x282>
						{
							moveOnDirection(30,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
						}	
						
						moveOnDirection(350,1,NORMALSPEED,TASTER_SUDAR_ON,NO_BREAK_TIME);  //IDE skroz do naseg broda, tu mora da dodje!
    1d8e:	8e e5       	ldi	r24, 0x5E	; 94
    1d90:	91 e0       	ldi	r25, 0x01	; 1
    1d92:	61 e0       	ldi	r22, 0x01	; 1
    1d94:	70 e0       	ldi	r23, 0x00	; 0
    1d96:	44 ec       	ldi	r20, 0xC4	; 196
    1d98:	59 e0       	ldi	r21, 0x09	; 9
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	00 e0       	ldi	r16, 0x00	; 0
    1d9e:	10 e0       	ldi	r17, 0x00	; 0
    1da0:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						setUgaoNula();	//okrece se pre ulaska u cilj
    1da4:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <setUgaoNula>
						
						pauza_ms(5);
    1da8:	65 e0       	ldi	r22, 0x05	; 5
    1daa:	70 e0       	ldi	r23, 0x00	; 0
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						
						moveOnDirection(260,1,NORMALSPEED,ALL_DETECTIONS_OFF,TWO_SECOND_BREAK_TIME);	//ulazim u cilj
    1db4:	84 e0       	ldi	r24, 0x04	; 4
    1db6:	91 e0       	ldi	r25, 0x01	; 1
    1db8:	61 e0       	ldi	r22, 0x01	; 1
    1dba:	70 e0       	ldi	r23, 0x00	; 0
    1dbc:	44 ec       	ldi	r20, 0xC4	; 196
    1dbe:	59 e0       	ldi	r21, 0x09	; 9
    1dc0:	23 e0       	ldi	r18, 0x03	; 3
    1dc2:	00 ed       	ldi	r16, 0xD0	; 208
    1dc4:	17 e0       	ldi	r17, 0x07	; 7
    1dc6:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						pauza_ms(5);
    1dca:	65 e0       	ldi	r22, 0x05	; 5
    1dcc:	70 e0       	ldi	r23, 0x00	; 0
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						moveOnDirection(220,-1,NORMALSPEED,TASTER_SUDAR_ON,NO_BREAK_TIME);	//izlazim iz cilja
    1dd6:	8c ed       	ldi	r24, 0xDC	; 220
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	6f ef       	ldi	r22, 0xFF	; 255
    1ddc:	7f ef       	ldi	r23, 0xFF	; 255
    1dde:	44 ec       	ldi	r20, 0xC4	; 196
    1de0:	59 e0       	ldi	r21, 0x09	; 9
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	00 e0       	ldi	r16, 0x00	; 0
    1de6:	10 e0       	ldi	r17, 0x00	; 0
    1de8:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						zatvoriSkupljac();		//zatvara govna
    1dec:	0e 94 c1 03 	call	0x782	; 0x782 <zatvoriSkupljac>
    1df0:	2a c3       	rjmp	.+1620   	; 0x2446 <redSide+0x95c>
					}//end position if	
					
					/************************************************************************/
					/*   IDE DA KUPI DRUGI DEO TOTEMA, PRE KOSE KRETNJE                     */
					/************************************************************************/
					if(position == 1)
    1df2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1df4:	81 30       	cpi	r24, 0x01	; 1
    1df6:	11 f4       	brne	.+4      	; 0x1dfc <redSide+0x312>
					{
						collisionCounter = 0;
    1df8:	1b 8e       	std	Y+27, r1	; 0x1b
    1dfa:	25 c3       	rjmp	.+1610   	; 0x2446 <redSide+0x95c>
					}
					
					/************************************************************************/
					/*	NALAZI SE ISPRED DRUGOG DELA NASEG TOTEMA                           */
					/************************************************************************/
					if(position == 2)
    1dfc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dfe:	82 30       	cpi	r24, 0x02	; 2
    1e00:	09 f0       	breq	.+2      	; 0x1e04 <redSide+0x31a>
    1e02:	24 c1       	rjmp	.+584    	; 0x204c <redSide+0x562>
					{				
						setCommandInt('V',NORMALSPEED);
    1e04:	86 e5       	ldi	r24, 0x56	; 86
    1e06:	64 ec       	ldi	r22, 0xC4	; 196
    1e08:	79 e0       	ldi	r23, 0x09	; 9
    1e0a:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <setCommandInt>
						setUgao(75);	//okrece se ka totemu  //MENJANO!  90
    1e0e:	8b e4       	ldi	r24, 0x4B	; 75
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
						otvoriSkupljac();
    1e16:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <otvoriSkupljac>
						
						//moveOnDirection(160,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME); //prilazi totemu pre cimanja diska		
						moveOnDirection(290,1,NORMALSPEED,ALL_DETECTIONS_OFF,TWO_SECOND_BREAK_TIME);  //165  MENJANO!
    1e1a:	82 e2       	ldi	r24, 0x22	; 34
    1e1c:	91 e0       	ldi	r25, 0x01	; 1
    1e1e:	61 e0       	ldi	r22, 0x01	; 1
    1e20:	70 e0       	ldi	r23, 0x00	; 0
    1e22:	44 ec       	ldi	r20, 0xC4	; 196
    1e24:	59 e0       	ldi	r21, 0x09	; 9
    1e26:	23 e0       	ldi	r18, 0x03	; 3
    1e28:	00 ed       	ldi	r16, 0xD0	; 208
    1e2a:	17 e0       	ldi	r17, 0x07	; 7
    1e2c:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
										
						skupljacCim(MOTOR_SKUPLJAC_LEVI,45);
    1e30:	81 e4       	ldi	r24, 0x41	; 65
    1e32:	6d e2       	ldi	r22, 0x2D	; 45
    1e34:	0e 94 16 04 	call	0x82c	; 0x82c <skupljacCim>
						
						if(moveOnDirection(50,1,NORMALSPEED,ALL_DETECTIONS_OFF,ONE_SECOND_BREAK_TIME))	//skroz prilazi totemu  70  MENJANO!
    1e38:	82 e3       	ldi	r24, 0x32	; 50
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	61 e0       	ldi	r22, 0x01	; 1
    1e3e:	70 e0       	ldi	r23, 0x00	; 0
    1e40:	44 ec       	ldi	r20, 0xC4	; 196
    1e42:	59 e0       	ldi	r21, 0x09	; 9
    1e44:	23 e0       	ldi	r18, 0x03	; 3
    1e46:	00 eb       	ldi	r16, 0xB0	; 176
    1e48:	14 e0       	ldi	r17, 0x04	; 4
    1e4a:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
    1e4e:	88 23       	and	r24, r24
    1e50:	79 f0       	breq	.+30     	; 0x1e70 <redSide+0x386>
						{	
							skupljacCim(MOTOR_SKUPLJAC_DESNI,40);
    1e52:	82 e4       	ldi	r24, 0x42	; 66
    1e54:	68 e2       	ldi	r22, 0x28	; 40
    1e56:	0e 94 16 04 	call	0x82c	; 0x82c <skupljacCim>
							moveOnDirection(10,1,NORMALSPEED,ALL_DETECTIONS_OFF,ONE_SECOND_BREAK_TIME);
    1e5a:	8a e0       	ldi	r24, 0x0A	; 10
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	61 e0       	ldi	r22, 0x01	; 1
    1e60:	70 e0       	ldi	r23, 0x00	; 0
    1e62:	44 ec       	ldi	r20, 0xC4	; 196
    1e64:	59 e0       	ldi	r21, 0x09	; 9
    1e66:	23 e0       	ldi	r18, 0x03	; 3
    1e68:	00 eb       	ldi	r16, 0xB0	; 176
    1e6a:	14 e0       	ldi	r17, 0x04	; 4
    1e6c:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						}						
							
						skupljacCim(MOTOR_SKUPLJAC_LEVI,30);	//CIMA (DVA PUTA) DA SE NE BI ZAPUCO U DISK NA TOTEMU PRILIKOM CISCENJA
    1e70:	81 e4       	ldi	r24, 0x41	; 65
    1e72:	6e e1       	ldi	r22, 0x1E	; 30
    1e74:	0e 94 16 04 	call	0x82c	; 0x82c <skupljacCim>
						pauza_ms(90);
    1e78:	6a e5       	ldi	r22, 0x5A	; 90
    1e7a:	70 e0       	ldi	r23, 0x00	; 0
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						skupljacCim(MOTOR_SKUPLJAC_LEVI,30);
    1e84:	81 e4       	ldi	r24, 0x41	; 65
    1e86:	6e e1       	ldi	r22, 0x1E	; 30
    1e88:	0e 94 16 04 	call	0x82c	; 0x82c <skupljacCim>
    1e8c:	0a c0       	rjmp	.+20     	; 0x1ea2 <redSide+0x3b8>
						
						while(setUgao(15))	//cisti sa totema
						{			//170
							skupljacCim(MOTOR_SKUPLJAC_DESNI,60);	//ako ne moze da se okrene ukljucuje cim i pokusava ponovo
    1e8e:	82 e4       	ldi	r24, 0x42	; 66
    1e90:	6c e3       	ldi	r22, 0x3C	; 60
    1e92:	0e 94 16 04 	call	0x82c	; 0x82c <skupljacCim>
							pauza_ms(10);
    1e96:	6a e0       	ldi	r22, 0x0A	; 10
    1e98:	70 e0       	ldi	r23, 0x00	; 0
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
							
						skupljacCim(MOTOR_SKUPLJAC_LEVI,30);	//CIMA (DVA PUTA) DA SE NE BI ZAPUCO U DISK NA TOTEMU PRILIKOM CISCENJA
						pauza_ms(90);
						skupljacCim(MOTOR_SKUPLJAC_LEVI,30);
						
						while(setUgao(15))	//cisti sa totema
    1ea2:	8f e0       	ldi	r24, 0x0F	; 15
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
    1eaa:	88 23       	and	r24, r24
    1eac:	81 f7       	brne	.-32     	; 0x1e8e <redSide+0x3a4>
						{			//170
							skupljacCim(MOTOR_SKUPLJAC_DESNI,60);	//ako ne moze da se okrene ukljucuje cim i pokusava ponovo
							pauza_ms(10);
						}
						
						moveOnDirection(260,1,NORMALSPEED,ALL_DETECTIONS_ON,NO_BREAK_TIME);	//300 ide napred prema cilju, mora da dodje tu MENJANO!
    1eae:	84 e0       	ldi	r24, 0x04	; 4
    1eb0:	91 e0       	ldi	r25, 0x01	; 1
    1eb2:	61 e0       	ldi	r22, 0x01	; 1
    1eb4:	70 e0       	ldi	r23, 0x00	; 0
    1eb6:	44 ec       	ldi	r20, 0xC4	; 196
    1eb8:	59 e0       	ldi	r21, 0x09	; 9
    1eba:	22 e0       	ldi	r18, 0x02	; 2
    1ebc:	00 e0       	ldi	r16, 0x00	; 0
    1ebe:	10 e0       	ldi	r17, 0x00	; 0
    1ec0:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						pauza_ms(5);
    1ec4:	65 e0       	ldi	r22, 0x05	; 5
    1ec6:	70 e0       	ldi	r23, 0x00	; 0
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
    1ed0:	0b c0       	rjmp	.+22     	; 0x1ee8 <redSide+0x3fe>
						while(setUgao(50))	//okrece se prema totemu da pokupi ono sto mu je ispalo	40
						{
							moveOnDirection(50,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);		//TESTIRATI!!!
    1ed2:	82 e3       	ldi	r24, 0x32	; 50
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	61 e0       	ldi	r22, 0x01	; 1
    1ed8:	70 e0       	ldi	r23, 0x00	; 0
    1eda:	44 ec       	ldi	r20, 0xC4	; 196
    1edc:	59 e0       	ldi	r21, 0x09	; 9
    1ede:	23 e0       	ldi	r18, 0x03	; 3
    1ee0:	00 e0       	ldi	r16, 0x00	; 0
    1ee2:	10 e0       	ldi	r17, 0x00	; 0
    1ee4:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
							pauza_ms(10);
						}
						
						moveOnDirection(260,1,NORMALSPEED,ALL_DETECTIONS_ON,NO_BREAK_TIME);	//300 ide napred prema cilju, mora da dodje tu MENJANO!
						pauza_ms(5);
						while(setUgao(50))	//okrece se prema totemu da pokupi ono sto mu je ispalo	40
    1ee8:	82 e3       	ldi	r24, 0x32	; 50
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
    1ef0:	88 23       	and	r24, r24
    1ef2:	79 f7       	brne	.-34     	; 0x1ed2 <redSide+0x3e8>
						{
							moveOnDirection(50,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);		//TESTIRATI!!!
						}
						moveOnDirection(510,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME); //530 ide jos malo prema cilju
    1ef4:	8e ef       	ldi	r24, 0xFE	; 254
    1ef6:	91 e0       	ldi	r25, 0x01	; 1
    1ef8:	61 e0       	ldi	r22, 0x01	; 1
    1efa:	70 e0       	ldi	r23, 0x00	; 0
    1efc:	44 ec       	ldi	r20, 0xC4	; 196
    1efe:	59 e0       	ldi	r21, 0x09	; 9
    1f00:	23 e0       	ldi	r18, 0x03	; 3
    1f02:	00 e0       	ldi	r16, 0x00	; 0
    1f04:	10 e0       	ldi	r17, 0x00	; 0
    1f06:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						saljiKinezima(MOTOR_SKUPLJAC_DESNI,135);	//delimicno zatvara skupljace da ne bi sebe zeznuo
    1f0a:	82 e4       	ldi	r24, 0x42	; 66
    1f0c:	67 e8       	ldi	r22, 0x87	; 135
    1f0e:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						saljiKinezima(MOTOR_SKUPLJAC_LEVI,35);
    1f12:	81 e4       	ldi	r24, 0x41	; 65
    1f14:	63 e2       	ldi	r22, 0x23	; 35
    1f16:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						pauza_ms(110);
    1f1a:	6e e6       	ldi	r22, 0x6E	; 110
    1f1c:	70 e0       	ldi	r23, 0x00	; 0
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						saljiKinezima(MOTOR_SKUPLJAC_DESNI,0);	
    1f26:	82 e4       	ldi	r24, 0x42	; 66
    1f28:	60 e0       	ldi	r22, 0x00	; 0
    1f2a:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						saljiKinezima(MOTOR_SKUPLJAC_LEVI,0);
    1f2e:	81 e4       	ldi	r24, 0x41	; 65
    1f30:	60 e0       	ldi	r22, 0x00	; 0
    1f32:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						
						moveOnDirection(135,1,NORMALSPEED,ALL_DETECTIONS_OFF,TWO_SECOND_BREAK_TIME);	//175 PRE ULASKA U CILJ
    1f36:	87 e8       	ldi	r24, 0x87	; 135
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	61 e0       	ldi	r22, 0x01	; 1
    1f3c:	70 e0       	ldi	r23, 0x00	; 0
    1f3e:	44 ec       	ldi	r20, 0xC4	; 196
    1f40:	59 e0       	ldi	r21, 0x09	; 9
    1f42:	23 e0       	ldi	r18, 0x03	; 3
    1f44:	00 ed       	ldi	r16, 0xD0	; 208
    1f46:	17 e0       	ldi	r17, 0x07	; 7
    1f48:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						setUgaoNula();	//okrece se da udje u cilj
    1f4c:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <setUgaoNula>
										//140
						moveOnDirection(90,1,NORMALSPEED,ALL_DETECTIONS_OFF,TWO_SECOND_BREAK_TIME);	//ulazi u cilj 140
    1f50:	8a e5       	ldi	r24, 0x5A	; 90
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	61 e0       	ldi	r22, 0x01	; 1
    1f56:	70 e0       	ldi	r23, 0x00	; 0
    1f58:	44 ec       	ldi	r20, 0xC4	; 196
    1f5a:	59 e0       	ldi	r21, 0x09	; 9
    1f5c:	23 e0       	ldi	r18, 0x03	; 3
    1f5e:	00 ed       	ldi	r16, 0xD0	; 208
    1f60:	17 e0       	ldi	r17, 0x07	; 7
    1f62:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						pauza_ms(5);
    1f66:	65 e0       	ldi	r22, 0x05	; 5
    1f68:	70 e0       	ldi	r23, 0x00	; 0
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						
						moveOnDirection(320,-1,NORMALSPEED,TASTER_SUDAR_ON,NO_BREAK_TIME);	//izlazim iz cilja
    1f72:	80 e4       	ldi	r24, 0x40	; 64
    1f74:	91 e0       	ldi	r25, 0x01	; 1
    1f76:	6f ef       	ldi	r22, 0xFF	; 255
    1f78:	7f ef       	ldi	r23, 0xFF	; 255
    1f7a:	44 ec       	ldi	r20, 0xC4	; 196
    1f7c:	59 e0       	ldi	r21, 0x09	; 9
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	00 e0       	ldi	r16, 0x00	; 0
    1f82:	10 e0       	ldi	r17, 0x00	; 0
    1f84:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						setUgao(270);	//postavlja se da da moze da ide da kupi mapu
    1f88:	8e e0       	ldi	r24, 0x0E	; 14
    1f8a:	91 e0       	ldi	r25, 0x01	; 1
    1f8c:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
								//270
						moveOnDirection(200,-1,NORMALSPEED,ALL_DETECTIONS_ON,NO_BREAK_TIME);	//izlazi malo da se na putu do mape ne bi spuco u totem
    1f90:	88 ec       	ldi	r24, 0xC8	; 200
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	6f ef       	ldi	r22, 0xFF	; 255
    1f96:	7f ef       	ldi	r23, 0xFF	; 255
    1f98:	44 ec       	ldi	r20, 0xC4	; 196
    1f9a:	59 e0       	ldi	r21, 0x09	; 9
    1f9c:	22 e0       	ldi	r18, 0x02	; 2
    1f9e:	00 e0       	ldi	r16, 0x00	; 0
    1fa0:	10 e0       	ldi	r17, 0x00	; 0
    1fa2:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						zatvoriSkupljac();
    1fa6:	0e 94 c1 03 	call	0x782	; 0x782 <zatvoriSkupljac>
						
						collisionCounter = 0;
    1faa:	1b 8e       	std	Y+27, r1	; 0x1b
						
						if((tacticCombination == 2) || ((tacticCombination == 0) && (totemCollisionFlag == TRUE)))	
    1fac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fae:	82 30       	cpi	r24, 0x02	; 2
    1fb0:	31 f0       	breq	.+12     	; 0x1fbe <redSide+0x4d4>
    1fb2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fb4:	88 23       	and	r24, r24
    1fb6:	69 f4       	brne	.+26     	; 0x1fd2 <redSide+0x4e8>
    1fb8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fba:	88 23       	and	r24, r24
    1fbc:	51 f4       	brne	.+20     	; 0x1fd2 <redSide+0x4e8>
						{
							setUgao(270);
    1fbe:	8e e0       	ldi	r24, 0x0E	; 14
    1fc0:	91 e0       	ldi	r25, 0x01	; 1
    1fc2:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
							otvoriSkupljac();
    1fc6:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <otvoriSkupljac>
							newPosition = 4;//ide na protivnicki totem
    1fca:	84 e0       	ldi	r24, 0x04	; 4
    1fcc:	8c 8f       	std	Y+28, r24	; 0x1c
							state = FAST_AND_FURIOUS;	
    1fce:	1f 8e       	std	Y+31, r1	; 0x1f
    1fd0:	cd cd       	rjmp	.-1126   	; 0x1b6c <redSide+0x82>
							
							break;
						}
						
						if((tacticCombination == 3) || ((tacticCombination == 1) && (totemCollisionFlag == TRUE)))	//ide da krade
    1fd2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fd4:	83 30       	cpi	r24, 0x03	; 3
    1fd6:	41 f0       	breq	.+16     	; 0x1fe8 <redSide+0x4fe>
    1fd8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fda:	81 30       	cpi	r24, 0x01	; 1
    1fdc:	09 f0       	breq	.+2      	; 0x1fe0 <redSide+0x4f6>
    1fde:	33 c2       	rjmp	.+1126   	; 0x2446 <redSide+0x95c>
    1fe0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fe2:	88 23       	and	r24, r24
    1fe4:	09 f0       	breq	.+2      	; 0x1fe8 <redSide+0x4fe>
    1fe6:	2f c2       	rjmp	.+1118   	; 0x2446 <redSide+0x95c>
						{
							setUgao(270);
    1fe8:	8e e0       	ldi	r24, 0x0E	; 14
    1fea:	91 e0       	ldi	r25, 0x01	; 1
    1fec:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
    1ff0:	17 c0       	rjmp	.+46     	; 0x2020 <redSide+0x536>
											//1835
							while(gotoXY(2700,3165,-1,NORMALSPEED,NORMALPRECISION,ALL_DETECTIONS_ON))	//ide na poziciju odakle krece da krade
							{
								pauza_ms(50);
    1ff2:	62 e3       	ldi	r22, 0x32	; 50
    1ff4:	70 e0       	ldi	r23, 0x00	; 0
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
								moveOnDirection(20,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
    1ffe:	84 e1       	ldi	r24, 0x14	; 20
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	61 e0       	ldi	r22, 0x01	; 1
    2004:	70 e0       	ldi	r23, 0x00	; 0
    2006:	44 ec       	ldi	r20, 0xC4	; 196
    2008:	59 e0       	ldi	r21, 0x09	; 9
    200a:	23 e0       	ldi	r18, 0x03	; 3
    200c:	00 e0       	ldi	r16, 0x00	; 0
    200e:	10 e0       	ldi	r17, 0x00	; 0
    2010:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
								pauza_ms(500);
    2014:	64 ef       	ldi	r22, 0xF4	; 244
    2016:	71 e0       	ldi	r23, 0x01	; 1
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						
						if((tacticCombination == 3) || ((tacticCombination == 1) && (totemCollisionFlag == TRUE)))	//ide da krade
						{
							setUgao(270);
											//1835
							while(gotoXY(2700,3165,-1,NORMALSPEED,NORMALPRECISION,ALL_DETECTIONS_ON))	//ide na poziciju odakle krece da krade
    2020:	8c e8       	ldi	r24, 0x8C	; 140
    2022:	9a e0       	ldi	r25, 0x0A	; 10
    2024:	6d e5       	ldi	r22, 0x5D	; 93
    2026:	7c e0       	ldi	r23, 0x0C	; 12
    2028:	4f ef       	ldi	r20, 0xFF	; 255
    202a:	24 ec       	ldi	r18, 0xC4	; 196
    202c:	39 e0       	ldi	r19, 0x09	; 9
    202e:	05 e0       	ldi	r16, 0x05	; 5
    2030:	10 e0       	ldi	r17, 0x00	; 0
    2032:	ee 24       	eor	r14, r14
    2034:	68 94       	set
    2036:	e1 f8       	bld	r14, 1
    2038:	0e 94 bd 2c 	call	0x597a	; 0x597a <gotoXY>
    203c:	88 23       	and	r24, r24
    203e:	c9 f6       	brne	.-78     	; 0x1ff2 <redSide+0x508>
								pauza_ms(50);
								moveOnDirection(20,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
								pauza_ms(500);
							}
								
							newPosition = 7;
    2040:	87 e0       	ldi	r24, 0x07	; 7
    2042:	8c 8f       	std	Y+28, r24	; 0x1c
							state = FAST_AND_FURIOUS;
    2044:	1f 8e       	std	Y+31, r1	; 0x1f
							detectionFlags = ALL_DETECTIONS_ON;
    2046:	82 e0       	ldi	r24, 0x02	; 2
    2048:	8f 8b       	std	Y+23, r24	; 0x17
    204a:	90 cd       	rjmp	.-1248   	; 0x1b6c <redSide+0x82>
					}//end position if
					
					/************************************************************************/
					/*  DOSAO JE KOD MAPE                                                   */
					/************************************************************************/
					if(position == 3)
    204c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    204e:	83 30       	cpi	r24, 0x03	; 3
    2050:	09 f0       	breq	.+2      	; 0x2054 <redSide+0x56a>
    2052:	71 c0       	rjmp	.+226    	; 0x2136 <redSide+0x64c>
					{
						zatvoriSkupljac();	
    2054:	0e 94 c1 03 	call	0x782	; 0x782 <zatvoriSkupljac>
						//ako regularno ide po mapu ovaj uslov ce biti ispunjen,
						//to je posle drugog dela totema ili posle istovaranja u start
						//ako tu ide prinudno, tj. zbog sudara onda nece biti ispunjen
						//if((readUgaoStepeni()>90) && (readUgaoStepeni()<270))		
						//{
						if((tacticCombination != 3)  && (tacticCombination != 2))	//ulazi ovde samo ako je ovo planski, tj. ne zbog sudara
    2058:	8a 8d       	ldd	r24, Y+26	; 0x1a
    205a:	83 30       	cpi	r24, 0x03	; 3
    205c:	09 f1       	breq	.+66     	; 0x20a0 <redSide+0x5b6>
    205e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2060:	82 30       	cpi	r24, 0x02	; 2
    2062:	f1 f0       	breq	.+60     	; 0x20a0 <redSide+0x5b6>
						{
							setUgaoNula();				//okrece se paralelno mapi
    2064:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <setUgaoNula>
						
							moveOnDirection(100,-1,NORMALSPEED,TASTER_SUDAR_ON,NO_BREAK_TIME);	//guram disk koji se mozda nalazi iza
    2068:	84 e6       	ldi	r24, 0x64	; 100
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	6f ef       	ldi	r22, 0xFF	; 255
    206e:	7f ef       	ldi	r23, 0xFF	; 255
    2070:	44 ec       	ldi	r20, 0xC4	; 196
    2072:	59 e0       	ldi	r21, 0x09	; 9
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	00 e0       	ldi	r16, 0x00	; 0
    2078:	10 e0       	ldi	r17, 0x00	; 0
    207a:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
							pauza_ms(5);
    207e:	65 e0       	ldi	r22, 0x05	; 5
    2080:	70 e0       	ldi	r23, 0x00	; 0
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
							moveOnDirection(100,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);	//vracam se nazad
    208a:	84 e6       	ldi	r24, 0x64	; 100
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	61 e0       	ldi	r22, 0x01	; 1
    2090:	70 e0       	ldi	r23, 0x00	; 0
    2092:	44 ec       	ldi	r20, 0xC4	; 196
    2094:	59 e0       	ldi	r21, 0x09	; 9
    2096:	23 e0       	ldi	r18, 0x03	; 3
    2098:	00 e0       	ldi	r16, 0x00	; 0
    209a:	10 e0       	ldi	r17, 0x00	; 0
    209c:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						}											
					
						if(tacticCombination == 3)	//ako je usao u slucaju sudara menjam mu taktiku
    20a0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    20a2:	83 30       	cpi	r24, 0x03	; 3
    20a4:	11 f4       	brne	.+4      	; 0x20aa <redSide+0x5c0>
							tacticCombination = 1;
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	8a 8f       	std	Y+26, r24	; 0x1a
						if(tacticCombination == 2)
    20aa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    20ac:	82 30       	cpi	r24, 0x02	; 2
    20ae:	09 f4       	brne	.+2      	; 0x20b2 <redSide+0x5c8>
							tacticCombination = 0;
    20b0:	1a 8e       	std	Y+26, r1	; 0x1a
							
						setUgao(268);				//okrece se da moze da pokupi mapu
    20b2:	8c e0       	ldi	r24, 0x0C	; 12
    20b4:	91 e0       	ldi	r25, 0x01	; 1
    20b6:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
						saljiKinezima(MOTOR_SKUPLJAC_MAPE,150);
    20ba:	83 e4       	ldi	r24, 0x43	; 67
    20bc:	66 e9       	ldi	r22, 0x96	; 150
    20be:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						moveOnDirection(1000,-1,LOWSPEED,ALL_DETECTIONS_OFF,TWO_SECOND_BREAK_TIME); //prilazi mapi
    20c2:	88 ee       	ldi	r24, 0xE8	; 232
    20c4:	93 e0       	ldi	r25, 0x03	; 3
    20c6:	6f ef       	ldi	r22, 0xFF	; 255
    20c8:	7f ef       	ldi	r23, 0xFF	; 255
    20ca:	48 ee       	ldi	r20, 0xE8	; 232
    20cc:	53 e0       	ldi	r21, 0x03	; 3
    20ce:	23 e0       	ldi	r18, 0x03	; 3
    20d0:	00 ed       	ldi	r16, 0xD0	; 208
    20d2:	17 e0       	ldi	r17, 0x07	; 7
    20d4:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						pokupiMapu();	
    20d8:	0e 94 01 04 	call	0x802	; 0x802 <pokupiMapu>
						
						moveOnDirection(320,1,NORMALSPEED,TASTER_SUDAR_ON,NO_BREAK_TIME);
    20dc:	80 e4       	ldi	r24, 0x40	; 64
    20de:	91 e0       	ldi	r25, 0x01	; 1
    20e0:	61 e0       	ldi	r22, 0x01	; 1
    20e2:	70 e0       	ldi	r23, 0x00	; 0
    20e4:	44 ec       	ldi	r20, 0xC4	; 196
    20e6:	59 e0       	ldi	r21, 0x09	; 9
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	00 e0       	ldi	r16, 0x00	; 0
    20ec:	10 e0       	ldi	r17, 0x00	; 0
    20ee:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						saljiKinezima(MOTOR_SKUPLJAC_MAPE,150);	//ponovo aktivira aktuator da se ne bi mapa vukla po podu
    20f2:	83 e4       	ldi	r24, 0x43	; 67
    20f4:	66 e9       	ldi	r22, 0x96	; 150
    20f6:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						pauza_ms(600);
    20fa:	68 e5       	ldi	r22, 0x58	; 88
    20fc:	72 e0       	ldi	r23, 0x02	; 2
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						saljiKinezima(MOTOR_SKUPLJAC_MAPE,0);
    2106:	83 e4       	ldi	r24, 0x43	; 67
    2108:	60 e0       	ldi	r22, 0x00	; 0
    210a:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						
						if(totemCollisionFlag == TRUE)	//indikacija da nije pokupio drugi deo naseg totema
    210e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2110:	88 23       	and	r24, r24
    2112:	29 f4       	brne	.+10     	; 0x211e <redSide+0x634>
						{
							state = RIDE_THE_LIGHTING;	//ide da kupi drugi deo naseg totema
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	8f 8f       	std	Y+31, r24	; 0x1f
							newPosition = 3;
    2118:	83 e0       	ldi	r24, 0x03	; 3
    211a:	8c 8f       	std	Y+28, r24	; 0x1c
    211c:	27 cd       	rjmp	.-1458   	; 0x1b6c <redSide+0x82>
							
							break;	
						}
						
						if(tacticCombination != 0)	
    211e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2120:	88 23       	and	r24, r24
    2122:	31 f0       	breq	.+12     	; 0x2130 <redSide+0x646>
						{
							newPosition = 7;	//ide da krade
    2124:	87 e0       	ldi	r24, 0x07	; 7
    2126:	8c 8f       	std	Y+28, r24	; 0x1c
							state = FAST_AND_FURIOUS;
    2128:	1f 8e       	std	Y+31, r1	; 0x1f
							detectionFlags = ALL_DETECTIONS_ON;
    212a:	82 e0       	ldi	r24, 0x02	; 2
    212c:	8f 8b       	std	Y+23, r24	; 0x17
    212e:	1e cd       	rjmp	.-1476   	; 0x1b6c <redSide+0x82>
							break;
						}
						
						otvoriSkupljac();	
    2130:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <otvoriSkupljac>
    2134:	88 c1       	rjmp	.+784    	; 0x2446 <redSide+0x95c>
					}//end position if
					
					/************************************************************************/
					/*  NALAZI SE ISPRED PROTIVNICKOG TOTEMA                                */
					/************************************************************************/
					if(position == 4)
    2136:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2138:	84 30       	cpi	r24, 0x04	; 4
    213a:	09 f0       	breq	.+2      	; 0x213e <redSide+0x654>
    213c:	3f c0       	rjmp	.+126    	; 0x21bc <redSide+0x6d2>
					{
						setUgao(295);   //nalazi se ispred protivnickog totema, okrece se da bi mu mogao prici
    213e:	87 e2       	ldi	r24, 0x27	; 39
    2140:	91 e0       	ldi	r25, 0x01	; 1
    2142:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
								//245
						moveOnDirection(140,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
    2146:	8c e8       	ldi	r24, 0x8C	; 140
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	61 e0       	ldi	r22, 0x01	; 1
    214c:	70 e0       	ldi	r23, 0x00	; 0
    214e:	44 ec       	ldi	r20, 0xC4	; 196
    2150:	59 e0       	ldi	r21, 0x09	; 9
    2152:	23 e0       	ldi	r18, 0x03	; 3
    2154:	00 e0       	ldi	r16, 0x00	; 0
    2156:	10 e0       	ldi	r17, 0x00	; 0
    2158:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						skupljacCim(MOTOR_SKUPLJAC_DESNI,35);	//brani se od onog sugavog diska na uglu
    215c:	82 e4       	ldi	r24, 0x42	; 66
    215e:	63 e2       	ldi	r22, 0x23	; 35
    2160:	0e 94 16 04 	call	0x82c	; 0x82c <skupljacCim>
										//95
						otvoriSkupljac();
    2164:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <otvoriSkupljac>
						moveOnDirection(95,1,NORMALSPEED,ALL_DETECTIONS_OFF,TWO_SECOND_BREAK_TIME);	//prilazi skroz
    2168:	8f e5       	ldi	r24, 0x5F	; 95
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	61 e0       	ldi	r22, 0x01	; 1
    216e:	70 e0       	ldi	r23, 0x00	; 0
    2170:	44 ec       	ldi	r20, 0xC4	; 196
    2172:	59 e0       	ldi	r21, 0x09	; 9
    2174:	23 e0       	ldi	r18, 0x03	; 3
    2176:	00 ed       	ldi	r16, 0xD0	; 208
    2178:	17 e0       	ldi	r17, 0x07	; 7
    217a:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						setUgao(345);  //cisti sa totema  195
    217e:	89 e5       	ldi	r24, 0x59	; 89
    2180:	91 e0       	ldi	r25, 0x01	; 1
    2182:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
						moveOnDirection(150,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);	//kupi
    2186:	86 e9       	ldi	r24, 0x96	; 150
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	61 e0       	ldi	r22, 0x01	; 1
    218c:	70 e0       	ldi	r23, 0x00	; 0
    218e:	44 ec       	ldi	r20, 0xC4	; 196
    2190:	59 e0       	ldi	r21, 0x09	; 9
    2192:	23 e0       	ldi	r18, 0x03	; 3
    2194:	00 e0       	ldi	r16, 0x00	; 0
    2196:	10 e0       	ldi	r17, 0x00	; 0
    2198:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						setUgao(15); //165	//ispravlja se
    219c:	8f e0       	ldi	r24, 0x0F	; 15
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
						moveOnDirection(300,1,NORMALSPEED,ALL_DETECTIONS_ON,NO_BREAK_TIME); //ide malo napred ka startu
    21a4:	8c e2       	ldi	r24, 0x2C	; 44
    21a6:	91 e0       	ldi	r25, 0x01	; 1
    21a8:	61 e0       	ldi	r22, 0x01	; 1
    21aa:	70 e0       	ldi	r23, 0x00	; 0
    21ac:	44 ec       	ldi	r20, 0xC4	; 196
    21ae:	59 e0       	ldi	r21, 0x09	; 9
    21b0:	22 e0       	ldi	r18, 0x02	; 2
    21b2:	00 e0       	ldi	r16, 0x00	; 0
    21b4:	10 e0       	ldi	r17, 0x00	; 0
    21b6:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
    21ba:	45 c1       	rjmp	.+650    	; 0x2446 <redSide+0x95c>
					}//end position if
					
					/************************************************************************/
					/*   SKORO PA ISPRED NASEG STARTA- KABINE                               */
					/************************************************************************/
					if(position == 5)
    21bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21be:	85 30       	cpi	r24, 0x05	; 5
    21c0:	d1 f5       	brne	.+116    	; 0x2236 <redSide+0x74c>
					{
						if(tasSkupljacDesniOtvoren() || tasSkupljacLeviOtvoren())	//u slucaju branja protivnickog totema 
    21c2:	0e 94 30 37 	call	0x6e60	; 0x6e60 <tasSkupljacDesniOtvoren>
    21c6:	88 23       	and	r24, r24
    21c8:	21 f4       	brne	.+8      	; 0x21d2 <redSide+0x6e8>
    21ca:	0e 94 18 37 	call	0x6e30	; 0x6e30 <tasSkupljacLeviOtvoren>
    21ce:	88 23       	and	r24, r24
    21d0:	b9 f0       	breq	.+46     	; 0x2200 <redSide+0x716>
						{
							saljiKinezima(MOTOR_SKUPLJAC_LEVI,35);	//delimicno zatvara govna pre ulaska u start - kabinu
    21d2:	81 e4       	ldi	r24, 0x41	; 65
    21d4:	63 e2       	ldi	r22, 0x23	; 35
    21d6:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
							saljiKinezima(MOTOR_SKUPLJAC_DESNI,135);
    21da:	82 e4       	ldi	r24, 0x42	; 66
    21dc:	67 e8       	ldi	r22, 0x87	; 135
    21de:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
							pauza_ms(110);
    21e2:	6e e6       	ldi	r22, 0x6E	; 110
    21e4:	70 e0       	ldi	r23, 0x00	; 0
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
							saljiKinezima(MOTOR_SKUPLJAC_LEVI,0);
    21ee:	81 e4       	ldi	r24, 0x41	; 65
    21f0:	60 e0       	ldi	r22, 0x00	; 0
    21f2:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
							saljiKinezima(MOTOR_SKUPLJAC_DESNI,0);
    21f6:	82 e4       	ldi	r24, 0x42	; 66
    21f8:	60 e0       	ldi	r22, 0x00	; 0
    21fa:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
    21fe:	23 c1       	rjmp	.+582    	; 0x2446 <redSide+0x95c>
						}else         //u slucaju kradje sa protivnickog cilja
						{
							saljiKinezima(MOTOR_SKUPLJAC_LEVI,135);	//delimicno otvara govna pre ulaska u start - kabinu
    2200:	81 e4       	ldi	r24, 0x41	; 65
    2202:	67 e8       	ldi	r22, 0x87	; 135
    2204:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
							saljiKinezima(MOTOR_SKUPLJAC_DESNI,35);
    2208:	82 e4       	ldi	r24, 0x42	; 66
    220a:	63 e2       	ldi	r22, 0x23	; 35
    220c:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
							pauza_ms(170);
    2210:	6a ea       	ldi	r22, 0xAA	; 170
    2212:	70 e0       	ldi	r23, 0x00	; 0
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
							PORTG = 0x01;
    221c:	e5 e6       	ldi	r30, 0x65	; 101
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	80 83       	st	Z, r24
							saljiKinezima(MOTOR_SKUPLJAC_LEVI,0);
    2224:	81 e4       	ldi	r24, 0x41	; 65
    2226:	60 e0       	ldi	r22, 0x00	; 0
    2228:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
							saljiKinezima(MOTOR_SKUPLJAC_DESNI,0);	
    222c:	82 e4       	ldi	r24, 0x42	; 66
    222e:	60 e0       	ldi	r22, 0x00	; 0
    2230:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
    2234:	08 c1       	rjmp	.+528    	; 0x2446 <redSide+0x95c>
					}//end position if
					
					/************************************************************************/
					/*	U STARTU                                                            */
					/************************************************************************/
					if(position == 6)
    2236:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2238:	86 30       	cpi	r24, 0x06	; 6
    223a:	81 f5       	brne	.+96     	; 0x229c <redSide+0x7b2>
					{
						
						saljiKinezima(MOTOR_SKUPLJAC_DESNI,50);
    223c:	82 e4       	ldi	r24, 0x42	; 66
    223e:	62 e3       	ldi	r22, 0x32	; 50
    2240:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						saljiKinezima(MOTOR_SKUPLJAC_LEVI,150);
    2244:	81 e4       	ldi	r24, 0x41	; 65
    2246:	66 e9       	ldi	r22, 0x96	; 150
    2248:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						pauza_ms(50);
    224c:	62 e3       	ldi	r22, 0x32	; 50
    224e:	70 e0       	ldi	r23, 0x00	; 0
    2250:	80 e0       	ldi	r24, 0x00	; 0
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						saljiKinezima(MOTOR_SKUPLJAC_LEVI,0);
    2258:	81 e4       	ldi	r24, 0x41	; 65
    225a:	60 e0       	ldi	r22, 0x00	; 0
    225c:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						saljiKinezima(MOTOR_SKUPLJAC_DESNI,0);
    2260:	82 e4       	ldi	r24, 0x42	; 66
    2262:	60 e0       	ldi	r22, 0x00	; 0
    2264:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						
						if((tacticCombination == 2) || (tacticCombination == 3))	//ide na mapu
    2268:	8a 8d       	ldd	r24, Y+26	; 0x1a
    226a:	82 30       	cpi	r24, 0x02	; 2
    226c:	21 f0       	breq	.+8      	; 0x2276 <redSide+0x78c>
    226e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2270:	83 30       	cpi	r24, 0x03	; 3
    2272:	09 f0       	breq	.+2      	; 0x2276 <redSide+0x78c>
    2274:	e8 c0       	rjmp	.+464    	; 0x2446 <redSide+0x95c>
						{
							moveOnDirection(220,-1,NORMALSPEED,ALL_DETECTIONS_ON,NO_BREAK_TIME);
    2276:	8c ed       	ldi	r24, 0xDC	; 220
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	6f ef       	ldi	r22, 0xFF	; 255
    227c:	7f ef       	ldi	r23, 0xFF	; 255
    227e:	44 ec       	ldi	r20, 0xC4	; 196
    2280:	59 e0       	ldi	r21, 0x09	; 9
    2282:	22 e0       	ldi	r18, 0x02	; 2
    2284:	00 e0       	ldi	r16, 0x00	; 0
    2286:	10 e0       	ldi	r17, 0x00	; 0
    2288:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
							zatvoriSkupljac();
    228c:	0e 94 c1 03 	call	0x782	; 0x782 <zatvoriSkupljac>
							
							newPosition = 1;
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	8c 8f       	std	Y+28, r24	; 0x1c
							state = RIDE_THE_LIGHTING;
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	8f 8f       	std	Y+31, r24	; 0x1f
							collisionCounter = 0;
    2298:	1b 8e       	std	Y+27, r1	; 0x1b
    229a:	68 cc       	rjmp	.-1840   	; 0x1b6c <redSide+0x82>
					}//end position if
					
					/************************************************************************/
					/*	IDE NA DRUGI KRAJ STOLA, PRE KRADJE                                 */
					/************************************************************************/
					if(position == 7)
    229c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    229e:	87 30       	cpi	r24, 0x07	; 7
    22a0:	29 f4       	brne	.+10     	; 0x22ac <redSide+0x7c2>
					{
						zatvoriSkupljac();
    22a2:	0e 94 c1 03 	call	0x782	; 0x782 <zatvoriSkupljac>
						detectionFlags = ALL_DETECTIONS_ON;
    22a6:	82 e0       	ldi	r24, 0x02	; 2
    22a8:	8f 8b       	std	Y+23, r24	; 0x17
    22aa:	cd c0       	rjmp	.+410    	; 0x2446 <redSide+0x95c>
					}
					
					/************************************************************************/
					/*		ISPRED PROTIVNICKOG BRODA                                       */
					/************************************************************************/
					if(position == 8)
    22ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22ae:	88 30       	cpi	r24, 0x08	; 8
    22b0:	09 f0       	breq	.+2      	; 0x22b4 <redSide+0x7ca>
    22b2:	c9 c0       	rjmp	.+402    	; 0x2446 <redSide+0x95c>
					{
						setUgao(180);	//okrecem se ka protivnickom brodu
    22b4:	84 eb       	ldi	r24, 0xB4	; 180
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
						otvoriSkupljac();	//otvaram govna
    22bc:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <otvoriSkupljac>
						
						moveOnDirection(160,1,NORMALSPEED,ALL_DETECTIONS_ON,NO_BREAK_TIME);
    22c0:	80 ea       	ldi	r24, 0xA0	; 160
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	61 e0       	ldi	r22, 0x01	; 1
    22c6:	70 e0       	ldi	r23, 0x00	; 0
    22c8:	44 ec       	ldi	r20, 0xC4	; 196
    22ca:	59 e0       	ldi	r21, 0x09	; 9
    22cc:	22 e0       	ldi	r18, 0x02	; 2
    22ce:	00 e0       	ldi	r16, 0x00	; 0
    22d0:	10 e0       	ldi	r17, 0x00	; 0
    22d2:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						saljiKinezima(MOTOR_SKUPLJAC_DESNI,150);
    22d6:	82 e4       	ldi	r24, 0x42	; 66
    22d8:	66 e9       	ldi	r22, 0x96	; 150
    22da:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						saljiKinezima(MOTOR_SKUPLJAC_LEVI,50);
    22de:	81 e4       	ldi	r24, 0x41	; 65
    22e0:	62 e3       	ldi	r22, 0x32	; 50
    22e2:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						pauza_ms(70);
    22e6:	66 e4       	ldi	r22, 0x46	; 70
    22e8:	70 e0       	ldi	r23, 0x00	; 0
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						otvoriSkupljac();
    22f2:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <otvoriSkupljac>
						moveOnDirection(100,1,NORMALSPEED,ALL_DETECTIONS_OFF,TWO_SECOND_BREAK_TIME);
    22f6:	84 e6       	ldi	r24, 0x64	; 100
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	61 e0       	ldi	r22, 0x01	; 1
    22fc:	70 e0       	ldi	r23, 0x00	; 0
    22fe:	44 ec       	ldi	r20, 0xC4	; 196
    2300:	59 e0       	ldi	r21, 0x09	; 9
    2302:	23 e0       	ldi	r18, 0x03	; 3
    2304:	00 ed       	ldi	r16, 0xD0	; 208
    2306:	17 e0       	ldi	r17, 0x07	; 7
    2308:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						saljiKinezima(MOTOR_SKUPLJAC_DESNI,150);
    230c:	82 e4       	ldi	r24, 0x42	; 66
    230e:	66 e9       	ldi	r22, 0x96	; 150
    2310:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						saljiKinezima(MOTOR_SKUPLJAC_LEVI,50);
    2314:	81 e4       	ldi	r24, 0x41	; 65
    2316:	62 e3       	ldi	r22, 0x32	; 50
    2318:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						pauza_ms(80);
    231c:	60 e5       	ldi	r22, 0x50	; 80
    231e:	70 e0       	ldi	r23, 0x00	; 0
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						otvoriSkupljac();
    2328:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <otvoriSkupljac>
						moveOnDirection(90,1,NORMALSPEED,ALL_DETECTIONS_OFF,TWO_SECOND_BREAK_TIME);
    232c:	8a e5       	ldi	r24, 0x5A	; 90
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	61 e0       	ldi	r22, 0x01	; 1
    2332:	70 e0       	ldi	r23, 0x00	; 0
    2334:	44 ec       	ldi	r20, 0xC4	; 196
    2336:	59 e0       	ldi	r21, 0x09	; 9
    2338:	23 e0       	ldi	r18, 0x03	; 3
    233a:	00 ed       	ldi	r16, 0xD0	; 208
    233c:	17 e0       	ldi	r17, 0x07	; 7
    233e:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						saljiKinezima(MOTOR_SKUPLJAC_DESNI,150);
    2342:	82 e4       	ldi	r24, 0x42	; 66
    2344:	66 e9       	ldi	r22, 0x96	; 150
    2346:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						saljiKinezima(MOTOR_SKUPLJAC_LEVI,50);
    234a:	81 e4       	ldi	r24, 0x41	; 65
    234c:	62 e3       	ldi	r22, 0x32	; 50
    234e:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						pauza_ms(70);
    2352:	66 e4       	ldi	r22, 0x46	; 70
    2354:	70 e0       	ldi	r23, 0x00	; 0
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						otvoriSkupljac();
    235e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <otvoriSkupljac>
						moveOnDirection(40,1,NORMALSPEED,ALL_DETECTIONS_OFF,TWO_SECOND_BREAK_TIME);
    2362:	88 e2       	ldi	r24, 0x28	; 40
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	61 e0       	ldi	r22, 0x01	; 1
    2368:	70 e0       	ldi	r23, 0x00	; 0
    236a:	44 ec       	ldi	r20, 0xC4	; 196
    236c:	59 e0       	ldi	r21, 0x09	; 9
    236e:	23 e0       	ldi	r18, 0x03	; 3
    2370:	00 ed       	ldi	r16, 0xD0	; 208
    2372:	17 e0       	ldi	r17, 0x07	; 7
    2374:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>

						saljiKinezima(MOTOR_SKUPLJAC_DESNI,140);
    2378:	82 e4       	ldi	r24, 0x42	; 66
    237a:	6c e8       	ldi	r22, 0x8C	; 140
    237c:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						saljiKinezima(MOTOR_SKUPLJAC_LEVI,40);
    2380:	81 e4       	ldi	r24, 0x41	; 65
    2382:	68 e2       	ldi	r22, 0x28	; 40
    2384:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						pauza_ms(350);
    2388:	6e e5       	ldi	r22, 0x5E	; 94
    238a:	71 e0       	ldi	r23, 0x01	; 1
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						saljiKinezima(MOTOR_SKUPLJAC_LEVI,0);
    2394:	81 e4       	ldi	r24, 0x41	; 65
    2396:	60 e0       	ldi	r22, 0x00	; 0
    2398:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						saljiKinezima(MOTOR_SKUPLJAC_DESNI,0);
    239c:	82 e4       	ldi	r24, 0x42	; 66
    239e:	60 e0       	ldi	r22, 0x00	; 0
    23a0:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						
						pauza_ms(10);
    23a4:	6a e0       	ldi	r22, 0x0A	; 10
    23a6:	70 e0       	ldi	r23, 0x00	; 0
    23a8:	80 e0       	ldi	r24, 0x00	; 0
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						saljiKinezima(MOTOR_SKUPLJAC_LEVI,5);
    23b0:	81 e4       	ldi	r24, 0x41	; 65
    23b2:	65 e0       	ldi	r22, 0x05	; 5
    23b4:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						saljiKinezima(MOTOR_SKUPLJAC_DESNI,105);
    23b8:	82 e4       	ldi	r24, 0x42	; 66
    23ba:	69 e6       	ldi	r22, 0x69	; 105
    23bc:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						moveOnDirection(350,-1,NORMALSPEED,TASTER_SUDAR_ON,NO_BREAK_TIME);	//izlazim iz broda  290
    23c0:	8e e5       	ldi	r24, 0x5E	; 94
    23c2:	91 e0       	ldi	r25, 0x01	; 1
    23c4:	6f ef       	ldi	r22, 0xFF	; 255
    23c6:	7f ef       	ldi	r23, 0xFF	; 255
    23c8:	44 ec       	ldi	r20, 0xC4	; 196
    23ca:	59 e0       	ldi	r21, 0x09	; 9
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	00 e0       	ldi	r16, 0x00	; 0
    23d0:	10 e0       	ldi	r17, 0x00	; 0
    23d2:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
    23d6:	17 c0       	rjmp	.+46     	; 0x2406 <redSide+0x91c>
						
						while(gotoXY(2700,readY()+50,1,NORMALSPEED,NORMALPRECISION,ALL_DETECTIONS_ON))	//idem na poziciju odakle krecem ka svojoj kabini- startu
						{
							pauza_ms(5);
    23d8:	65 e0       	ldi	r22, 0x05	; 5
    23da:	70 e0       	ldi	r23, 0x00	; 0
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
							moveOnDirection(10,-1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
    23e4:	8a e0       	ldi	r24, 0x0A	; 10
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	6f ef       	ldi	r22, 0xFF	; 255
    23ea:	7f ef       	ldi	r23, 0xFF	; 255
    23ec:	44 ec       	ldi	r20, 0xC4	; 196
    23ee:	59 e0       	ldi	r21, 0x09	; 9
    23f0:	23 e0       	ldi	r18, 0x03	; 3
    23f2:	00 e0       	ldi	r16, 0x00	; 0
    23f4:	10 e0       	ldi	r17, 0x00	; 0
    23f6:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
							pauza_ms(1000);
    23fa:	68 ee       	ldi	r22, 0xE8	; 232
    23fc:	73 e0       	ldi	r23, 0x03	; 3
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						pauza_ms(10);
						saljiKinezima(MOTOR_SKUPLJAC_LEVI,5);
						saljiKinezima(MOTOR_SKUPLJAC_DESNI,105);
						moveOnDirection(350,-1,NORMALSPEED,TASTER_SUDAR_ON,NO_BREAK_TIME);	//izlazim iz broda  290
						
						while(gotoXY(2700,readY()+50,1,NORMALSPEED,NORMALPRECISION,ALL_DETECTIONS_ON))	//idem na poziciju odakle krecem ka svojoj kabini- startu
    2406:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <readY>
    240a:	9c 01       	movw	r18, r24
    240c:	2e 5c       	subi	r18, 0xCE	; 206
    240e:	3f 4f       	sbci	r19, 0xFF	; 255
    2410:	8c e8       	ldi	r24, 0x8C	; 140
    2412:	9a e0       	ldi	r25, 0x0A	; 10
    2414:	b9 01       	movw	r22, r18
    2416:	41 e0       	ldi	r20, 0x01	; 1
    2418:	24 ec       	ldi	r18, 0xC4	; 196
    241a:	39 e0       	ldi	r19, 0x09	; 9
    241c:	05 e0       	ldi	r16, 0x05	; 5
    241e:	10 e0       	ldi	r17, 0x00	; 0
    2420:	ee 24       	eor	r14, r14
    2422:	68 94       	set
    2424:	e1 f8       	bld	r14, 1
    2426:	0e 94 bd 2c 	call	0x597a	; 0x597a <gotoXY>
    242a:	88 23       	and	r24, r24
    242c:	a9 f6       	brne	.-86     	; 0x23d8 <redSide+0x8ee>
						{
							pauza_ms(5);
							moveOnDirection(10,-1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
							pauza_ms(1000);
						}
						saljiKinezima(MOTOR_SKUPLJAC_LEVI,0);
    242e:	81 e4       	ldi	r24, 0x41	; 65
    2430:	60 e0       	ldi	r22, 0x00	; 0
    2432:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						saljiKinezima(MOTOR_SKUPLJAC_DESNI,0);
    2436:	82 e4       	ldi	r24, 0x42	; 66
    2438:	60 e0       	ldi	r22, 0x00	; 0
    243a:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						state = FAST_AND_FURIOUS;
    243e:	1f 8e       	std	Y+31, r1	; 0x1f
						newPosition = 5;
    2440:	85 e0       	ldi	r24, 0x05	; 5
    2442:	8c 8f       	std	Y+28, r24	; 0x1c
    2444:	93 cb       	rjmp	.-2266   	; 0x1b6c <redSide+0x82>
		{
			/************************************************************************/
			/*	GLAVNE PUTANJE ZA MEC                                               */
			/************************************************************************/	
			case FAST_AND_FURIOUS:
				for(position = newPosition; position < brojPozicijaPlavo; position++)
    2446:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2448:	8f 5f       	subi	r24, 0xFF	; 255
    244a:	8d 8f       	std	Y+29, r24	; 0x1d
    244c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    244e:	89 30       	cpi	r24, 0x09	; 9
    2450:	08 f4       	brcc	.+2      	; 0x2454 <redSide+0x96a>
    2452:	a4 cb       	rjmp	.-2232   	; 0x1b9c <redSide+0xb2>
    2454:	8b cb       	rjmp	.-2282   	; 0x1b6c <redSide+0x82>
			
			/************************************************************************/
			/*		ALTERNATIVNE I POMOCNE KRETNJE                                  */
			/************************************************************************/	
			case RIDE_THE_LIGHTING:
				for(position = newPosition; position<brojPozicijaPlavoAlt;position++)
    2456:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2458:	8d 8f       	std	Y+29, r24	; 0x1d
    245a:	5a c1       	rjmp	.+692    	; 0x2710 <redSide+0xc26>
				{
					if(gotoXY(pgm_read_word(&pathXRedAlt[position]),pgm_read_word(&pathYRedAlt[position]),pgm_read_byte(&directionRedAlt[position]),NORMALSPEED,NORMALPRECISION,detectionFlags))
    245c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    245e:	88 2f       	mov	r24, r24
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	88 0f       	add	r24, r24
    2464:	99 1f       	adc	r25, r25
    2466:	8b 5b       	subi	r24, 0xBB	; 187
    2468:	9e 4f       	sbci	r25, 0xFE	; 254
    246a:	9b 87       	std	Y+11, r25	; 0x0b
    246c:	8a 87       	std	Y+10, r24	; 0x0a
    246e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2470:	9b 85       	ldd	r25, Y+11	; 0x0b
    2472:	fc 01       	movw	r30, r24
    2474:	85 91       	lpm	r24, Z+
    2476:	94 91       	lpm	r25, Z+
    2478:	99 87       	std	Y+9, r25	; 0x09
    247a:	88 87       	std	Y+8, r24	; 0x08
    247c:	fb 87       	std	Y+11, r31	; 0x0b
    247e:	ea 87       	std	Y+10, r30	; 0x0a
    2480:	88 85       	ldd	r24, Y+8	; 0x08
    2482:	99 85       	ldd	r25, Y+9	; 0x09
    2484:	bc 01       	movw	r22, r24
    2486:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2488:	88 2f       	mov	r24, r24
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	88 0f       	add	r24, r24
    248e:	99 1f       	adc	r25, r25
    2490:	83 5b       	subi	r24, 0xB3	; 179
    2492:	9e 4f       	sbci	r25, 0xFE	; 254
    2494:	9f 83       	std	Y+7, r25	; 0x07
    2496:	8e 83       	std	Y+6, r24	; 0x06
    2498:	8e 81       	ldd	r24, Y+6	; 0x06
    249a:	9f 81       	ldd	r25, Y+7	; 0x07
    249c:	fc 01       	movw	r30, r24
    249e:	85 91       	lpm	r24, Z+
    24a0:	94 91       	lpm	r25, Z+
    24a2:	9d 83       	std	Y+5, r25	; 0x05
    24a4:	8c 83       	std	Y+4, r24	; 0x04
    24a6:	ff 83       	std	Y+7, r31	; 0x07
    24a8:	ee 83       	std	Y+6, r30	; 0x06
    24aa:	8c 81       	ldd	r24, Y+4	; 0x04
    24ac:	9d 81       	ldd	r25, Y+5	; 0x05
    24ae:	ac 01       	movw	r20, r24
    24b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24b2:	88 2f       	mov	r24, r24
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	8b 5a       	subi	r24, 0xAB	; 171
    24b8:	9e 4f       	sbci	r25, 0xFE	; 254
    24ba:	9b 83       	std	Y+3, r25	; 0x03
    24bc:	8a 83       	std	Y+2, r24	; 0x02
    24be:	ea 81       	ldd	r30, Y+2	; 0x02
    24c0:	fb 81       	ldd	r31, Y+3	; 0x03
    24c2:	84 91       	lpm	r24, Z+
    24c4:	89 83       	std	Y+1, r24	; 0x01
    24c6:	89 81       	ldd	r24, Y+1	; 0x01
    24c8:	28 2f       	mov	r18, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	ba 01       	movw	r22, r20
    24ce:	42 2f       	mov	r20, r18
    24d0:	24 ec       	ldi	r18, 0xC4	; 196
    24d2:	39 e0       	ldi	r19, 0x09	; 9
    24d4:	05 e0       	ldi	r16, 0x05	; 5
    24d6:	10 e0       	ldi	r17, 0x00	; 0
    24d8:	ef 88       	ldd	r14, Y+23	; 0x17
    24da:	0e 94 bd 2c 	call	0x597a	; 0x597a <gotoXY>
    24de:	88 23       	and	r24, r24
    24e0:	61 f0       	breq	.+24     	; 0x24fa <redSide+0xa10>
					{
						state=COLLISION;
    24e2:	82 e0       	ldi	r24, 0x02	; 2
    24e4:	8f 8f       	std	Y+31, r24	; 0x1f
						newPosition = position + 100;
    24e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24e8:	8c 59       	subi	r24, 0x9C	; 156
    24ea:	8c 8f       	std	Y+28, r24	; 0x1c
						speed = NORMALSPEED;
    24ec:	84 ec       	ldi	r24, 0xC4	; 196
    24ee:	99 e0       	ldi	r25, 0x09	; 9
    24f0:	99 8f       	std	Y+25, r25	; 0x19
    24f2:	88 8f       	std	Y+24, r24	; 0x18
						detectionFlags = ALL_DETECTIONS_ON;
    24f4:	82 e0       	ldi	r24, 0x02	; 2
    24f6:	8f 8b       	std	Y+23, r24	; 0x17
    24f8:	39 cb       	rjmp	.-2446   	; 0x1b6c <redSide+0x82>
		
						break;	
					}//end collison if	
					
					detectionFlags = ALL_DETECTIONS_ON;
    24fa:	82 e0       	ldi	r24, 0x02	; 2
    24fc:	8f 8b       	std	Y+23, r24	; 0x17
					speed = NORMALSPEED;
    24fe:	84 ec       	ldi	r24, 0xC4	; 196
    2500:	99 e0       	ldi	r25, 0x09	; 9
    2502:	99 8f       	std	Y+25, r25	; 0x19
    2504:	88 8f       	std	Y+24, r24	; 0x18
					
					/************************************************************************/
					/* POZICIJA BLIZU ZIDA ODAKLE KRECE NA MAPU                            */
					/************************************************************************/
					if(position == 0)
    2506:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2508:	88 23       	and	r24, r24
    250a:	09 f4       	brne	.+2      	; 0x250e <redSide+0xa24>
    250c:	fe c0       	rjmp	.+508    	; 0x270a <redSide+0xc20>
					}//end position if
					
					/************************************************************************/
					/* NALAZI SE ISPRED MAPE PARALELNO SA ZIDOM                             */
					/************************************************************************/
					if(position == 1)
    250e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2510:	81 30       	cpi	r24, 0x01	; 1
    2512:	09 f0       	breq	.+2      	; 0x2516 <redSide+0xa2c>
    2514:	62 c0       	rjmp	.+196    	; 0x25da <redSide+0xaf0>
					{
						moveOnDirection(100,-1,NORMALSPEED,TASTER_SUDAR_ON,NO_BREAK_TIME);
    2516:	84 e6       	ldi	r24, 0x64	; 100
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	6f ef       	ldi	r22, 0xFF	; 255
    251c:	7f ef       	ldi	r23, 0xFF	; 255
    251e:	44 ec       	ldi	r20, 0xC4	; 196
    2520:	59 e0       	ldi	r21, 0x09	; 9
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	00 e0       	ldi	r16, 0x00	; 0
    2526:	10 e0       	ldi	r17, 0x00	; 0
    2528:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						pauza_ms(50);
    252c:	62 e3       	ldi	r22, 0x32	; 50
    252e:	70 e0       	ldi	r23, 0x00	; 0
    2530:	80 e0       	ldi	r24, 0x00	; 0
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						moveOnDirection(100,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
    2538:	84 e6       	ldi	r24, 0x64	; 100
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	61 e0       	ldi	r22, 0x01	; 1
    253e:	70 e0       	ldi	r23, 0x00	; 0
    2540:	44 ec       	ldi	r20, 0xC4	; 196
    2542:	59 e0       	ldi	r21, 0x09	; 9
    2544:	23 e0       	ldi	r18, 0x03	; 3
    2546:	00 e0       	ldi	r16, 0x00	; 0
    2548:	10 e0       	ldi	r17, 0x00	; 0
    254a:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						setUgao(270);
    254e:	8e e0       	ldi	r24, 0x0E	; 14
    2550:	91 e0       	ldi	r25, 0x01	; 1
    2552:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
								//270
						saljiKinezima(MOTOR_SKUPLJAC_MAPE,150);
    2556:	83 e4       	ldi	r24, 0x43	; 67
    2558:	66 e9       	ldi	r22, 0x96	; 150
    255a:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						moveOnDirection(1000,-1,LOWSPEED,ALL_DETECTIONS_OFF,TWO_SECOND_BREAK_TIME);
    255e:	88 ee       	ldi	r24, 0xE8	; 232
    2560:	93 e0       	ldi	r25, 0x03	; 3
    2562:	6f ef       	ldi	r22, 0xFF	; 255
    2564:	7f ef       	ldi	r23, 0xFF	; 255
    2566:	48 ee       	ldi	r20, 0xE8	; 232
    2568:	53 e0       	ldi	r21, 0x03	; 3
    256a:	23 e0       	ldi	r18, 0x03	; 3
    256c:	00 ed       	ldi	r16, 0xD0	; 208
    256e:	17 e0       	ldi	r17, 0x07	; 7
    2570:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						pokupiMapu();
    2574:	0e 94 01 04 	call	0x802	; 0x802 <pokupiMapu>
						
						moveOnDirection(320,1,NORMALSPEED,TASTER_SUDAR_ON,NO_BREAK_TIME);
    2578:	80 e4       	ldi	r24, 0x40	; 64
    257a:	91 e0       	ldi	r25, 0x01	; 1
    257c:	61 e0       	ldi	r22, 0x01	; 1
    257e:	70 e0       	ldi	r23, 0x00	; 0
    2580:	44 ec       	ldi	r20, 0xC4	; 196
    2582:	59 e0       	ldi	r21, 0x09	; 9
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	00 e0       	ldi	r16, 0x00	; 0
    2588:	10 e0       	ldi	r17, 0x00	; 0
    258a:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						saljiKinezima(MOTOR_SKUPLJAC_MAPE,150);	//ponovo aktivira aktuator da se ne bi mapa vukla po podu
    258e:	83 e4       	ldi	r24, 0x43	; 67
    2590:	66 e9       	ldi	r22, 0x96	; 150
    2592:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						pauza_ms(1000);
    2596:	68 ee       	ldi	r22, 0xE8	; 232
    2598:	73 e0       	ldi	r23, 0x03	; 3
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						saljiKinezima(MOTOR_SKUPLJAC_MAPE,0);
    25a2:	83 e4       	ldi	r24, 0x43	; 67
    25a4:	60 e0       	ldi	r22, 0x00	; 0
    25a6:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						
						if(totemCollisionFlag == TRUE)	//ako je drugi deo naseg totema nepokupljen
    25aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25ac:	88 23       	and	r24, r24
    25ae:	39 f4       	brne	.+14     	; 0x25be <redSide+0xad4>
						{
							state = RIDE_THE_LIGHTING;	//IDEM NA POZICIJU ODAKLE SE VRACAM NA DRUGI DEO TOTEMA, NEMA VEZE STO JE DIREKTNO ISPOD OVAKO ZNAM STA RADIM :-)
    25b0:	81 e0       	ldi	r24, 0x01	; 1
    25b2:	8f 8f       	std	Y+31, r24	; 0x1f
							newPosition = 3;
    25b4:	83 e0       	ldi	r24, 0x03	; 3
    25b6:	8c 8f       	std	Y+28, r24	; 0x1c
							detectionFlags = ALL_DETECTIONS_ON;
    25b8:	82 e0       	ldi	r24, 0x02	; 2
    25ba:	8f 8b       	std	Y+23, r24	; 0x17
    25bc:	d7 ca       	rjmp	.-2642   	; 0x1b6c <redSide+0x82>
								
							break;
						}//end totem if	
						
						if(tacticCombination !=0)	//prelazim na kradju
    25be:	8a 8d       	ldd	r24, Y+26	; 0x1a
    25c0:	88 23       	and	r24, r24
    25c2:	39 f0       	breq	.+14     	; 0x25d2 <redSide+0xae8>
						{
							state = FAST_AND_FURIOUS;
    25c4:	1f 8e       	std	Y+31, r1	; 0x1f
							newPosition = 7;
    25c6:	87 e0       	ldi	r24, 0x07	; 7
    25c8:	8c 8f       	std	Y+28, r24	; 0x1c
							detectionFlags = ALL_DETECTIONS_ON;
    25ca:	82 e0       	ldi	r24, 0x02	; 2
    25cc:	8f 8b       	std	Y+23, r24	; 0x17
							tacticCombination = 0;  //PROVERITI
    25ce:	1a 8e       	std	Y+26, r1	; 0x1a
    25d0:	cd ca       	rjmp	.-2662   	; 0x1b6c <redSide+0x82>
							
							break;	
						}//end tactisCombination if
						
						state = FAST_AND_FURIOUS;
    25d2:	1f 8e       	std	Y+31, r1	; 0x1f
						newPosition = 4;
    25d4:	84 e0       	ldi	r24, 0x04	; 4
    25d6:	8c 8f       	std	Y+28, r24	; 0x1c
    25d8:	c9 ca       	rjmp	.-2670   	; 0x1b6c <redSide+0x82>
					}//end position if
					
					/************************************************************************/
					/*	NALAZI SE KOD DRVETA                                                */
					/************************************************************************/
					if(position == 2)
    25da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25dc:	82 30       	cpi	r24, 0x02	; 2
    25de:	09 f0       	breq	.+2      	; 0x25e2 <redSide+0xaf8>
    25e0:	82 c0       	rjmp	.+260    	; 0x26e6 <redSide+0xbfc>
					{
						setUgao(270);	//okrecem se ka mapi
    25e2:	8e e0       	ldi	r24, 0x0E	; 14
    25e4:	91 e0       	ldi	r25, 0x01	; 1
    25e6:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
								//270
						if(gotoXY(readX()+350,readY(),-1,NORMALSPEED,NORMALPRECISION,TASTER_SUDAR_ON))	//pokusava da dodje blizu mape	
    25ea:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <readX>
    25ee:	8c 01       	movw	r16, r24
    25f0:	02 5a       	subi	r16, 0xA2	; 162
    25f2:	1e 4f       	sbci	r17, 0xFE	; 254
    25f4:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <readY>
    25f8:	9c 01       	movw	r18, r24
    25fa:	c8 01       	movw	r24, r16
    25fc:	b9 01       	movw	r22, r18
    25fe:	4f ef       	ldi	r20, 0xFF	; 255
    2600:	24 ec       	ldi	r18, 0xC4	; 196
    2602:	39 e0       	ldi	r19, 0x09	; 9
    2604:	05 e0       	ldi	r16, 0x05	; 5
    2606:	10 e0       	ldi	r17, 0x00	; 0
    2608:	ee 24       	eor	r14, r14
    260a:	0e 94 bd 2c 	call	0x597a	; 0x597a <gotoXY>
    260e:	88 23       	and	r24, r24
    2610:	19 f1       	breq	.+70     	; 0x2658 <redSide+0xb6e>
						{
							pauza_ms(50);
    2612:	62 e3       	ldi	r22, 0x32	; 50
    2614:	70 e0       	ldi	r23, 0x00	; 0
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
							moveOnDirection(70,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);	
    261e:	86 e4       	ldi	r24, 0x46	; 70
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	61 e0       	ldi	r22, 0x01	; 1
    2624:	70 e0       	ldi	r23, 0x00	; 0
    2626:	44 ec       	ldi	r20, 0xC4	; 196
    2628:	59 e0       	ldi	r21, 0x09	; 9
    262a:	23 e0       	ldi	r18, 0x03	; 3
    262c:	00 e0       	ldi	r16, 0x00	; 0
    262e:	10 e0       	ldi	r17, 0x00	; 0
    2630:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
							pauza_ms(300);
    2634:	6c e2       	ldi	r22, 0x2C	; 44
    2636:	71 e0       	ldi	r23, 0x01	; 1
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
							
							if(totemCollisionFlag == TRUE)	//ako je drugi deo naseg totema nepokupljen
    2640:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2642:	88 23       	and	r24, r24
    2644:	49 f4       	brne	.+18     	; 0x2658 <redSide+0xb6e>
							{
								state = RIDE_THE_LIGHTING;	//IDEM NA POZICIJU ODAKLE SE VRACAM NA DRUGI DEO TOTEMA, NEMA VEZE STO JE DIRETNO ISPOD OVAKO ZNAM STA RADIM :-)
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	8f 8f       	std	Y+31, r24	; 0x1f
								newPosition = 3;
    264a:	83 e0       	ldi	r24, 0x03	; 3
    264c:	8c 8f       	std	Y+28, r24	; 0x1c
								detectionFlags = ALL_DETECTIONS_ON;
    264e:	82 e0       	ldi	r24, 0x02	; 2
    2650:	8f 8b       	std	Y+23, r24	; 0x17
								totemCollisionFlag = FALSE;
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	8e 8f       	std	Y+30, r24	; 0x1e
    2656:	8a ca       	rjmp	.-2796   	; 0x1b6c <redSide+0x82>
								break;
							}//end totem if		
						}//end gotoxy If
						
						pauza_ms(50);
    2658:	62 e3       	ldi	r22, 0x32	; 50
    265a:	70 e0       	ldi	r23, 0x00	; 0
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						saljiKinezima(MOTOR_SKUPLJAC_MAPE,SKUPLJAC_MAPE_BRZINA);
    2664:	83 e4       	ldi	r24, 0x43	; 67
    2666:	66 e9       	ldi	r22, 0x96	; 150
    2668:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						moveOnDirection(1000,-1,LOWSPEED,ALL_DETECTIONS_OFF,TWO_SECOND_BREAK_TIME);
    266c:	88 ee       	ldi	r24, 0xE8	; 232
    266e:	93 e0       	ldi	r25, 0x03	; 3
    2670:	6f ef       	ldi	r22, 0xFF	; 255
    2672:	7f ef       	ldi	r23, 0xFF	; 255
    2674:	48 ee       	ldi	r20, 0xE8	; 232
    2676:	53 e0       	ldi	r21, 0x03	; 3
    2678:	23 e0       	ldi	r18, 0x03	; 3
    267a:	00 ed       	ldi	r16, 0xD0	; 208
    267c:	17 e0       	ldi	r17, 0x07	; 7
    267e:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						pokupiMapu();
    2682:	0e 94 01 04 	call	0x802	; 0x802 <pokupiMapu>
						
						moveOnDirection(320,1,NORMALSPEED,TASTER_SUDAR_ON,NO_BREAK_TIME);
    2686:	80 e4       	ldi	r24, 0x40	; 64
    2688:	91 e0       	ldi	r25, 0x01	; 1
    268a:	61 e0       	ldi	r22, 0x01	; 1
    268c:	70 e0       	ldi	r23, 0x00	; 0
    268e:	44 ec       	ldi	r20, 0xC4	; 196
    2690:	59 e0       	ldi	r21, 0x09	; 9
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	00 e0       	ldi	r16, 0x00	; 0
    2696:	10 e0       	ldi	r17, 0x00	; 0
    2698:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						
						saljiKinezima(MOTOR_SKUPLJAC_MAPE,150);	//ponovo aktivira aktuator da se ne bi mapa vukla po podu
    269c:	83 e4       	ldi	r24, 0x43	; 67
    269e:	66 e9       	ldi	r22, 0x96	; 150
    26a0:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						pauza_ms(1000);
    26a4:	68 ee       	ldi	r22, 0xE8	; 232
    26a6:	73 e0       	ldi	r23, 0x03	; 3
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						saljiKinezima(MOTOR_SKUPLJAC_MAPE,0);
    26b0:	83 e4       	ldi	r24, 0x43	; 67
    26b2:	60 e0       	ldi	r22, 0x00	; 0
    26b4:	0e 94 f8 34 	call	0x69f0	; 0x69f0 <saljiKinezima>
						
						if(totemCollisionFlag == TRUE)	//ako je drugi deo naseg totema nepokupljen
    26b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26ba:	88 23       	and	r24, r24
    26bc:	39 f4       	brne	.+14     	; 0x26cc <redSide+0xbe2>
						{
							state = RIDE_THE_LIGHTING;	//IDEM NA POZICIJU ODAKLE SE VRACAM NA DRUGI DEO TOTEMA, NEMA VEZE STO JE DIRETNO ISPOD OVAKO ZNAM STA RADIM :-)
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	8f 8f       	std	Y+31, r24	; 0x1f
							newPosition = 3;
    26c2:	83 e0       	ldi	r24, 0x03	; 3
    26c4:	8c 8f       	std	Y+28, r24	; 0x1c
							detectionFlags = ALL_DETECTIONS_ON;
    26c6:	82 e0       	ldi	r24, 0x02	; 2
    26c8:	8f 8b       	std	Y+23, r24	; 0x17
    26ca:	50 ca       	rjmp	.-2912   	; 0x1b6c <redSide+0x82>
								
							break;
						}//end totem if	
						
						if(tacticCombination !=0)	//prelazim na kradju
    26cc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26ce:	88 23       	and	r24, r24
    26d0:	31 f0       	breq	.+12     	; 0x26de <redSide+0xbf4>
						{
							state = FAST_AND_FURIOUS;
    26d2:	1f 8e       	std	Y+31, r1	; 0x1f
							newPosition = 7;
    26d4:	87 e0       	ldi	r24, 0x07	; 7
    26d6:	8c 8f       	std	Y+28, r24	; 0x1c
							detectionFlags = ALL_DETECTIONS_ON;
    26d8:	82 e0       	ldi	r24, 0x02	; 2
    26da:	8f 8b       	std	Y+23, r24	; 0x17
    26dc:	47 ca       	rjmp	.-2930   	; 0x1b6c <redSide+0x82>
							break;	
						}//end tactisCombination if
						
						state = FAST_AND_FURIOUS;
    26de:	1f 8e       	std	Y+31, r1	; 0x1f
						newPosition = 4;
    26e0:	84 e0       	ldi	r24, 0x04	; 4
    26e2:	8c 8f       	std	Y+28, r24	; 0x1c
    26e4:	43 ca       	rjmp	.-2938   	; 0x1b6c <redSide+0x82>
					}//end position if
					
					/************************************************************************/
					/* NASTAVLJA SA KUPLJENJEM DRUGOG DELA NASEG TOTEMA                     */
					/************************************************************************/
					if(position == 3)
    26e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26e8:	83 30       	cpi	r24, 0x03	; 3
    26ea:	79 f4       	brne	.+30     	; 0x270a <redSide+0xc20>
					{
						setUgao(90);
    26ec:	8a e5       	ldi	r24, 0x5A	; 90
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
								//90
						collisionCounter = 0;
    26f4:	1b 8e       	std	Y+27, r1	; 0x1b
						
						state = FAST_AND_FURIOUS;
    26f6:	1f 8e       	std	Y+31, r1	; 0x1f
						newPosition = 1;
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	8c 8f       	std	Y+28, r24	; 0x1c
						
						speed = NORMALSPEED;
    26fc:	84 ec       	ldi	r24, 0xC4	; 196
    26fe:	99 e0       	ldi	r25, 0x09	; 9
    2700:	99 8f       	std	Y+25, r25	; 0x19
    2702:	88 8f       	std	Y+24, r24	; 0x18
						detectionFlags = ALL_DETECTIONS_ON;
    2704:	82 e0       	ldi	r24, 0x02	; 2
    2706:	8f 8b       	std	Y+23, r24	; 0x17
    2708:	31 ca       	rjmp	.-2974   	; 0x1b6c <redSide+0x82>
			
			/************************************************************************/
			/*		ALTERNATIVNE I POMOCNE KRETNJE                                  */
			/************************************************************************/	
			case RIDE_THE_LIGHTING:
				for(position = newPosition; position<brojPozicijaPlavoAlt;position++)
    270a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    270c:	8f 5f       	subi	r24, 0xFF	; 255
    270e:	8d 8f       	std	Y+29, r24	; 0x1d
    2710:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2712:	84 30       	cpi	r24, 0x04	; 4
    2714:	08 f4       	brcc	.+2      	; 0x2718 <redSide+0xc2e>
    2716:	a2 ce       	rjmp	.-700    	; 0x245c <redSide+0x972>
    2718:	29 ca       	rjmp	.-2990   	; 0x1b6c <redSide+0x82>
			case COLLISION:
			
				/************************************************************************/
				/*		DETEKCIJA ODMAH PRI IZLASKU IZ STARTA                           */
				/************************************************************************/
				if(newPosition == 0)
    271a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    271c:	88 23       	and	r24, r24
    271e:	99 f5       	brne	.+102    	; 0x2786 <redSide+0xc9c>
				{
					if(tasRobotNapredProvera())	//ovde ce uci ako je neko bas brzo doleteo do nas, a posto nam smeta dobice svoje
    2720:	0e 94 60 37 	call	0x6ec0	; 0x6ec0 <tasRobotNapredProvera>
    2724:	88 23       	and	r24, r24
    2726:	f9 f0       	breq	.+62     	; 0x2766 <redSide+0xc7c>
					{
						pauza_ms(10);
    2728:	6a e0       	ldi	r22, 0x0A	; 10
    272a:	70 e0       	ldi	r23, 0x00	; 0
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						moveOnDirection(150,-1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
    2734:	86 e9       	ldi	r24, 0x96	; 150
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	6f ef       	ldi	r22, 0xFF	; 255
    273a:	7f ef       	ldi	r23, 0xFF	; 255
    273c:	44 ec       	ldi	r20, 0xC4	; 196
    273e:	59 e0       	ldi	r21, 0x09	; 9
    2740:	23 e0       	ldi	r18, 0x03	; 3
    2742:	00 e0       	ldi	r16, 0x00	; 0
    2744:	10 e0       	ldi	r17, 0x00	; 0
    2746:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						pauza_ms(500);
    274a:	64 ef       	ldi	r22, 0xF4	; 244
    274c:	71 e0       	ldi	r23, 0x01	; 1
    274e:	80 e0       	ldi	r24, 0x00	; 0
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						
						speed = UPSPEED;	//za guranje, steta sto nemamo 30kg kao neki seljaci
    2756:	88 eb       	ldi	r24, 0xB8	; 184
    2758:	9b e0       	ldi	r25, 0x0B	; 11
    275a:	99 8f       	std	Y+25, r25	; 0x19
    275c:	88 8f       	std	Y+24, r24	; 0x18
						detectionFlags = ALL_DETECTIONS_OFF;
    275e:	83 e0       	ldi	r24, 0x03	; 3
    2760:	8f 8b       	std	Y+23, r24	; 0x17
						state = FAST_AND_FURIOUS;	
    2762:	1f 8e       	std	Y+31, r1	; 0x1f
    2764:	03 ca       	rjmp	.-3066   	; 0x1b6c <redSide+0x82>
						
						break;
					}//end taster if
					
					zatvoriSkupljac();	
    2766:	0e 94 c1 03 	call	0x782	; 0x782 <zatvoriSkupljac>
					pauza_ms(300);
    276a:	6c e2       	ldi	r22, 0x2C	; 44
    276c:	71 e0       	ldi	r23, 0x01	; 1
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
					
					speed = NORMALSPEED+100;
    2776:	88 e2       	ldi	r24, 0x28	; 40
    2778:	9a e0       	ldi	r25, 0x0A	; 10
    277a:	99 8f       	std	Y+25, r25	; 0x19
    277c:	88 8f       	std	Y+24, r24	; 0x18
					detectionFlags = TASTER_SUDAR_ON;
    277e:	1f 8a       	std	Y+23, r1	; 0x17
					
					state = FAST_AND_FURIOUS;	//kupljenje prvog dela totema
    2780:	1f 8e       	std	Y+31, r1	; 0x1f
					newPosition = 0;
    2782:	1c 8e       	std	Y+28, r1	; 0x1c
    2784:	f3 c9       	rjmp	.-3098   	; 0x1b6c <redSide+0x82>
				}//end position if
				
				/************************************************************************/
				/*   SUDAR PRI DOLASKU NA DRUGI KRAJ STOLA PRE KUPLJENJA DRUGOG DELA TOTEMA  */
				/************************************************************************/
				if(newPosition == 1)
    2786:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2788:	81 30       	cpi	r24, 0x01	; 1
    278a:	09 f0       	breq	.+2      	; 0x278e <redSide+0xca4>
    278c:	81 c0       	rjmp	.+258    	; 0x2890 <redSide+0xda6>
				{
					if(++collisionCounter < 3)	//pokusavam 3 puta da prodjem
    278e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2790:	8f 5f       	subi	r24, 0xFF	; 255
    2792:	8b 8f       	std	Y+27, r24	; 0x1b
    2794:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2796:	83 30       	cpi	r24, 0x03	; 3
    2798:	68 f5       	brcc	.+90     	; 0x27f4 <redSide+0xd0a>
					{
						moveOnDirection(50,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
    279a:	82 e3       	ldi	r24, 0x32	; 50
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	61 e0       	ldi	r22, 0x01	; 1
    27a0:	70 e0       	ldi	r23, 0x00	; 0
    27a2:	44 ec       	ldi	r20, 0xC4	; 196
    27a4:	59 e0       	ldi	r21, 0x09	; 9
    27a6:	23 e0       	ldi	r18, 0x03	; 3
    27a8:	00 e0       	ldi	r16, 0x00	; 0
    27aa:	10 e0       	ldi	r17, 0x00	; 0
    27ac:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						pauza_ms(500);
    27b0:	64 ef       	ldi	r22, 0xF4	; 244
    27b2:	71 e0       	ldi	r23, 0x01	; 1
    27b4:	80 e0       	ldi	r24, 0x00	; 0
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						
						detectionFlags = TASTER_SUDAR_ON;
    27bc:	1f 8a       	std	Y+23, r1	; 0x17
						state = FAST_AND_FURIOUS;	//kupljenje drugog dela totema
    27be:	1f 8e       	std	Y+31, r1	; 0x1f
						newPosition = 1;
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	8c 8f       	std	Y+28, r24	; 0x1c
    27c4:	d3 c9       	rjmp	.-3162   	; 0x1b6c <redSide+0x82>
					
					//zatvoriSkupljac();	NEPOTREBNO?	
				
					while(gotoXY(2320,readY(),1,NORMALSPEED,NORMALPRECISION,ALL_DETECTIONS_ON))		//idem na poziciju odakle mogu da krenem na mapu
					{
						pauza_ms(5);
    27c6:	65 e0       	ldi	r22, 0x05	; 5
    27c8:	70 e0       	ldi	r23, 0x00	; 0
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						moveOnDirection(10,-1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
    27d2:	8a e0       	ldi	r24, 0x0A	; 10
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	6f ef       	ldi	r22, 0xFF	; 255
    27d8:	7f ef       	ldi	r23, 0xFF	; 255
    27da:	44 ec       	ldi	r20, 0xC4	; 196
    27dc:	59 e0       	ldi	r21, 0x09	; 9
    27de:	23 e0       	ldi	r18, 0x03	; 3
    27e0:	00 e0       	ldi	r16, 0x00	; 0
    27e2:	10 e0       	ldi	r17, 0x00	; 0
    27e4:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						pauza_ms(700);
    27e8:	6c eb       	ldi	r22, 0xBC	; 188
    27ea:	72 e0       	ldi	r23, 0x02	; 2
    27ec:	80 e0       	ldi	r24, 0x00	; 0
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						break;
					}//end collisionCounter if
					
					//zatvoriSkupljac();	NEPOTREBNO?	
				
					while(gotoXY(2320,readY(),1,NORMALSPEED,NORMALPRECISION,ALL_DETECTIONS_ON))		//idem na poziciju odakle mogu da krenem na mapu
    27f4:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <readY>
    27f8:	9c 01       	movw	r18, r24
    27fa:	80 e1       	ldi	r24, 0x10	; 16
    27fc:	99 e0       	ldi	r25, 0x09	; 9
    27fe:	b9 01       	movw	r22, r18
    2800:	41 e0       	ldi	r20, 0x01	; 1
    2802:	24 ec       	ldi	r18, 0xC4	; 196
    2804:	39 e0       	ldi	r19, 0x09	; 9
    2806:	05 e0       	ldi	r16, 0x05	; 5
    2808:	10 e0       	ldi	r17, 0x00	; 0
    280a:	ee 24       	eor	r14, r14
    280c:	68 94       	set
    280e:	e1 f8       	bld	r14, 1
    2810:	0e 94 bd 2c 	call	0x597a	; 0x597a <gotoXY>
    2814:	88 23       	and	r24, r24
    2816:	b9 f6       	brne	.-82     	; 0x27c6 <redSide+0xcdc>
						pauza_ms(5);
						moveOnDirection(10,-1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
						pauza_ms(700);
					}//end while if
					
					if(totemCollisionFlag == TRUE)	//ako je vec pokupio mapu
    2818:	8e 8d       	ldd	r24, Y+30	; 0x1e
    281a:	88 23       	and	r24, r24
    281c:	41 f5       	brne	.+80     	; 0x286e <redSide+0xd84>
    281e:	06 c0       	rjmp	.+12     	; 0x282c <redSide+0xd42>
					{
						while(gotoXY(2615,readY(),1,NORMALSPEED,NORMALPRECISION,ALL_DETECTIONS_ON))	//ide na poziciju odakle nastavlja dalje
							pauza_ms(500);	
    2820:	64 ef       	ldi	r22, 0xF4	; 244
    2822:	71 e0       	ldi	r23, 0x01	; 1
    2824:	80 e0       	ldi	r24, 0x00	; 0
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						pauza_ms(700);
					}//end while if
					
					if(totemCollisionFlag == TRUE)	//ako je vec pokupio mapu
					{
						while(gotoXY(2615,readY(),1,NORMALSPEED,NORMALPRECISION,ALL_DETECTIONS_ON))	//ide na poziciju odakle nastavlja dalje
    282c:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <readY>
    2830:	9c 01       	movw	r18, r24
    2832:	87 e3       	ldi	r24, 0x37	; 55
    2834:	9a e0       	ldi	r25, 0x0A	; 10
    2836:	b9 01       	movw	r22, r18
    2838:	41 e0       	ldi	r20, 0x01	; 1
    283a:	24 ec       	ldi	r18, 0xC4	; 196
    283c:	39 e0       	ldi	r19, 0x09	; 9
    283e:	05 e0       	ldi	r16, 0x05	; 5
    2840:	10 e0       	ldi	r17, 0x00	; 0
    2842:	ee 24       	eor	r14, r14
    2844:	68 94       	set
    2846:	e1 f8       	bld	r14, 1
    2848:	0e 94 bd 2c 	call	0x597a	; 0x597a <gotoXY>
    284c:	88 23       	and	r24, r24
    284e:	41 f7       	brne	.-48     	; 0x2820 <redSide+0xd36>
							pauza_ms(500);	
						
						if(tacticCombination == 0)
    2850:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2852:	88 23       	and	r24, r24
    2854:	31 f4       	brne	.+12     	; 0x2862 <redSide+0xd78>
						{
							state = FAST_AND_FURIOUS; //totem
    2856:	1f 8e       	std	Y+31, r1	; 0x1f
							newPosition = 4;
    2858:	84 e0       	ldi	r24, 0x04	; 4
    285a:	8c 8f       	std	Y+28, r24	; 0x1c
							otvoriSkupljac();	
    285c:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <otvoriSkupljac>
    2860:	85 c9       	rjmp	.-3318   	; 0x1b6c <redSide+0x82>
						}else
						{
							state = FAST_AND_FURIOUS;//kradja
    2862:	1f 8e       	std	Y+31, r1	; 0x1f
							newPosition = 7;
    2864:	87 e0       	ldi	r24, 0x07	; 7
    2866:	8c 8f       	std	Y+28, r24	; 0x1c
							detectionFlags = ALL_DETECTIONS_ON;
    2868:	82 e0       	ldi	r24, 0x02	; 2
    286a:	8f 8b       	std	Y+23, r24	; 0x17
    286c:	7f c9       	rjmp	.-3330   	; 0x1b6c <redSide+0x82>
						}
							
						break;	
					}
					
					detectionFlags = ALL_DETECTIONS_ON;
    286e:	82 e0       	ldi	r24, 0x02	; 2
    2870:	8f 8b       	std	Y+23, r24	; 0x17
					totemCollisionFlag = TRUE;	//ako je mapa nepokupljena idem na nju
    2872:	1e 8e       	std	Y+30, r1	; 0x1e
					state = FAST_AND_FURIOUS;								
    2874:	1f 8e       	std	Y+31, r1	; 0x1f
					newPosition = 3;
    2876:	83 e0       	ldi	r24, 0x03	; 3
    2878:	8c 8f       	std	Y+28, r24	; 0x1c
					
					if(tacticCombination == 3)
    287a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    287c:	83 30       	cpi	r24, 0x03	; 3
    287e:	11 f4       	brne	.+4      	; 0x2884 <redSide+0xd9a>
						tacticCombination = 1;
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	8a 8f       	std	Y+26, r24	; 0x1a
					if(tacticCombination == 2)
    2884:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2886:	82 30       	cpi	r24, 0x02	; 2
    2888:	09 f0       	breq	.+2      	; 0x288c <redSide+0xda2>
    288a:	70 c9       	rjmp	.-3360   	; 0x1b6c <redSide+0x82>
						tacticCombination = 0;
    288c:	1a 8e       	std	Y+26, r1	; 0x1a
    288e:	6e c9       	rjmp	.-3364   	; 0x1b6c <redSide+0x82>
				}//end position if
				
				/************************************************************************/
				/*	SUDAR KADA IDE KOSIM PUTEM DO DRUGOG DELA TOTEMA                    */
				/************************************************************************/
				if(newPosition == 2)
    2890:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2892:	82 30       	cpi	r24, 0x02	; 2
    2894:	09 f0       	breq	.+2      	; 0x2898 <redSide+0xdae>
    2896:	c3 c0       	rjmp	.+390    	; 0x2a1e <redSide+0xf34>
				{
					if(collisionCounter == 0)	//ako prvi put detektujem
    2898:	8b 8d       	ldd	r24, Y+27	; 0x1b
    289a:	88 23       	and	r24, r24
    289c:	91 f4       	brne	.+36     	; 0x28c2 <redSide+0xdd8>
					{
						pauza_ms(900);
    289e:	64 e8       	ldi	r22, 0x84	; 132
    28a0:	73 e0       	ldi	r23, 0x03	; 3
    28a2:	80 e0       	ldi	r24, 0x00	; 0
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						state = FAST_AND_FURIOUS;
    28aa:	1f 8e       	std	Y+31, r1	; 0x1f
						newPosition = 2;	//pokusavam ponovo sa malom brzinom i bez sharpa
    28ac:	82 e0       	ldi	r24, 0x02	; 2
    28ae:	8c 8f       	std	Y+28, r24	; 0x1c
						speed = LOWSPEED;
    28b0:	88 ee       	ldi	r24, 0xE8	; 232
    28b2:	93 e0       	ldi	r25, 0x03	; 3
    28b4:	99 8f       	std	Y+25, r25	; 0x19
    28b6:	88 8f       	std	Y+24, r24	; 0x18
						detectionFlags = TASTER_SUDAR_ON;
    28b8:	1f 8a       	std	Y+23, r1	; 0x17
						collisionCounter++;
    28ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28bc:	8f 5f       	subi	r24, 0xFF	; 255
    28be:	8b 8f       	std	Y+27, r24	; 0x1b
    28c0:	55 c9       	rjmp	.-3414   	; 0x1b6c <redSide+0x82>
						
						break;
					}
					
					if(++collisionCounter>2)	//ako bas ne moze da dodje
    28c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28c4:	8f 5f       	subi	r24, 0xFF	; 255
    28c6:	8b 8f       	std	Y+27, r24	; 0x1b
    28c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28ca:	83 30       	cpi	r24, 0x03	; 3
    28cc:	08 f4       	brcc	.+2      	; 0x28d0 <redSide+0xde6>
    28ce:	87 c0       	rjmp	.+270    	; 0x29de <redSide+0xef4>
					{
						pauza_ms(500);	
    28d0:	64 ef       	ldi	r22, 0xF4	; 244
    28d2:	71 e0       	ldi	r23, 0x01	; 1
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						
						gotoXY(1620,3320,1,NORMALSPEED,NORMALPRECISION,ALL_DETECTIONS_OFF);	//vracam se tako da bih mogao da kupim mapu
    28dc:	84 e5       	ldi	r24, 0x54	; 84
    28de:	96 e0       	ldi	r25, 0x06	; 6
    28e0:	68 ef       	ldi	r22, 0xF8	; 248
    28e2:	7c e0       	ldi	r23, 0x0C	; 12
    28e4:	41 e0       	ldi	r20, 0x01	; 1
    28e6:	24 ec       	ldi	r18, 0xC4	; 196
    28e8:	39 e0       	ldi	r19, 0x09	; 9
    28ea:	05 e0       	ldi	r16, 0x05	; 5
    28ec:	10 e0       	ldi	r17, 0x00	; 0
    28ee:	0f 2e       	mov	r0, r31
    28f0:	f3 e0       	ldi	r31, 0x03	; 3
    28f2:	ef 2e       	mov	r14, r31
    28f4:	f0 2d       	mov	r31, r0
    28f6:	0e 94 bd 2c 	call	0x597a	; 0x597a <gotoXY>
						detectionFlags = ALL_DETECTIONS_ON;
    28fa:	82 e0       	ldi	r24, 0x02	; 2
    28fc:	8f 8b       	std	Y+23, r24	; 0x17
						collisionCounter = 0;
    28fe:	1b 8e       	std	Y+27, r1	; 0x1b
						pauza_ms(300);
    2900:	6c e2       	ldi	r22, 0x2C	; 44
    2902:	71 e0       	ldi	r23, 0x01	; 1
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
    290c:	28 c0       	rjmp	.+80     	; 0x295e <redSide+0xe74>
						while(gotoXY(2320,3320,-1,NORMALSPEED,NORMALPRECISION,ALL_DETECTIONS_ON))		//idem na prvi deo stola, tu odlucujem sta dalje
						{				//1680
							if(++collisionCounter>=5)	//ako ni tu ne moze doci vraca se da pokusa ponovo sa totemom
    290e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2910:	8f 5f       	subi	r24, 0xFF	; 255
    2912:	8b 8f       	std	Y+27, r24	; 0x1b
    2914:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2916:	85 30       	cpi	r24, 0x05	; 5
    2918:	58 f0       	brcs	.+22     	; 0x2930 <redSide+0xe46>
							{
								state = FAST_AND_FURIOUS;
    291a:	1f 8e       	std	Y+31, r1	; 0x1f
								speed = NORMALSPEED;
    291c:	84 ec       	ldi	r24, 0xC4	; 196
    291e:	99 e0       	ldi	r25, 0x09	; 9
    2920:	99 8f       	std	Y+25, r25	; 0x19
    2922:	88 8f       	std	Y+24, r24	; 0x18
								detectionFlags = ALL_DETECTIONS_ON;
    2924:	82 e0       	ldi	r24, 0x02	; 2
    2926:	8f 8b       	std	Y+23, r24	; 0x17
								collisionCounter = 0;
    2928:	1b 8e       	std	Y+27, r1	; 0x1b
								newPosition = 1;
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	8c 8f       	std	Y+28, r24	; 0x1c
    292e:	27 c0       	rjmp	.+78     	; 0x297e <redSide+0xe94>
								
								break;	
							}//end if
							
							pauza_ms(10);
    2930:	6a e0       	ldi	r22, 0x0A	; 10
    2932:	70 e0       	ldi	r23, 0x00	; 0
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
							moveOnDirection(20,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
    293c:	84 e1       	ldi	r24, 0x14	; 20
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	61 e0       	ldi	r22, 0x01	; 1
    2942:	70 e0       	ldi	r23, 0x00	; 0
    2944:	44 ec       	ldi	r20, 0xC4	; 196
    2946:	59 e0       	ldi	r21, 0x09	; 9
    2948:	23 e0       	ldi	r18, 0x03	; 3
    294a:	00 e0       	ldi	r16, 0x00	; 0
    294c:	10 e0       	ldi	r17, 0x00	; 0
    294e:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
							pauza_ms(500);
    2952:	64 ef       	ldi	r22, 0xF4	; 244
    2954:	71 e0       	ldi	r23, 0x01	; 1
    2956:	80 e0       	ldi	r24, 0x00	; 0
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
						
						gotoXY(1620,3320,1,NORMALSPEED,NORMALPRECISION,ALL_DETECTIONS_OFF);	//vracam se tako da bih mogao da kupim mapu
						detectionFlags = ALL_DETECTIONS_ON;
						collisionCounter = 0;
						pauza_ms(300);
						while(gotoXY(2320,3320,-1,NORMALSPEED,NORMALPRECISION,ALL_DETECTIONS_ON))		//idem na prvi deo stola, tu odlucujem sta dalje
    295e:	80 e1       	ldi	r24, 0x10	; 16
    2960:	99 e0       	ldi	r25, 0x09	; 9
    2962:	68 ef       	ldi	r22, 0xF8	; 248
    2964:	7c e0       	ldi	r23, 0x0C	; 12
    2966:	4f ef       	ldi	r20, 0xFF	; 255
    2968:	24 ec       	ldi	r18, 0xC4	; 196
    296a:	39 e0       	ldi	r19, 0x09	; 9
    296c:	05 e0       	ldi	r16, 0x05	; 5
    296e:	10 e0       	ldi	r17, 0x00	; 0
    2970:	ee 24       	eor	r14, r14
    2972:	68 94       	set
    2974:	e1 f8       	bld	r14, 1
    2976:	0e 94 bd 2c 	call	0x597a	; 0x597a <gotoXY>
    297a:	88 23       	and	r24, r24
    297c:	41 f6       	brne	.-112    	; 0x290e <redSide+0xe24>
							pauza_ms(10);
							moveOnDirection(20,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
							pauza_ms(500);
						}//end while()
						
						collisionCounter = 0;
    297e:	1b 8e       	std	Y+27, r1	; 0x1b
						
						if(totemCollisionFlag == FALSE)	//
    2980:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2982:	81 30       	cpi	r24, 0x01	; 1
    2984:	79 f4       	brne	.+30     	; 0x29a4 <redSide+0xeba>
						{
							totemCollisionFlag = TRUE;	//ukljucujem indikaciju da nije pokupio drugi deo totema
    2986:	1e 8e       	std	Y+30, r1	; 0x1e
							state = FAST_AND_FURIOUS;	//i idem na mapu
    2988:	1f 8e       	std	Y+31, r1	; 0x1f
							newPosition = 3;
    298a:	83 e0       	ldi	r24, 0x03	; 3
    298c:	8c 8f       	std	Y+28, r24	; 0x1c
							
							if(tacticCombination == 3)
    298e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2990:	83 30       	cpi	r24, 0x03	; 3
    2992:	11 f4       	brne	.+4      	; 0x2998 <redSide+0xeae>
								tacticCombination = 1;
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	8a 8f       	std	Y+26, r24	; 0x1a
							if(tacticCombination == 2)
    2998:	8a 8d       	ldd	r24, Y+26	; 0x1a
    299a:	82 30       	cpi	r24, 0x02	; 2
    299c:	09 f0       	breq	.+2      	; 0x29a0 <redSide+0xeb6>
    299e:	e6 c8       	rjmp	.-3636   	; 0x1b6c <redSide+0x82>
								tacticCombination = 0;
    29a0:	1a 8e       	std	Y+26, r1	; 0x1a
    29a2:	e4 c8       	rjmp	.-3640   	; 0x1b6c <redSide+0x82>
							
							break;
						}
						
						if(tacticCombination == 0)
    29a4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    29a6:	88 23       	and	r24, r24
    29a8:	31 f4       	brne	.+12     	; 0x29b6 <redSide+0xecc>
						{
							otvoriSkupljac();
    29aa:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <otvoriSkupljac>
							state = FAST_AND_FURIOUS; //totem
    29ae:	1f 8e       	std	Y+31, r1	; 0x1f
							newPosition = 4;
    29b0:	84 e0       	ldi	r24, 0x04	; 4
    29b2:	8c 8f       	std	Y+28, r24	; 0x1c
    29b4:	db c8       	rjmp	.-3658   	; 0x1b6c <redSide+0x82>
							
						}else
						{				//1835
							gotoXY(2700,3165,-1,NORMALSPEED,NORMALPRECISION,ALL_DETECTIONS_ON);
    29b6:	8c e8       	ldi	r24, 0x8C	; 140
    29b8:	9a e0       	ldi	r25, 0x0A	; 10
    29ba:	6d e5       	ldi	r22, 0x5D	; 93
    29bc:	7c e0       	ldi	r23, 0x0C	; 12
    29be:	4f ef       	ldi	r20, 0xFF	; 255
    29c0:	24 ec       	ldi	r18, 0xC4	; 196
    29c2:	39 e0       	ldi	r19, 0x09	; 9
    29c4:	05 e0       	ldi	r16, 0x05	; 5
    29c6:	10 e0       	ldi	r17, 0x00	; 0
    29c8:	ee 24       	eor	r14, r14
    29ca:	68 94       	set
    29cc:	e1 f8       	bld	r14, 1
    29ce:	0e 94 bd 2c 	call	0x597a	; 0x597a <gotoXY>
							state = FAST_AND_FURIOUS; //kradja
    29d2:	1f 8e       	std	Y+31, r1	; 0x1f
							newPosition = 7;
    29d4:	87 e0       	ldi	r24, 0x07	; 7
    29d6:	8c 8f       	std	Y+28, r24	; 0x1c
							detectionFlags = ALL_DETECTIONS_ON;	
    29d8:	82 e0       	ldi	r24, 0x02	; 2
    29da:	8f 8b       	std	Y+23, r24	; 0x17
    29dc:	c7 c8       	rjmp	.-3698   	; 0x1b6c <redSide+0x82>
							
						break;
						
					}//end collision if
					
					pauza_ms(10);
    29de:	6a e0       	ldi	r22, 0x0A	; 10
    29e0:	70 e0       	ldi	r23, 0x00	; 0
    29e2:	80 e0       	ldi	r24, 0x00	; 0
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
					moveOnDirection(30,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
    29ea:	8e e1       	ldi	r24, 0x1E	; 30
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	61 e0       	ldi	r22, 0x01	; 1
    29f0:	70 e0       	ldi	r23, 0x00	; 0
    29f2:	44 ec       	ldi	r20, 0xC4	; 196
    29f4:	59 e0       	ldi	r21, 0x09	; 9
    29f6:	23 e0       	ldi	r18, 0x03	; 3
    29f8:	00 e0       	ldi	r16, 0x00	; 0
    29fa:	10 e0       	ldi	r17, 0x00	; 0
    29fc:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
					pauza_ms(500);	
    2a00:	64 ef       	ldi	r22, 0xF4	; 244
    2a02:	71 e0       	ldi	r23, 0x01	; 1
    2a04:	80 e0       	ldi	r24, 0x00	; 0
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
					
					newPosition = 2;	//pokusavam ponovo
    2a0c:	82 e0       	ldi	r24, 0x02	; 2
    2a0e:	8c 8f       	std	Y+28, r24	; 0x1c
					state = FAST_AND_FURIOUS;
    2a10:	1f 8e       	std	Y+31, r1	; 0x1f
					speed = NORMALSPEED;
    2a12:	84 ec       	ldi	r24, 0xC4	; 196
    2a14:	99 e0       	ldi	r25, 0x09	; 9
    2a16:	99 8f       	std	Y+25, r25	; 0x19
    2a18:	88 8f       	std	Y+24, r24	; 0x18
					detectionFlags = TASTER_SUDAR_ON;
    2a1a:	1f 8a       	std	Y+23, r1	; 0x17
    2a1c:	a7 c8       	rjmp	.-3762   	; 0x1b6c <redSide+0x82>
				}//end position if
				
				/************************************************************************/
				/*		SUDAR NA PUTU DO MAPE                                           */
				/************************************************************************/
				if(newPosition == 3)
    2a1e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a20:	83 30       	cpi	r24, 0x03	; 3
    2a22:	91 f4       	brne	.+36     	; 0x2a48 <redSide+0xf5e>
				{
					pauza_ms(600);	
    2a24:	68 e5       	ldi	r22, 0x58	; 88
    2a26:	72 e0       	ldi	r23, 0x02	; 2
    2a28:	80 e0       	ldi	r24, 0x00	; 0
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>

					zatvoriSkupljac();
    2a30:	0e 94 c1 03 	call	0x782	; 0x782 <zatvoriSkupljac>
					
					collisionCounter = 0;		//ide do zida
    2a34:	1b 8e       	std	Y+27, r1	; 0x1b
					detectionFlags = TASTER_SUDAR_ON;		//TESTIRATI
    2a36:	1f 8a       	std	Y+23, r1	; 0x17
					speed = NORMALSPEED;
    2a38:	84 ec       	ldi	r24, 0xC4	; 196
    2a3a:	99 e0       	ldi	r25, 0x09	; 9
    2a3c:	99 8f       	std	Y+25, r25	; 0x19
    2a3e:	88 8f       	std	Y+24, r24	; 0x18
					
					state = RIDE_THE_LIGHTING;	//dolazi do zida, pokusace paralelno mapi da dodje do nje
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	8f 8f       	std	Y+31, r24	; 0x1f
					newPosition = 0;
    2a44:	1c 8e       	std	Y+28, r1	; 0x1c
    2a46:	92 c8       	rjmp	.-3804   	; 0x1b6c <redSide+0x82>
					break;
				}//end position if
				/************************************************************************/
				/* SUDAR NA PUTU DO PROTIVNICKOG TOTEMA				                    */
				/************************************************************************/
				if(newPosition == 4)
    2a48:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a4a:	84 30       	cpi	r24, 0x04	; 4
    2a4c:	51 f5       	brne	.+84     	; 0x2aa2 <redSide+0xfb8>
				{
					if(tacticCombination == 2 && readY()<2470)
    2a4e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2a50:	82 30       	cpi	r24, 0x02	; 2
    2a52:	e9 f4       	brne	.+58     	; 0x2a8e <redSide+0xfa4>
    2a54:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <readY>
    2a58:	29 e0       	ldi	r18, 0x09	; 9
    2a5a:	86 3a       	cpi	r24, 0xA6	; 166
    2a5c:	92 07       	cpc	r25, r18
    2a5e:	bc f4       	brge	.+46     	; 0x2a8e <redSide+0xfa4>
					{							//readY()>2530
						moveOnDirection(50,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
    2a60:	82 e3       	ldi	r24, 0x32	; 50
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	61 e0       	ldi	r22, 0x01	; 1
    2a66:	70 e0       	ldi	r23, 0x00	; 0
    2a68:	44 ec       	ldi	r20, 0xC4	; 196
    2a6a:	59 e0       	ldi	r21, 0x09	; 9
    2a6c:	23 e0       	ldi	r18, 0x03	; 3
    2a6e:	00 e0       	ldi	r16, 0x00	; 0
    2a70:	10 e0       	ldi	r17, 0x00	; 0
    2a72:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						state = FAST_AND_FURIOUS;
    2a76:	1f 8e       	std	Y+31, r1	; 0x1f
						newPosition = 3;
    2a78:	83 e0       	ldi	r24, 0x03	; 3
    2a7a:	8c 8f       	std	Y+28, r24	; 0x1c
						
						detectionFlags = ALL_DETECTIONS_ON;
    2a7c:	82 e0       	ldi	r24, 0x02	; 2
    2a7e:	8f 8b       	std	Y+23, r24	; 0x17
						
						pauza_ms(500);
    2a80:	64 ef       	ldi	r22, 0xF4	; 244
    2a82:	71 e0       	ldi	r23, 0x01	; 1
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
    2a8c:	6f c8       	rjmp	.-3874   	; 0x1b6c <redSide+0x82>
						
						break;
					}
					
					pauza_ms(500);
    2a8e:	64 ef       	ldi	r22, 0xF4	; 244
    2a90:	71 e0       	ldi	r23, 0x01	; 1
    2a92:	80 e0       	ldi	r24, 0x00	; 0
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
					detectionFlags = ALL_DETECTIONS_ON;
    2a9a:	82 e0       	ldi	r24, 0x02	; 2
    2a9c:	8f 8b       	std	Y+23, r24	; 0x17
					state = FAST_AND_FURIOUS;
    2a9e:	1f 8e       	std	Y+31, r1	; 0x1f
    2aa0:	65 c8       	rjmp	.-3894   	; 0x1b6c <redSide+0x82>
				
				
				/************************************************************************/
				/* SUDAR NA PUTU DO PROTIVNICKOG BRODA				                    */
				/************************************************************************/
				if(newPosition == 7)
    2aa2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2aa4:	87 30       	cpi	r24, 0x07	; 7
    2aa6:	51 f5       	brne	.+84     	; 0x2afc <redSide+0x1012>
				{
					if(tacticCombination == 3 && readY()<2470)
    2aa8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2aaa:	83 30       	cpi	r24, 0x03	; 3
    2aac:	e9 f4       	brne	.+58     	; 0x2ae8 <redSide+0xffe>
    2aae:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <readY>
    2ab2:	39 e0       	ldi	r19, 0x09	; 9
    2ab4:	86 3a       	cpi	r24, 0xA6	; 166
    2ab6:	93 07       	cpc	r25, r19
    2ab8:	bc f4       	brge	.+46     	; 0x2ae8 <redSide+0xffe>
					{							//readY()>2530
						moveOnDirection(50,1,NORMALSPEED,ALL_DETECTIONS_OFF,NO_BREAK_TIME);
    2aba:	82 e3       	ldi	r24, 0x32	; 50
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	61 e0       	ldi	r22, 0x01	; 1
    2ac0:	70 e0       	ldi	r23, 0x00	; 0
    2ac2:	44 ec       	ldi	r20, 0xC4	; 196
    2ac4:	59 e0       	ldi	r21, 0x09	; 9
    2ac6:	23 e0       	ldi	r18, 0x03	; 3
    2ac8:	00 e0       	ldi	r16, 0x00	; 0
    2aca:	10 e0       	ldi	r17, 0x00	; 0
    2acc:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
						state = FAST_AND_FURIOUS;
    2ad0:	1f 8e       	std	Y+31, r1	; 0x1f
						newPosition = 3;
    2ad2:	83 e0       	ldi	r24, 0x03	; 3
    2ad4:	8c 8f       	std	Y+28, r24	; 0x1c
						detectionFlags = ALL_DETECTIONS_ON;
    2ad6:	82 e0       	ldi	r24, 0x02	; 2
    2ad8:	8f 8b       	std	Y+23, r24	; 0x17
						pauza_ms(500);
    2ada:	64 ef       	ldi	r22, 0xF4	; 244
    2adc:	71 e0       	ldi	r23, 0x01	; 1
    2ade:	80 e0       	ldi	r24, 0x00	; 0
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
    2ae6:	42 c8       	rjmp	.-3964   	; 0x1b6c <redSide+0x82>
						
						break;
					}
					
					pauza_ms(500);
    2ae8:	64 ef       	ldi	r22, 0xF4	; 244
    2aea:	71 e0       	ldi	r23, 0x01	; 1
    2aec:	80 e0       	ldi	r24, 0x00	; 0
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
					detectionFlags = ALL_DETECTIONS_ON;
    2af4:	82 e0       	ldi	r24, 0x02	; 2
    2af6:	8f 8b       	std	Y+23, r24	; 0x17
					state = FAST_AND_FURIOUS;
    2af8:	1f 8e       	std	Y+31, r1	; 0x1f
    2afa:	38 c8       	rjmp	.-3984   	; 0x1b6c <redSide+0x82>
					
					break;
				}//end if
				
				if(newPosition == 8)
    2afc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2afe:	88 30       	cpi	r24, 0x08	; 8
    2b00:	09 f5       	brne	.+66     	; 0x2b44 <redSide+0x105a>
				{
					pauza_ms(500);
    2b02:	64 ef       	ldi	r22, 0xF4	; 244
    2b04:	71 e0       	ldi	r23, 0x01	; 1
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>

					if(tacticCombination == 3)	//ako je presao mapu odlazi da kupi nju(mapa prethodno nije pokupljena)
    2b0e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b10:	83 30       	cpi	r24, 0x03	; 3
    2b12:	c1 f4       	brne	.+48     	; 0x2b44 <redSide+0x105a>
					{
						gotoXY(2700,readY(),1,NORMALSPEED,NORMALPRECISION,ALL_DETECTIONS_OFF);
    2b14:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <readY>
    2b18:	9c 01       	movw	r18, r24
    2b1a:	8c e8       	ldi	r24, 0x8C	; 140
    2b1c:	9a e0       	ldi	r25, 0x0A	; 10
    2b1e:	b9 01       	movw	r22, r18
    2b20:	41 e0       	ldi	r20, 0x01	; 1
    2b22:	24 ec       	ldi	r18, 0xC4	; 196
    2b24:	39 e0       	ldi	r19, 0x09	; 9
    2b26:	05 e0       	ldi	r16, 0x05	; 5
    2b28:	10 e0       	ldi	r17, 0x00	; 0
    2b2a:	0f 2e       	mov	r0, r31
    2b2c:	f3 e0       	ldi	r31, 0x03	; 3
    2b2e:	ef 2e       	mov	r14, r31
    2b30:	f0 2d       	mov	r31, r0
    2b32:	0e 94 bd 2c 	call	0x597a	; 0x597a <gotoXY>
						state = FAST_AND_FURIOUS;
    2b36:	1f 8e       	std	Y+31, r1	; 0x1f
						newPosition = 3;
    2b38:	83 e0       	ldi	r24, 0x03	; 3
    2b3a:	8c 8f       	std	Y+28, r24	; 0x1c
						
						detectionFlags = ALL_DETECTIONS_ON;
    2b3c:	82 e0       	ldi	r24, 0x02	; 2
    2b3e:	8f 8b       	std	Y+23, r24	; 0x17
    2b40:	0c 94 b6 0d 	jmp	0x1b6c	; 0x1b6c <redSide+0x82>
				}
				
				/************************************************************************/
				/*	SUDAR PRILIKOM DOLASKA DO MAPE PARALELNO ZIDU                      */
				/************************************************************************/
				if(newPosition == 101)
    2b44:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b46:	85 36       	cpi	r24, 0x65	; 101
    2b48:	99 f5       	brne	.+102    	; 0x2bb0 <redSide+0x10c6>
				{
					pauza_ms(500);
    2b4a:	64 ef       	ldi	r22, 0xF4	; 244
    2b4c:	71 e0       	ldi	r23, 0x01	; 1
    2b4e:	80 e0       	ldi	r24, 0x00	; 0
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
					if((++collisionCounter > 3) && (totemCollisionFlag == TRUE))	//ako pokusava 4. put da dodje a nije pokupio drugi deo totema
    2b56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b58:	8f 5f       	subi	r24, 0xFF	; 255
    2b5a:	8b 8f       	std	Y+27, r24	; 0x1b
    2b5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b5e:	84 30       	cpi	r24, 0x04	; 4
    2b60:	58 f0       	brcs	.+22     	; 0x2b78 <redSide+0x108e>
    2b62:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b64:	88 23       	and	r24, r24
    2b66:	41 f4       	brne	.+16     	; 0x2b78 <redSide+0x108e>
					{
						state = RIDE_THE_LIGHTING;
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	8f 8f       	std	Y+31, r24	; 0x1f
						newPosition = 3;
    2b6c:	83 e0       	ldi	r24, 0x03	; 3
    2b6e:	8c 8f       	std	Y+28, r24	; 0x1c
						totemCollisionFlag = FALSE;
    2b70:	81 e0       	ldi	r24, 0x01	; 1
    2b72:	8e 8f       	std	Y+30, r24	; 0x1e
    2b74:	0c 94 b6 0d 	jmp	0x1b6c	; 0x1b6c <redSide+0x82>
						break;	
					}//end collisionCounter if	
					
					pauza_ms(500);
    2b78:	64 ef       	ldi	r22, 0xF4	; 244
    2b7a:	71 e0       	ldi	r23, 0x01	; 1
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
					
					gotoXY(2740,3240,1,NORMALSPEED,NORMALPRECISION,ALL_DETECTIONS_OFF);	//IDE DO NEKE TACKE
    2b84:	84 eb       	ldi	r24, 0xB4	; 180
    2b86:	9a e0       	ldi	r25, 0x0A	; 10
    2b88:	68 ea       	ldi	r22, 0xA8	; 168
    2b8a:	7c e0       	ldi	r23, 0x0C	; 12
    2b8c:	41 e0       	ldi	r20, 0x01	; 1
    2b8e:	24 ec       	ldi	r18, 0xC4	; 196
    2b90:	39 e0       	ldi	r19, 0x09	; 9
    2b92:	05 e0       	ldi	r16, 0x05	; 5
    2b94:	10 e0       	ldi	r17, 0x00	; 0
    2b96:	0f 2e       	mov	r0, r31
    2b98:	f3 e0       	ldi	r31, 0x03	; 3
    2b9a:	ef 2e       	mov	r14, r31
    2b9c:	f0 2d       	mov	r31, r0
    2b9e:	0e 94 bd 2c 	call	0x597a	; 0x597a <gotoXY>
								//1760
					state = RIDE_THE_LIGHTING;	//vraca se do zida, i pokusava da ide do drveta
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	8f 8f       	std	Y+31, r24	; 0x1f
					newPosition = 2;
    2ba6:	82 e0       	ldi	r24, 0x02	; 2
    2ba8:	8c 8f       	std	Y+28, r24	; 0x1c
					detectionFlags = TASTER_SUDAR_ON;
    2baa:	1f 8a       	std	Y+23, r1	; 0x17
    2bac:	0c 94 b6 0d 	jmp	0x1b6c	; 0x1b6c <redSide+0x82>
				}//end position if
				
				/************************************************************************/
				/*	SUDAR PRILIKOM DOLASKA DO DRVETA                                    */
				/************************************************************************/
				if(newPosition == 102)
    2bb0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2bb2:	86 36       	cpi	r24, 0x66	; 102
    2bb4:	e9 f4       	brne	.+58     	; 0x2bf0 <redSide+0x1106>
				{
					pauza_ms(500);
    2bb6:	64 ef       	ldi	r22, 0xF4	; 244
    2bb8:	71 e0       	ldi	r23, 0x01	; 1
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
					if((++collisionCounter > 3) && (totemCollisionFlag == TRUE))	//ako pokusava 4. put da dodje a nije pokupio drugi deo totema
    2bc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bc4:	8f 5f       	subi	r24, 0xFF	; 255
    2bc6:	8b 8f       	std	Y+27, r24	; 0x1b
    2bc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bca:	84 30       	cpi	r24, 0x04	; 4
    2bcc:	60 f0       	brcs	.+24     	; 0x2be6 <redSide+0x10fc>
    2bce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2bd0:	88 23       	and	r24, r24
    2bd2:	49 f4       	brne	.+18     	; 0x2be6 <redSide+0x10fc>
					{
						collisionCounter = 0;
    2bd4:	1b 8e       	std	Y+27, r1	; 0x1b
						
						totemCollisionFlag = FALSE;
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	8e 8f       	std	Y+30, r24	; 0x1e
						state = RIDE_THE_LIGHTING;	//ide do pozicije odakle krece na drugi deo totema
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	8f 8f       	std	Y+31, r24	; 0x1f
						newPosition = 3;
    2bde:	83 e0       	ldi	r24, 0x03	; 3
    2be0:	8c 8f       	std	Y+28, r24	; 0x1c
    2be2:	0c 94 b6 0d 	jmp	0x1b6c	; 0x1b6c <redSide+0x82>
					
						break;	
					}//end collisionCounter if	
					
					state = RIDE_THE_LIGHTING;	//ide do zida, ponovo pokusava paralelno mapi da dodje do nje
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	8f 8f       	std	Y+31, r24	; 0x1f
					newPosition = 0;
    2bea:	1c 8e       	std	Y+28, r1	; 0x1c
    2bec:	0c 94 b6 0d 	jmp	0x1b6c	; 0x1b6c <redSide+0x82>
					
					break;
				}
				
				if(newPosition>=100)
    2bf0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2bf2:	84 36       	cpi	r24, 0x64	; 100
    2bf4:	78 f0       	brcs	.+30     	; 0x2c14 <redSide+0x112a>
				{
					detectionFlags = ALL_DETECTIONS_ON;
    2bf6:	82 e0       	ldi	r24, 0x02	; 2
    2bf8:	8f 8b       	std	Y+23, r24	; 0x17
					pauza_ms(600);
    2bfa:	68 e5       	ldi	r22, 0x58	; 88
    2bfc:	72 e0       	ldi	r23, 0x02	; 2
    2bfe:	80 e0       	ldi	r24, 0x00	; 0
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
					newPosition -= 100;
    2c06:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c08:	84 56       	subi	r24, 0x64	; 100
    2c0a:	8c 8f       	std	Y+28, r24	; 0x1c
					state = RIDE_THE_LIGHTING;
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	8f 8f       	std	Y+31, r24	; 0x1f
    2c10:	0c 94 b6 0d 	jmp	0x1b6c	; 0x1b6c <redSide+0x82>
					
					break;	
				}
				
				pauza_ms(600);
    2c14:	68 e5       	ldi	r22, 0x58	; 88
    2c16:	72 e0       	ldi	r23, 0x02	; 2
    2c18:	80 e0       	ldi	r24, 0x00	; 0
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
				detectionFlags = ALL_DETECTIONS_ON;
    2c20:	82 e0       	ldi	r24, 0x02	; 2
    2c22:	8f 8b       	std	Y+23, r24	; 0x17
				state = FAST_AND_FURIOUS;
    2c24:	1f 8e       	std	Y+31, r1	; 0x1f
    2c26:	0c 94 b6 0d 	jmp	0x1b6c	; 0x1b6c <redSide+0x82>

00002c2a <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
    2c2a:	0f 93       	push	r16
    2c2c:	1f 93       	push	r17
    2c2e:	df 93       	push	r29
    2c30:	cf 93       	push	r28
    2c32:	cd b7       	in	r28, 0x3d	; 61
    2c34:	de b7       	in	r29, 0x3e	; 62
    2c36:	cd 57       	subi	r28, 0x7D	; 125
    2c38:	d0 40       	sbci	r29, 0x00	; 0
    2c3a:	0f b6       	in	r0, 0x3f	; 63
    2c3c:	f8 94       	cli
    2c3e:	de bf       	out	0x3e, r29	; 62
    2c40:	0f be       	out	0x3f, r0	; 63
    2c42:	cd bf       	out	0x3d, r28	; 61
    2c44:	fe 01       	movw	r30, r28
    2c46:	e4 58       	subi	r30, 0x84	; 132
    2c48:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4a:	80 83       	st	Z, r24
    2c4c:	fe 01       	movw	r30, r28
    2c4e:	e3 58       	subi	r30, 0x83	; 131
    2c50:	ff 4f       	sbci	r31, 0xFF	; 255
    2c52:	60 83       	st	Z, r22
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
    2c54:	de 01       	movw	r26, r28
    2c56:	a5 58       	subi	r26, 0x85	; 133
    2c58:	bf 4f       	sbci	r27, 0xFF	; 255
    2c5a:	fe 01       	movw	r30, r28
    2c5c:	e4 58       	subi	r30, 0x84	; 132
    2c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c60:	80 81       	ld	r24, Z
    2c62:	82 95       	swap	r24
    2c64:	8f 70       	andi	r24, 0x0F	; 15
    2c66:	8c 93       	st	X, r24
ln=(c & 0x0F);
    2c68:	de 01       	movw	r26, r28
    2c6a:	a6 58       	subi	r26, 0x86	; 134
    2c6c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c6e:	fe 01       	movw	r30, r28
    2c70:	e4 58       	subi	r30, 0x84	; 132
    2c72:	ff 4f       	sbci	r31, 0xFF	; 255
    2c74:	80 81       	ld	r24, Z
    2c76:	8f 70       	andi	r24, 0x0F	; 15
    2c78:	8c 93       	st	X, r24

if(isdata==0)
    2c7a:	fe 01       	movw	r30, r28
    2c7c:	e3 58       	subi	r30, 0x83	; 131
    2c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c80:	80 81       	ld	r24, Z
    2c82:	88 23       	and	r24, r24
    2c84:	41 f4       	brne	.+16     	; 0x2c96 <LCDByte+0x6c>
	CLEAR_RS();
    2c86:	a5 e3       	ldi	r26, 0x35	; 53
    2c88:	b0 e0       	ldi	r27, 0x00	; 0
    2c8a:	e5 e3       	ldi	r30, 0x35	; 53
    2c8c:	f0 e0       	ldi	r31, 0x00	; 0
    2c8e:	80 81       	ld	r24, Z
    2c90:	8f 7b       	andi	r24, 0xBF	; 191
    2c92:	8c 93       	st	X, r24
    2c94:	07 c0       	rjmp	.+14     	; 0x2ca4 <LCDByte+0x7a>
else
	SET_RS();
    2c96:	a5 e3       	ldi	r26, 0x35	; 53
    2c98:	b0 e0       	ldi	r27, 0x00	; 0
    2c9a:	e5 e3       	ldi	r30, 0x35	; 53
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	80 81       	ld	r24, Z
    2ca0:	80 64       	ori	r24, 0x40	; 64
    2ca2:	8c 93       	st	X, r24
    2ca4:	fe 01       	movw	r30, r28
    2ca6:	eb 58       	subi	r30, 0x8B	; 139
    2ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	a0 e0       	ldi	r26, 0x00	; 0
    2cb0:	bf e3       	ldi	r27, 0x3F	; 63
    2cb2:	80 83       	st	Z, r24
    2cb4:	91 83       	std	Z+1, r25	; 0x01
    2cb6:	a2 83       	std	Z+2, r26	; 0x02
    2cb8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2cba:	8e 01       	movw	r16, r28
    2cbc:	0f 58       	subi	r16, 0x8F	; 143
    2cbe:	1f 4f       	sbci	r17, 0xFF	; 255
    2cc0:	fe 01       	movw	r30, r28
    2cc2:	eb 58       	subi	r30, 0x8B	; 139
    2cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc6:	60 81       	ld	r22, Z
    2cc8:	71 81       	ldd	r23, Z+1	; 0x01
    2cca:	82 81       	ldd	r24, Z+2	; 0x02
    2ccc:	93 81       	ldd	r25, Z+3	; 0x03
    2cce:	2a ef       	ldi	r18, 0xFA	; 250
    2cd0:	3d ee       	ldi	r19, 0xED	; 237
    2cd2:	4b e6       	ldi	r20, 0x6B	; 107
    2cd4:	50 e4       	ldi	r21, 0x40	; 64
    2cd6:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    2cda:	dc 01       	movw	r26, r24
    2cdc:	cb 01       	movw	r24, r22
    2cde:	f8 01       	movw	r30, r16
    2ce0:	80 83       	st	Z, r24
    2ce2:	91 83       	std	Z+1, r25	; 0x01
    2ce4:	a2 83       	std	Z+2, r26	; 0x02
    2ce6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ce8:	fe 01       	movw	r30, r28
    2cea:	ef 58       	subi	r30, 0x8F	; 143
    2cec:	ff 4f       	sbci	r31, 0xFF	; 255
    2cee:	60 81       	ld	r22, Z
    2cf0:	71 81       	ldd	r23, Z+1	; 0x01
    2cf2:	82 81       	ldd	r24, Z+2	; 0x02
    2cf4:	93 81       	ldd	r25, Z+3	; 0x03
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	40 e8       	ldi	r20, 0x80	; 128
    2cfc:	5f e3       	ldi	r21, 0x3F	; 63
    2cfe:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    2d02:	88 23       	and	r24, r24
    2d04:	34 f4       	brge	.+12     	; 0x2d12 <LCDByte+0xe8>
		__ticks = 1;
    2d06:	fe 01       	movw	r30, r28
    2d08:	e0 59       	subi	r30, 0x90	; 144
    2d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	80 83       	st	Z, r24
    2d10:	e0 c0       	rjmp	.+448    	; 0x2ed2 <LCDByte+0x2a8>
	else if (__tmp > 255)
    2d12:	fe 01       	movw	r30, r28
    2d14:	ef 58       	subi	r30, 0x8F	; 143
    2d16:	ff 4f       	sbci	r31, 0xFF	; 255
    2d18:	60 81       	ld	r22, Z
    2d1a:	71 81       	ldd	r23, Z+1	; 0x01
    2d1c:	82 81       	ldd	r24, Z+2	; 0x02
    2d1e:	93 81       	ldd	r25, Z+3	; 0x03
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	4f e7       	ldi	r20, 0x7F	; 127
    2d26:	53 e4       	ldi	r21, 0x43	; 67
    2d28:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    2d2c:	18 16       	cp	r1, r24
    2d2e:	0c f0       	brlt	.+2      	; 0x2d32 <LCDByte+0x108>
    2d30:	c0 c0       	rjmp	.+384    	; 0x2eb2 <LCDByte+0x288>
	{
		_delay_ms(__us / 1000.0);
    2d32:	fe 01       	movw	r30, r28
    2d34:	eb 58       	subi	r30, 0x8B	; 139
    2d36:	ff 4f       	sbci	r31, 0xFF	; 255
    2d38:	60 81       	ld	r22, Z
    2d3a:	71 81       	ldd	r23, Z+1	; 0x01
    2d3c:	82 81       	ldd	r24, Z+2	; 0x02
    2d3e:	93 81       	ldd	r25, Z+3	; 0x03
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	4a e7       	ldi	r20, 0x7A	; 122
    2d46:	54 e4       	ldi	r21, 0x44	; 68
    2d48:	0e 94 a4 3b 	call	0x7748	; 0x7748 <__divsf3>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	fe 01       	movw	r30, r28
    2d52:	e4 59       	subi	r30, 0x94	; 148
    2d54:	ff 4f       	sbci	r31, 0xFF	; 255
    2d56:	80 83       	st	Z, r24
    2d58:	91 83       	std	Z+1, r25	; 0x01
    2d5a:	a2 83       	std	Z+2, r26	; 0x02
    2d5c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d5e:	8e 01       	movw	r16, r28
    2d60:	08 59       	subi	r16, 0x98	; 152
    2d62:	1f 4f       	sbci	r17, 0xFF	; 255
    2d64:	fe 01       	movw	r30, r28
    2d66:	e4 59       	subi	r30, 0x94	; 148
    2d68:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6a:	60 81       	ld	r22, Z
    2d6c:	71 81       	ldd	r23, Z+1	; 0x01
    2d6e:	82 81       	ldd	r24, Z+2	; 0x02
    2d70:	93 81       	ldd	r25, Z+3	; 0x03
    2d72:	2d ec       	ldi	r18, 0xCD	; 205
    2d74:	3c ec       	ldi	r19, 0xCC	; 204
    2d76:	4c e2       	ldi	r20, 0x2C	; 44
    2d78:	55 e4       	ldi	r21, 0x45	; 69
    2d7a:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	f8 01       	movw	r30, r16
    2d84:	80 83       	st	Z, r24
    2d86:	91 83       	std	Z+1, r25	; 0x01
    2d88:	a2 83       	std	Z+2, r26	; 0x02
    2d8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d8c:	fe 01       	movw	r30, r28
    2d8e:	e8 59       	subi	r30, 0x98	; 152
    2d90:	ff 4f       	sbci	r31, 0xFF	; 255
    2d92:	60 81       	ld	r22, Z
    2d94:	71 81       	ldd	r23, Z+1	; 0x01
    2d96:	82 81       	ldd	r24, Z+2	; 0x02
    2d98:	93 81       	ldd	r25, Z+3	; 0x03
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	40 e8       	ldi	r20, 0x80	; 128
    2da0:	5f e3       	ldi	r21, 0x3F	; 63
    2da2:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    2da6:	88 23       	and	r24, r24
    2da8:	44 f4       	brge	.+16     	; 0x2dba <LCDByte+0x190>
		__ticks = 1;
    2daa:	fe 01       	movw	r30, r28
    2dac:	ea 59       	subi	r30, 0x9A	; 154
    2dae:	ff 4f       	sbci	r31, 0xFF	; 255
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	91 83       	std	Z+1, r25	; 0x01
    2db6:	80 83       	st	Z, r24
    2db8:	64 c0       	rjmp	.+200    	; 0x2e82 <LCDByte+0x258>
	else if (__tmp > 65535)
    2dba:	fe 01       	movw	r30, r28
    2dbc:	e8 59       	subi	r30, 0x98	; 152
    2dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc0:	60 81       	ld	r22, Z
    2dc2:	71 81       	ldd	r23, Z+1	; 0x01
    2dc4:	82 81       	ldd	r24, Z+2	; 0x02
    2dc6:	93 81       	ldd	r25, Z+3	; 0x03
    2dc8:	20 e0       	ldi	r18, 0x00	; 0
    2dca:	3f ef       	ldi	r19, 0xFF	; 255
    2dcc:	4f e7       	ldi	r20, 0x7F	; 127
    2dce:	57 e4       	ldi	r21, 0x47	; 71
    2dd0:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    2dd4:	18 16       	cp	r1, r24
    2dd6:	0c f0       	brlt	.+2      	; 0x2dda <LCDByte+0x1b0>
    2dd8:	43 c0       	rjmp	.+134    	; 0x2e60 <LCDByte+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dda:	fe 01       	movw	r30, r28
    2ddc:	e4 59       	subi	r30, 0x94	; 148
    2dde:	ff 4f       	sbci	r31, 0xFF	; 255
    2de0:	60 81       	ld	r22, Z
    2de2:	71 81       	ldd	r23, Z+1	; 0x01
    2de4:	82 81       	ldd	r24, Z+2	; 0x02
    2de6:	93 81       	ldd	r25, Z+3	; 0x03
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	40 e2       	ldi	r20, 0x20	; 32
    2dee:	51 e4       	ldi	r21, 0x41	; 65
    2df0:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    2df4:	dc 01       	movw	r26, r24
    2df6:	cb 01       	movw	r24, r22
    2df8:	8e 01       	movw	r16, r28
    2dfa:	0a 59       	subi	r16, 0x9A	; 154
    2dfc:	1f 4f       	sbci	r17, 0xFF	; 255
    2dfe:	bc 01       	movw	r22, r24
    2e00:	cd 01       	movw	r24, r26
    2e02:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    2e06:	dc 01       	movw	r26, r24
    2e08:	cb 01       	movw	r24, r22
    2e0a:	f8 01       	movw	r30, r16
    2e0c:	91 83       	std	Z+1, r25	; 0x01
    2e0e:	80 83       	st	Z, r24
    2e10:	1f c0       	rjmp	.+62     	; 0x2e50 <LCDByte+0x226>
    2e12:	fe 01       	movw	r30, r28
    2e14:	ec 59       	subi	r30, 0x9C	; 156
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	84 e1       	ldi	r24, 0x14	; 20
    2e1a:	91 e0       	ldi	r25, 0x01	; 1
    2e1c:	91 83       	std	Z+1, r25	; 0x01
    2e1e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e20:	fe 01       	movw	r30, r28
    2e22:	ec 59       	subi	r30, 0x9C	; 156
    2e24:	ff 4f       	sbci	r31, 0xFF	; 255
    2e26:	80 81       	ld	r24, Z
    2e28:	91 81       	ldd	r25, Z+1	; 0x01
    2e2a:	01 97       	sbiw	r24, 0x01	; 1
    2e2c:	f1 f7       	brne	.-4      	; 0x2e2a <LCDByte+0x200>
    2e2e:	fe 01       	movw	r30, r28
    2e30:	ec 59       	subi	r30, 0x9C	; 156
    2e32:	ff 4f       	sbci	r31, 0xFF	; 255
    2e34:	91 83       	std	Z+1, r25	; 0x01
    2e36:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e38:	de 01       	movw	r26, r28
    2e3a:	aa 59       	subi	r26, 0x9A	; 154
    2e3c:	bf 4f       	sbci	r27, 0xFF	; 255
    2e3e:	fe 01       	movw	r30, r28
    2e40:	ea 59       	subi	r30, 0x9A	; 154
    2e42:	ff 4f       	sbci	r31, 0xFF	; 255
    2e44:	80 81       	ld	r24, Z
    2e46:	91 81       	ldd	r25, Z+1	; 0x01
    2e48:	01 97       	sbiw	r24, 0x01	; 1
    2e4a:	11 96       	adiw	r26, 0x01	; 1
    2e4c:	9c 93       	st	X, r25
    2e4e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e50:	fe 01       	movw	r30, r28
    2e52:	ea 59       	subi	r30, 0x9A	; 154
    2e54:	ff 4f       	sbci	r31, 0xFF	; 255
    2e56:	80 81       	ld	r24, Z
    2e58:	91 81       	ldd	r25, Z+1	; 0x01
    2e5a:	00 97       	sbiw	r24, 0x00	; 0
    2e5c:	d1 f6       	brne	.-76     	; 0x2e12 <LCDByte+0x1e8>
    2e5e:	4b c0       	rjmp	.+150    	; 0x2ef6 <LCDByte+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e60:	8e 01       	movw	r16, r28
    2e62:	0a 59       	subi	r16, 0x9A	; 154
    2e64:	1f 4f       	sbci	r17, 0xFF	; 255
    2e66:	fe 01       	movw	r30, r28
    2e68:	e8 59       	subi	r30, 0x98	; 152
    2e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6c:	60 81       	ld	r22, Z
    2e6e:	71 81       	ldd	r23, Z+1	; 0x01
    2e70:	82 81       	ldd	r24, Z+2	; 0x02
    2e72:	93 81       	ldd	r25, Z+3	; 0x03
    2e74:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    2e78:	dc 01       	movw	r26, r24
    2e7a:	cb 01       	movw	r24, r22
    2e7c:	f8 01       	movw	r30, r16
    2e7e:	91 83       	std	Z+1, r25	; 0x01
    2e80:	80 83       	st	Z, r24
    2e82:	de 01       	movw	r26, r28
    2e84:	ae 59       	subi	r26, 0x9E	; 158
    2e86:	bf 4f       	sbci	r27, 0xFF	; 255
    2e88:	fe 01       	movw	r30, r28
    2e8a:	ea 59       	subi	r30, 0x9A	; 154
    2e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8e:	80 81       	ld	r24, Z
    2e90:	91 81       	ldd	r25, Z+1	; 0x01
    2e92:	11 96       	adiw	r26, 0x01	; 1
    2e94:	9c 93       	st	X, r25
    2e96:	8e 93       	st	-X, r24
    2e98:	fe 01       	movw	r30, r28
    2e9a:	ee 59       	subi	r30, 0x9E	; 158
    2e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9e:	80 81       	ld	r24, Z
    2ea0:	91 81       	ldd	r25, Z+1	; 0x01
    2ea2:	01 97       	sbiw	r24, 0x01	; 1
    2ea4:	f1 f7       	brne	.-4      	; 0x2ea2 <LCDByte+0x278>
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	ee 59       	subi	r30, 0x9E	; 158
    2eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2eac:	91 83       	std	Z+1, r25	; 0x01
    2eae:	80 83       	st	Z, r24
    2eb0:	22 c0       	rjmp	.+68     	; 0x2ef6 <LCDByte+0x2cc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2eb2:	8e 01       	movw	r16, r28
    2eb4:	00 59       	subi	r16, 0x90	; 144
    2eb6:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb8:	fe 01       	movw	r30, r28
    2eba:	ef 58       	subi	r30, 0x8F	; 143
    2ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebe:	60 81       	ld	r22, Z
    2ec0:	71 81       	ldd	r23, Z+1	; 0x01
    2ec2:	82 81       	ldd	r24, Z+2	; 0x02
    2ec4:	93 81       	ldd	r25, Z+3	; 0x03
    2ec6:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	f8 01       	movw	r30, r16
    2ed0:	80 83       	st	Z, r24
    2ed2:	de 01       	movw	r26, r28
    2ed4:	af 59       	subi	r26, 0x9F	; 159
    2ed6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ed8:	fe 01       	movw	r30, r28
    2eda:	e0 59       	subi	r30, 0x90	; 144
    2edc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ede:	80 81       	ld	r24, Z
    2ee0:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ee2:	fe 01       	movw	r30, r28
    2ee4:	ef 59       	subi	r30, 0x9F	; 159
    2ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee8:	80 81       	ld	r24, Z
    2eea:	8a 95       	dec	r24
    2eec:	f1 f7       	brne	.-4      	; 0x2eea <LCDByte+0x2c0>
    2eee:	fe 01       	movw	r30, r28
    2ef0:	ef 59       	subi	r30, 0x9F	; 159
    2ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef4:	80 83       	st	Z, r24

_delay_us(0.500);		//tAS

SET_E();
    2ef6:	a5 e3       	ldi	r26, 0x35	; 53
    2ef8:	b0 e0       	ldi	r27, 0x00	; 0
    2efa:	e5 e3       	ldi	r30, 0x35	; 53
    2efc:	f0 e0       	ldi	r31, 0x00	; 0
    2efe:	80 81       	ld	r24, Z
    2f00:	80 68       	ori	r24, 0x80	; 128
    2f02:	8c 93       	st	X, r24

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
    2f04:	e5 e3       	ldi	r30, 0x35	; 53
    2f06:	f0 e0       	ldi	r31, 0x00	; 0
    2f08:	80 81       	ld	r24, Z
    2f0a:	98 2f       	mov	r25, r24
    2f0c:	90 7f       	andi	r25, 0xF0	; 240
    2f0e:	fe 01       	movw	r30, r28
    2f10:	e5 58       	subi	r30, 0x85	; 133
    2f12:	ff 4f       	sbci	r31, 0xFF	; 255
    2f14:	80 81       	ld	r24, Z
    2f16:	89 2b       	or	r24, r25
    2f18:	fe 01       	movw	r30, r28
    2f1a:	e7 58       	subi	r30, 0x87	; 135
    2f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1e:	80 83       	st	Z, r24
LCD_DATA_PORT=temp;
    2f20:	a5 e3       	ldi	r26, 0x35	; 53
    2f22:	b0 e0       	ldi	r27, 0x00	; 0
    2f24:	fe 01       	movw	r30, r28
    2f26:	e7 58       	subi	r30, 0x87	; 135
    2f28:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2a:	80 81       	ld	r24, Z
    2f2c:	8c 93       	st	X, r24
    2f2e:	fe 01       	movw	r30, r28
    2f30:	e3 5a       	subi	r30, 0xA3	; 163
    2f32:	ff 4f       	sbci	r31, 0xFF	; 255
    2f34:	80 e0       	ldi	r24, 0x00	; 0
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	a0 e8       	ldi	r26, 0x80	; 128
    2f3a:	bf e3       	ldi	r27, 0x3F	; 63
    2f3c:	80 83       	st	Z, r24
    2f3e:	91 83       	std	Z+1, r25	; 0x01
    2f40:	a2 83       	std	Z+2, r26	; 0x02
    2f42:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2f44:	8e 01       	movw	r16, r28
    2f46:	07 5a       	subi	r16, 0xA7	; 167
    2f48:	1f 4f       	sbci	r17, 0xFF	; 255
    2f4a:	fe 01       	movw	r30, r28
    2f4c:	e3 5a       	subi	r30, 0xA3	; 163
    2f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f50:	60 81       	ld	r22, Z
    2f52:	71 81       	ldd	r23, Z+1	; 0x01
    2f54:	82 81       	ldd	r24, Z+2	; 0x02
    2f56:	93 81       	ldd	r25, Z+3	; 0x03
    2f58:	2a ef       	ldi	r18, 0xFA	; 250
    2f5a:	3d ee       	ldi	r19, 0xED	; 237
    2f5c:	4b e6       	ldi	r20, 0x6B	; 107
    2f5e:	50 e4       	ldi	r21, 0x40	; 64
    2f60:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    2f64:	dc 01       	movw	r26, r24
    2f66:	cb 01       	movw	r24, r22
    2f68:	f8 01       	movw	r30, r16
    2f6a:	80 83       	st	Z, r24
    2f6c:	91 83       	std	Z+1, r25	; 0x01
    2f6e:	a2 83       	std	Z+2, r26	; 0x02
    2f70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f72:	fe 01       	movw	r30, r28
    2f74:	e7 5a       	subi	r30, 0xA7	; 167
    2f76:	ff 4f       	sbci	r31, 0xFF	; 255
    2f78:	60 81       	ld	r22, Z
    2f7a:	71 81       	ldd	r23, Z+1	; 0x01
    2f7c:	82 81       	ldd	r24, Z+2	; 0x02
    2f7e:	93 81       	ldd	r25, Z+3	; 0x03
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	40 e8       	ldi	r20, 0x80	; 128
    2f86:	5f e3       	ldi	r21, 0x3F	; 63
    2f88:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    2f8c:	88 23       	and	r24, r24
    2f8e:	34 f4       	brge	.+12     	; 0x2f9c <LCDByte+0x372>
		__ticks = 1;
    2f90:	fe 01       	movw	r30, r28
    2f92:	e8 5a       	subi	r30, 0xA8	; 168
    2f94:	ff 4f       	sbci	r31, 0xFF	; 255
    2f96:	81 e0       	ldi	r24, 0x01	; 1
    2f98:	80 83       	st	Z, r24
    2f9a:	e0 c0       	rjmp	.+448    	; 0x315c <LCDByte+0x532>
	else if (__tmp > 255)
    2f9c:	fe 01       	movw	r30, r28
    2f9e:	e7 5a       	subi	r30, 0xA7	; 167
    2fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa2:	60 81       	ld	r22, Z
    2fa4:	71 81       	ldd	r23, Z+1	; 0x01
    2fa6:	82 81       	ldd	r24, Z+2	; 0x02
    2fa8:	93 81       	ldd	r25, Z+3	; 0x03
    2faa:	20 e0       	ldi	r18, 0x00	; 0
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	4f e7       	ldi	r20, 0x7F	; 127
    2fb0:	53 e4       	ldi	r21, 0x43	; 67
    2fb2:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    2fb6:	18 16       	cp	r1, r24
    2fb8:	0c f0       	brlt	.+2      	; 0x2fbc <LCDByte+0x392>
    2fba:	c0 c0       	rjmp	.+384    	; 0x313c <LCDByte+0x512>
	{
		_delay_ms(__us / 1000.0);
    2fbc:	fe 01       	movw	r30, r28
    2fbe:	e3 5a       	subi	r30, 0xA3	; 163
    2fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc2:	60 81       	ld	r22, Z
    2fc4:	71 81       	ldd	r23, Z+1	; 0x01
    2fc6:	82 81       	ldd	r24, Z+2	; 0x02
    2fc8:	93 81       	ldd	r25, Z+3	; 0x03
    2fca:	20 e0       	ldi	r18, 0x00	; 0
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	4a e7       	ldi	r20, 0x7A	; 122
    2fd0:	54 e4       	ldi	r21, 0x44	; 68
    2fd2:	0e 94 a4 3b 	call	0x7748	; 0x7748 <__divsf3>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	fe 01       	movw	r30, r28
    2fdc:	ec 5a       	subi	r30, 0xAC	; 172
    2fde:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe0:	80 83       	st	Z, r24
    2fe2:	91 83       	std	Z+1, r25	; 0x01
    2fe4:	a2 83       	std	Z+2, r26	; 0x02
    2fe6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fe8:	8e 01       	movw	r16, r28
    2fea:	00 5b       	subi	r16, 0xB0	; 176
    2fec:	1f 4f       	sbci	r17, 0xFF	; 255
    2fee:	fe 01       	movw	r30, r28
    2ff0:	ec 5a       	subi	r30, 0xAC	; 172
    2ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff4:	60 81       	ld	r22, Z
    2ff6:	71 81       	ldd	r23, Z+1	; 0x01
    2ff8:	82 81       	ldd	r24, Z+2	; 0x02
    2ffa:	93 81       	ldd	r25, Z+3	; 0x03
    2ffc:	2d ec       	ldi	r18, 0xCD	; 205
    2ffe:	3c ec       	ldi	r19, 0xCC	; 204
    3000:	4c e2       	ldi	r20, 0x2C	; 44
    3002:	55 e4       	ldi	r21, 0x45	; 69
    3004:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    3008:	dc 01       	movw	r26, r24
    300a:	cb 01       	movw	r24, r22
    300c:	f8 01       	movw	r30, r16
    300e:	80 83       	st	Z, r24
    3010:	91 83       	std	Z+1, r25	; 0x01
    3012:	a2 83       	std	Z+2, r26	; 0x02
    3014:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3016:	fe 01       	movw	r30, r28
    3018:	e0 5b       	subi	r30, 0xB0	; 176
    301a:	ff 4f       	sbci	r31, 0xFF	; 255
    301c:	60 81       	ld	r22, Z
    301e:	71 81       	ldd	r23, Z+1	; 0x01
    3020:	82 81       	ldd	r24, Z+2	; 0x02
    3022:	93 81       	ldd	r25, Z+3	; 0x03
    3024:	20 e0       	ldi	r18, 0x00	; 0
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	40 e8       	ldi	r20, 0x80	; 128
    302a:	5f e3       	ldi	r21, 0x3F	; 63
    302c:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    3030:	88 23       	and	r24, r24
    3032:	44 f4       	brge	.+16     	; 0x3044 <LCDByte+0x41a>
		__ticks = 1;
    3034:	fe 01       	movw	r30, r28
    3036:	e2 5b       	subi	r30, 0xB2	; 178
    3038:	ff 4f       	sbci	r31, 0xFF	; 255
    303a:	81 e0       	ldi	r24, 0x01	; 1
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	91 83       	std	Z+1, r25	; 0x01
    3040:	80 83       	st	Z, r24
    3042:	64 c0       	rjmp	.+200    	; 0x310c <LCDByte+0x4e2>
	else if (__tmp > 65535)
    3044:	fe 01       	movw	r30, r28
    3046:	e0 5b       	subi	r30, 0xB0	; 176
    3048:	ff 4f       	sbci	r31, 0xFF	; 255
    304a:	60 81       	ld	r22, Z
    304c:	71 81       	ldd	r23, Z+1	; 0x01
    304e:	82 81       	ldd	r24, Z+2	; 0x02
    3050:	93 81       	ldd	r25, Z+3	; 0x03
    3052:	20 e0       	ldi	r18, 0x00	; 0
    3054:	3f ef       	ldi	r19, 0xFF	; 255
    3056:	4f e7       	ldi	r20, 0x7F	; 127
    3058:	57 e4       	ldi	r21, 0x47	; 71
    305a:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    305e:	18 16       	cp	r1, r24
    3060:	0c f0       	brlt	.+2      	; 0x3064 <LCDByte+0x43a>
    3062:	43 c0       	rjmp	.+134    	; 0x30ea <LCDByte+0x4c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3064:	fe 01       	movw	r30, r28
    3066:	ec 5a       	subi	r30, 0xAC	; 172
    3068:	ff 4f       	sbci	r31, 0xFF	; 255
    306a:	60 81       	ld	r22, Z
    306c:	71 81       	ldd	r23, Z+1	; 0x01
    306e:	82 81       	ldd	r24, Z+2	; 0x02
    3070:	93 81       	ldd	r25, Z+3	; 0x03
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	40 e2       	ldi	r20, 0x20	; 32
    3078:	51 e4       	ldi	r21, 0x41	; 65
    307a:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    307e:	dc 01       	movw	r26, r24
    3080:	cb 01       	movw	r24, r22
    3082:	8e 01       	movw	r16, r28
    3084:	02 5b       	subi	r16, 0xB2	; 178
    3086:	1f 4f       	sbci	r17, 0xFF	; 255
    3088:	bc 01       	movw	r22, r24
    308a:	cd 01       	movw	r24, r26
    308c:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    3090:	dc 01       	movw	r26, r24
    3092:	cb 01       	movw	r24, r22
    3094:	f8 01       	movw	r30, r16
    3096:	91 83       	std	Z+1, r25	; 0x01
    3098:	80 83       	st	Z, r24
    309a:	1f c0       	rjmp	.+62     	; 0x30da <LCDByte+0x4b0>
    309c:	fe 01       	movw	r30, r28
    309e:	e4 5b       	subi	r30, 0xB4	; 180
    30a0:	ff 4f       	sbci	r31, 0xFF	; 255
    30a2:	84 e1       	ldi	r24, 0x14	; 20
    30a4:	91 e0       	ldi	r25, 0x01	; 1
    30a6:	91 83       	std	Z+1, r25	; 0x01
    30a8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    30aa:	fe 01       	movw	r30, r28
    30ac:	e4 5b       	subi	r30, 0xB4	; 180
    30ae:	ff 4f       	sbci	r31, 0xFF	; 255
    30b0:	80 81       	ld	r24, Z
    30b2:	91 81       	ldd	r25, Z+1	; 0x01
    30b4:	01 97       	sbiw	r24, 0x01	; 1
    30b6:	f1 f7       	brne	.-4      	; 0x30b4 <LCDByte+0x48a>
    30b8:	fe 01       	movw	r30, r28
    30ba:	e4 5b       	subi	r30, 0xB4	; 180
    30bc:	ff 4f       	sbci	r31, 0xFF	; 255
    30be:	91 83       	std	Z+1, r25	; 0x01
    30c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30c2:	de 01       	movw	r26, r28
    30c4:	a2 5b       	subi	r26, 0xB2	; 178
    30c6:	bf 4f       	sbci	r27, 0xFF	; 255
    30c8:	fe 01       	movw	r30, r28
    30ca:	e2 5b       	subi	r30, 0xB2	; 178
    30cc:	ff 4f       	sbci	r31, 0xFF	; 255
    30ce:	80 81       	ld	r24, Z
    30d0:	91 81       	ldd	r25, Z+1	; 0x01
    30d2:	01 97       	sbiw	r24, 0x01	; 1
    30d4:	11 96       	adiw	r26, 0x01	; 1
    30d6:	9c 93       	st	X, r25
    30d8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30da:	fe 01       	movw	r30, r28
    30dc:	e2 5b       	subi	r30, 0xB2	; 178
    30de:	ff 4f       	sbci	r31, 0xFF	; 255
    30e0:	80 81       	ld	r24, Z
    30e2:	91 81       	ldd	r25, Z+1	; 0x01
    30e4:	00 97       	sbiw	r24, 0x00	; 0
    30e6:	d1 f6       	brne	.-76     	; 0x309c <LCDByte+0x472>
    30e8:	4b c0       	rjmp	.+150    	; 0x3180 <LCDByte+0x556>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ea:	8e 01       	movw	r16, r28
    30ec:	02 5b       	subi	r16, 0xB2	; 178
    30ee:	1f 4f       	sbci	r17, 0xFF	; 255
    30f0:	fe 01       	movw	r30, r28
    30f2:	e0 5b       	subi	r30, 0xB0	; 176
    30f4:	ff 4f       	sbci	r31, 0xFF	; 255
    30f6:	60 81       	ld	r22, Z
    30f8:	71 81       	ldd	r23, Z+1	; 0x01
    30fa:	82 81       	ldd	r24, Z+2	; 0x02
    30fc:	93 81       	ldd	r25, Z+3	; 0x03
    30fe:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    3102:	dc 01       	movw	r26, r24
    3104:	cb 01       	movw	r24, r22
    3106:	f8 01       	movw	r30, r16
    3108:	91 83       	std	Z+1, r25	; 0x01
    310a:	80 83       	st	Z, r24
    310c:	de 01       	movw	r26, r28
    310e:	a6 5b       	subi	r26, 0xB6	; 182
    3110:	bf 4f       	sbci	r27, 0xFF	; 255
    3112:	fe 01       	movw	r30, r28
    3114:	e2 5b       	subi	r30, 0xB2	; 178
    3116:	ff 4f       	sbci	r31, 0xFF	; 255
    3118:	80 81       	ld	r24, Z
    311a:	91 81       	ldd	r25, Z+1	; 0x01
    311c:	11 96       	adiw	r26, 0x01	; 1
    311e:	9c 93       	st	X, r25
    3120:	8e 93       	st	-X, r24
    3122:	fe 01       	movw	r30, r28
    3124:	e6 5b       	subi	r30, 0xB6	; 182
    3126:	ff 4f       	sbci	r31, 0xFF	; 255
    3128:	80 81       	ld	r24, Z
    312a:	91 81       	ldd	r25, Z+1	; 0x01
    312c:	01 97       	sbiw	r24, 0x01	; 1
    312e:	f1 f7       	brne	.-4      	; 0x312c <LCDByte+0x502>
    3130:	fe 01       	movw	r30, r28
    3132:	e6 5b       	subi	r30, 0xB6	; 182
    3134:	ff 4f       	sbci	r31, 0xFF	; 255
    3136:	91 83       	std	Z+1, r25	; 0x01
    3138:	80 83       	st	Z, r24
    313a:	22 c0       	rjmp	.+68     	; 0x3180 <LCDByte+0x556>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    313c:	8e 01       	movw	r16, r28
    313e:	08 5a       	subi	r16, 0xA8	; 168
    3140:	1f 4f       	sbci	r17, 0xFF	; 255
    3142:	fe 01       	movw	r30, r28
    3144:	e7 5a       	subi	r30, 0xA7	; 167
    3146:	ff 4f       	sbci	r31, 0xFF	; 255
    3148:	60 81       	ld	r22, Z
    314a:	71 81       	ldd	r23, Z+1	; 0x01
    314c:	82 81       	ldd	r24, Z+2	; 0x02
    314e:	93 81       	ldd	r25, Z+3	; 0x03
    3150:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    3154:	dc 01       	movw	r26, r24
    3156:	cb 01       	movw	r24, r22
    3158:	f8 01       	movw	r30, r16
    315a:	80 83       	st	Z, r24
    315c:	de 01       	movw	r26, r28
    315e:	a7 5b       	subi	r26, 0xB7	; 183
    3160:	bf 4f       	sbci	r27, 0xFF	; 255
    3162:	fe 01       	movw	r30, r28
    3164:	e8 5a       	subi	r30, 0xA8	; 168
    3166:	ff 4f       	sbci	r31, 0xFF	; 255
    3168:	80 81       	ld	r24, Z
    316a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    316c:	fe 01       	movw	r30, r28
    316e:	e7 5b       	subi	r30, 0xB7	; 183
    3170:	ff 4f       	sbci	r31, 0xFF	; 255
    3172:	80 81       	ld	r24, Z
    3174:	8a 95       	dec	r24
    3176:	f1 f7       	brne	.-4      	; 0x3174 <LCDByte+0x54a>
    3178:	fe 01       	movw	r30, r28
    317a:	e7 5b       	subi	r30, 0xB7	; 183
    317c:	ff 4f       	sbci	r31, 0xFF	; 255
    317e:	80 83       	st	Z, r24

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
    3180:	a5 e3       	ldi	r26, 0x35	; 53
    3182:	b0 e0       	ldi	r27, 0x00	; 0
    3184:	e5 e3       	ldi	r30, 0x35	; 53
    3186:	f0 e0       	ldi	r31, 0x00	; 0
    3188:	80 81       	ld	r24, Z
    318a:	8f 77       	andi	r24, 0x7F	; 127
    318c:	8c 93       	st	X, r24
    318e:	fe 01       	movw	r30, r28
    3190:	eb 5b       	subi	r30, 0xBB	; 187
    3192:	ff 4f       	sbci	r31, 0xFF	; 255
    3194:	80 e0       	ldi	r24, 0x00	; 0
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	a0 e8       	ldi	r26, 0x80	; 128
    319a:	bf e3       	ldi	r27, 0x3F	; 63
    319c:	80 83       	st	Z, r24
    319e:	91 83       	std	Z+1, r25	; 0x01
    31a0:	a2 83       	std	Z+2, r26	; 0x02
    31a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    31a4:	8e 01       	movw	r16, r28
    31a6:	0f 5b       	subi	r16, 0xBF	; 191
    31a8:	1f 4f       	sbci	r17, 0xFF	; 255
    31aa:	fe 01       	movw	r30, r28
    31ac:	eb 5b       	subi	r30, 0xBB	; 187
    31ae:	ff 4f       	sbci	r31, 0xFF	; 255
    31b0:	60 81       	ld	r22, Z
    31b2:	71 81       	ldd	r23, Z+1	; 0x01
    31b4:	82 81       	ldd	r24, Z+2	; 0x02
    31b6:	93 81       	ldd	r25, Z+3	; 0x03
    31b8:	2a ef       	ldi	r18, 0xFA	; 250
    31ba:	3d ee       	ldi	r19, 0xED	; 237
    31bc:	4b e6       	ldi	r20, 0x6B	; 107
    31be:	50 e4       	ldi	r21, 0x40	; 64
    31c0:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    31c4:	dc 01       	movw	r26, r24
    31c6:	cb 01       	movw	r24, r22
    31c8:	f8 01       	movw	r30, r16
    31ca:	80 83       	st	Z, r24
    31cc:	91 83       	std	Z+1, r25	; 0x01
    31ce:	a2 83       	std	Z+2, r26	; 0x02
    31d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31d2:	fe 01       	movw	r30, r28
    31d4:	ef 5b       	subi	r30, 0xBF	; 191
    31d6:	ff 4f       	sbci	r31, 0xFF	; 255
    31d8:	60 81       	ld	r22, Z
    31da:	71 81       	ldd	r23, Z+1	; 0x01
    31dc:	82 81       	ldd	r24, Z+2	; 0x02
    31de:	93 81       	ldd	r25, Z+3	; 0x03
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	40 e8       	ldi	r20, 0x80	; 128
    31e6:	5f e3       	ldi	r21, 0x3F	; 63
    31e8:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    31ec:	88 23       	and	r24, r24
    31ee:	34 f4       	brge	.+12     	; 0x31fc <LCDByte+0x5d2>
		__ticks = 1;
    31f0:	81 e0       	ldi	r24, 0x01	; 1
    31f2:	fe 01       	movw	r30, r28
    31f4:	e0 5c       	subi	r30, 0xC0	; 192
    31f6:	ff 4f       	sbci	r31, 0xFF	; 255
    31f8:	80 83       	st	Z, r24
    31fa:	9d c0       	rjmp	.+314    	; 0x3336 <LCDByte+0x70c>
	else if (__tmp > 255)
    31fc:	fe 01       	movw	r30, r28
    31fe:	ef 5b       	subi	r30, 0xBF	; 191
    3200:	ff 4f       	sbci	r31, 0xFF	; 255
    3202:	60 81       	ld	r22, Z
    3204:	71 81       	ldd	r23, Z+1	; 0x01
    3206:	82 81       	ldd	r24, Z+2	; 0x02
    3208:	93 81       	ldd	r25, Z+3	; 0x03
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	4f e7       	ldi	r20, 0x7F	; 127
    3210:	53 e4       	ldi	r21, 0x43	; 67
    3212:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    3216:	18 16       	cp	r1, r24
    3218:	0c f0       	brlt	.+2      	; 0x321c <LCDByte+0x5f2>
    321a:	7e c0       	rjmp	.+252    	; 0x3318 <LCDByte+0x6ee>
	{
		_delay_ms(__us / 1000.0);
    321c:	fe 01       	movw	r30, r28
    321e:	eb 5b       	subi	r30, 0xBB	; 187
    3220:	ff 4f       	sbci	r31, 0xFF	; 255
    3222:	60 81       	ld	r22, Z
    3224:	71 81       	ldd	r23, Z+1	; 0x01
    3226:	82 81       	ldd	r24, Z+2	; 0x02
    3228:	93 81       	ldd	r25, Z+3	; 0x03
    322a:	20 e0       	ldi	r18, 0x00	; 0
    322c:	30 e0       	ldi	r19, 0x00	; 0
    322e:	4a e7       	ldi	r20, 0x7A	; 122
    3230:	54 e4       	ldi	r21, 0x44	; 68
    3232:	0e 94 a4 3b 	call	0x7748	; 0x7748 <__divsf3>
    3236:	dc 01       	movw	r26, r24
    3238:	cb 01       	movw	r24, r22
    323a:	8c af       	std	Y+60, r24	; 0x3c
    323c:	9d af       	std	Y+61, r25	; 0x3d
    323e:	ae af       	std	Y+62, r26	; 0x3e
    3240:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3242:	6c ad       	ldd	r22, Y+60	; 0x3c
    3244:	7d ad       	ldd	r23, Y+61	; 0x3d
    3246:	8e ad       	ldd	r24, Y+62	; 0x3e
    3248:	9f ad       	ldd	r25, Y+63	; 0x3f
    324a:	2d ec       	ldi	r18, 0xCD	; 205
    324c:	3c ec       	ldi	r19, 0xCC	; 204
    324e:	4c e2       	ldi	r20, 0x2C	; 44
    3250:	55 e4       	ldi	r21, 0x45	; 69
    3252:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    3256:	dc 01       	movw	r26, r24
    3258:	cb 01       	movw	r24, r22
    325a:	88 af       	std	Y+56, r24	; 0x38
    325c:	99 af       	std	Y+57, r25	; 0x39
    325e:	aa af       	std	Y+58, r26	; 0x3a
    3260:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3262:	68 ad       	ldd	r22, Y+56	; 0x38
    3264:	79 ad       	ldd	r23, Y+57	; 0x39
    3266:	8a ad       	ldd	r24, Y+58	; 0x3a
    3268:	9b ad       	ldd	r25, Y+59	; 0x3b
    326a:	20 e0       	ldi	r18, 0x00	; 0
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	40 e8       	ldi	r20, 0x80	; 128
    3270:	5f e3       	ldi	r21, 0x3F	; 63
    3272:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    3276:	88 23       	and	r24, r24
    3278:	2c f4       	brge	.+10     	; 0x3284 <LCDByte+0x65a>
		__ticks = 1;
    327a:	81 e0       	ldi	r24, 0x01	; 1
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	9f ab       	std	Y+55, r25	; 0x37
    3280:	8e ab       	std	Y+54, r24	; 0x36
    3282:	3f c0       	rjmp	.+126    	; 0x3302 <LCDByte+0x6d8>
	else if (__tmp > 65535)
    3284:	68 ad       	ldd	r22, Y+56	; 0x38
    3286:	79 ad       	ldd	r23, Y+57	; 0x39
    3288:	8a ad       	ldd	r24, Y+58	; 0x3a
    328a:	9b ad       	ldd	r25, Y+59	; 0x3b
    328c:	20 e0       	ldi	r18, 0x00	; 0
    328e:	3f ef       	ldi	r19, 0xFF	; 255
    3290:	4f e7       	ldi	r20, 0x7F	; 127
    3292:	57 e4       	ldi	r21, 0x47	; 71
    3294:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    3298:	18 16       	cp	r1, r24
    329a:	4c f5       	brge	.+82     	; 0x32ee <LCDByte+0x6c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    329c:	6c ad       	ldd	r22, Y+60	; 0x3c
    329e:	7d ad       	ldd	r23, Y+61	; 0x3d
    32a0:	8e ad       	ldd	r24, Y+62	; 0x3e
    32a2:	9f ad       	ldd	r25, Y+63	; 0x3f
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	30 e0       	ldi	r19, 0x00	; 0
    32a8:	40 e2       	ldi	r20, 0x20	; 32
    32aa:	51 e4       	ldi	r21, 0x41	; 65
    32ac:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    32b0:	dc 01       	movw	r26, r24
    32b2:	cb 01       	movw	r24, r22
    32b4:	bc 01       	movw	r22, r24
    32b6:	cd 01       	movw	r24, r26
    32b8:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    32bc:	dc 01       	movw	r26, r24
    32be:	cb 01       	movw	r24, r22
    32c0:	9f ab       	std	Y+55, r25	; 0x37
    32c2:	8e ab       	std	Y+54, r24	; 0x36
    32c4:	0f c0       	rjmp	.+30     	; 0x32e4 <LCDByte+0x6ba>
    32c6:	84 e1       	ldi	r24, 0x14	; 20
    32c8:	91 e0       	ldi	r25, 0x01	; 1
    32ca:	9d ab       	std	Y+53, r25	; 0x35
    32cc:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    32ce:	8c a9       	ldd	r24, Y+52	; 0x34
    32d0:	9d a9       	ldd	r25, Y+53	; 0x35
    32d2:	01 97       	sbiw	r24, 0x01	; 1
    32d4:	f1 f7       	brne	.-4      	; 0x32d2 <LCDByte+0x6a8>
    32d6:	9d ab       	std	Y+53, r25	; 0x35
    32d8:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32da:	8e a9       	ldd	r24, Y+54	; 0x36
    32dc:	9f a9       	ldd	r25, Y+55	; 0x37
    32de:	01 97       	sbiw	r24, 0x01	; 1
    32e0:	9f ab       	std	Y+55, r25	; 0x37
    32e2:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32e4:	8e a9       	ldd	r24, Y+54	; 0x36
    32e6:	9f a9       	ldd	r25, Y+55	; 0x37
    32e8:	00 97       	sbiw	r24, 0x00	; 0
    32ea:	69 f7       	brne	.-38     	; 0x32c6 <LCDByte+0x69c>
    32ec:	2d c0       	rjmp	.+90     	; 0x3348 <LCDByte+0x71e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ee:	68 ad       	ldd	r22, Y+56	; 0x38
    32f0:	79 ad       	ldd	r23, Y+57	; 0x39
    32f2:	8a ad       	ldd	r24, Y+58	; 0x3a
    32f4:	9b ad       	ldd	r25, Y+59	; 0x3b
    32f6:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    32fa:	dc 01       	movw	r26, r24
    32fc:	cb 01       	movw	r24, r22
    32fe:	9f ab       	std	Y+55, r25	; 0x37
    3300:	8e ab       	std	Y+54, r24	; 0x36
    3302:	8e a9       	ldd	r24, Y+54	; 0x36
    3304:	9f a9       	ldd	r25, Y+55	; 0x37
    3306:	9b ab       	std	Y+51, r25	; 0x33
    3308:	8a ab       	std	Y+50, r24	; 0x32
    330a:	8a a9       	ldd	r24, Y+50	; 0x32
    330c:	9b a9       	ldd	r25, Y+51	; 0x33
    330e:	01 97       	sbiw	r24, 0x01	; 1
    3310:	f1 f7       	brne	.-4      	; 0x330e <LCDByte+0x6e4>
    3312:	9b ab       	std	Y+51, r25	; 0x33
    3314:	8a ab       	std	Y+50, r24	; 0x32
    3316:	18 c0       	rjmp	.+48     	; 0x3348 <LCDByte+0x71e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3318:	fe 01       	movw	r30, r28
    331a:	ef 5b       	subi	r30, 0xBF	; 191
    331c:	ff 4f       	sbci	r31, 0xFF	; 255
    331e:	60 81       	ld	r22, Z
    3320:	71 81       	ldd	r23, Z+1	; 0x01
    3322:	82 81       	ldd	r24, Z+2	; 0x02
    3324:	93 81       	ldd	r25, Z+3	; 0x03
    3326:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    332a:	dc 01       	movw	r26, r24
    332c:	cb 01       	movw	r24, r22
    332e:	fe 01       	movw	r30, r28
    3330:	e0 5c       	subi	r30, 0xC0	; 192
    3332:	ff 4f       	sbci	r31, 0xFF	; 255
    3334:	80 83       	st	Z, r24
    3336:	fe 01       	movw	r30, r28
    3338:	e0 5c       	subi	r30, 0xC0	; 192
    333a:	ff 4f       	sbci	r31, 0xFF	; 255
    333c:	80 81       	ld	r24, Z
    333e:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3340:	89 a9       	ldd	r24, Y+49	; 0x31
    3342:	8a 95       	dec	r24
    3344:	f1 f7       	brne	.-4      	; 0x3342 <LCDByte+0x718>
    3346:	89 ab       	std	Y+49, r24	; 0x31

_delay_us(1);

//Send the lower nibble
SET_E();
    3348:	a5 e3       	ldi	r26, 0x35	; 53
    334a:	b0 e0       	ldi	r27, 0x00	; 0
    334c:	e5 e3       	ldi	r30, 0x35	; 53
    334e:	f0 e0       	ldi	r31, 0x00	; 0
    3350:	80 81       	ld	r24, Z
    3352:	80 68       	ori	r24, 0x80	; 128
    3354:	8c 93       	st	X, r24

temp=(LCD_DATA_PORT & 0XF0)|(ln);
    3356:	e5 e3       	ldi	r30, 0x35	; 53
    3358:	f0 e0       	ldi	r31, 0x00	; 0
    335a:	80 81       	ld	r24, Z
    335c:	98 2f       	mov	r25, r24
    335e:	90 7f       	andi	r25, 0xF0	; 240
    3360:	fe 01       	movw	r30, r28
    3362:	e6 58       	subi	r30, 0x86	; 134
    3364:	ff 4f       	sbci	r31, 0xFF	; 255
    3366:	80 81       	ld	r24, Z
    3368:	89 2b       	or	r24, r25
    336a:	fe 01       	movw	r30, r28
    336c:	e7 58       	subi	r30, 0x87	; 135
    336e:	ff 4f       	sbci	r31, 0xFF	; 255
    3370:	80 83       	st	Z, r24

LCD_DATA_PORT=temp;
    3372:	a5 e3       	ldi	r26, 0x35	; 53
    3374:	b0 e0       	ldi	r27, 0x00	; 0
    3376:	fe 01       	movw	r30, r28
    3378:	e7 58       	subi	r30, 0x87	; 135
    337a:	ff 4f       	sbci	r31, 0xFF	; 255
    337c:	80 81       	ld	r24, Z
    337e:	8c 93       	st	X, r24
    3380:	80 e0       	ldi	r24, 0x00	; 0
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	a0 e8       	ldi	r26, 0x80	; 128
    3386:	bf e3       	ldi	r27, 0x3F	; 63
    3388:	8d a7       	std	Y+45, r24	; 0x2d
    338a:	9e a7       	std	Y+46, r25	; 0x2e
    338c:	af a7       	std	Y+47, r26	; 0x2f
    338e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3390:	6d a5       	ldd	r22, Y+45	; 0x2d
    3392:	7e a5       	ldd	r23, Y+46	; 0x2e
    3394:	8f a5       	ldd	r24, Y+47	; 0x2f
    3396:	98 a9       	ldd	r25, Y+48	; 0x30
    3398:	2a ef       	ldi	r18, 0xFA	; 250
    339a:	3d ee       	ldi	r19, 0xED	; 237
    339c:	4b e6       	ldi	r20, 0x6B	; 107
    339e:	50 e4       	ldi	r21, 0x40	; 64
    33a0:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    33a4:	dc 01       	movw	r26, r24
    33a6:	cb 01       	movw	r24, r22
    33a8:	89 a7       	std	Y+41, r24	; 0x29
    33aa:	9a a7       	std	Y+42, r25	; 0x2a
    33ac:	ab a7       	std	Y+43, r26	; 0x2b
    33ae:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    33b0:	69 a5       	ldd	r22, Y+41	; 0x29
    33b2:	7a a5       	ldd	r23, Y+42	; 0x2a
    33b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    33b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    33b8:	20 e0       	ldi	r18, 0x00	; 0
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	40 e8       	ldi	r20, 0x80	; 128
    33be:	5f e3       	ldi	r21, 0x3F	; 63
    33c0:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    33c4:	88 23       	and	r24, r24
    33c6:	1c f4       	brge	.+6      	; 0x33ce <LCDByte+0x7a4>
		__ticks = 1;
    33c8:	81 e0       	ldi	r24, 0x01	; 1
    33ca:	88 a7       	std	Y+40, r24	; 0x28
    33cc:	91 c0       	rjmp	.+290    	; 0x34f0 <LCDByte+0x8c6>
	else if (__tmp > 255)
    33ce:	69 a5       	ldd	r22, Y+41	; 0x29
    33d0:	7a a5       	ldd	r23, Y+42	; 0x2a
    33d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    33d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    33d6:	20 e0       	ldi	r18, 0x00	; 0
    33d8:	30 e0       	ldi	r19, 0x00	; 0
    33da:	4f e7       	ldi	r20, 0x7F	; 127
    33dc:	53 e4       	ldi	r21, 0x43	; 67
    33de:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    33e2:	18 16       	cp	r1, r24
    33e4:	0c f0       	brlt	.+2      	; 0x33e8 <LCDByte+0x7be>
    33e6:	7b c0       	rjmp	.+246    	; 0x34de <LCDByte+0x8b4>
	{
		_delay_ms(__us / 1000.0);
    33e8:	6d a5       	ldd	r22, Y+45	; 0x2d
    33ea:	7e a5       	ldd	r23, Y+46	; 0x2e
    33ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    33ee:	98 a9       	ldd	r25, Y+48	; 0x30
    33f0:	20 e0       	ldi	r18, 0x00	; 0
    33f2:	30 e0       	ldi	r19, 0x00	; 0
    33f4:	4a e7       	ldi	r20, 0x7A	; 122
    33f6:	54 e4       	ldi	r21, 0x44	; 68
    33f8:	0e 94 a4 3b 	call	0x7748	; 0x7748 <__divsf3>
    33fc:	dc 01       	movw	r26, r24
    33fe:	cb 01       	movw	r24, r22
    3400:	8c a3       	std	Y+36, r24	; 0x24
    3402:	9d a3       	std	Y+37, r25	; 0x25
    3404:	ae a3       	std	Y+38, r26	; 0x26
    3406:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3408:	6c a1       	ldd	r22, Y+36	; 0x24
    340a:	7d a1       	ldd	r23, Y+37	; 0x25
    340c:	8e a1       	ldd	r24, Y+38	; 0x26
    340e:	9f a1       	ldd	r25, Y+39	; 0x27
    3410:	2d ec       	ldi	r18, 0xCD	; 205
    3412:	3c ec       	ldi	r19, 0xCC	; 204
    3414:	4c e2       	ldi	r20, 0x2C	; 44
    3416:	55 e4       	ldi	r21, 0x45	; 69
    3418:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    341c:	dc 01       	movw	r26, r24
    341e:	cb 01       	movw	r24, r22
    3420:	88 a3       	std	Y+32, r24	; 0x20
    3422:	99 a3       	std	Y+33, r25	; 0x21
    3424:	aa a3       	std	Y+34, r26	; 0x22
    3426:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3428:	68 a1       	ldd	r22, Y+32	; 0x20
    342a:	79 a1       	ldd	r23, Y+33	; 0x21
    342c:	8a a1       	ldd	r24, Y+34	; 0x22
    342e:	9b a1       	ldd	r25, Y+35	; 0x23
    3430:	20 e0       	ldi	r18, 0x00	; 0
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	40 e8       	ldi	r20, 0x80	; 128
    3436:	5f e3       	ldi	r21, 0x3F	; 63
    3438:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    343c:	88 23       	and	r24, r24
    343e:	2c f4       	brge	.+10     	; 0x344a <LCDByte+0x820>
		__ticks = 1;
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	9f 8f       	std	Y+31, r25	; 0x1f
    3446:	8e 8f       	std	Y+30, r24	; 0x1e
    3448:	3f c0       	rjmp	.+126    	; 0x34c8 <LCDByte+0x89e>
	else if (__tmp > 65535)
    344a:	68 a1       	ldd	r22, Y+32	; 0x20
    344c:	79 a1       	ldd	r23, Y+33	; 0x21
    344e:	8a a1       	ldd	r24, Y+34	; 0x22
    3450:	9b a1       	ldd	r25, Y+35	; 0x23
    3452:	20 e0       	ldi	r18, 0x00	; 0
    3454:	3f ef       	ldi	r19, 0xFF	; 255
    3456:	4f e7       	ldi	r20, 0x7F	; 127
    3458:	57 e4       	ldi	r21, 0x47	; 71
    345a:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    345e:	18 16       	cp	r1, r24
    3460:	4c f5       	brge	.+82     	; 0x34b4 <LCDByte+0x88a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3462:	6c a1       	ldd	r22, Y+36	; 0x24
    3464:	7d a1       	ldd	r23, Y+37	; 0x25
    3466:	8e a1       	ldd	r24, Y+38	; 0x26
    3468:	9f a1       	ldd	r25, Y+39	; 0x27
    346a:	20 e0       	ldi	r18, 0x00	; 0
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	40 e2       	ldi	r20, 0x20	; 32
    3470:	51 e4       	ldi	r21, 0x41	; 65
    3472:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    3476:	dc 01       	movw	r26, r24
    3478:	cb 01       	movw	r24, r22
    347a:	bc 01       	movw	r22, r24
    347c:	cd 01       	movw	r24, r26
    347e:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    3482:	dc 01       	movw	r26, r24
    3484:	cb 01       	movw	r24, r22
    3486:	9f 8f       	std	Y+31, r25	; 0x1f
    3488:	8e 8f       	std	Y+30, r24	; 0x1e
    348a:	0f c0       	rjmp	.+30     	; 0x34aa <LCDByte+0x880>
    348c:	84 e1       	ldi	r24, 0x14	; 20
    348e:	91 e0       	ldi	r25, 0x01	; 1
    3490:	9d 8f       	std	Y+29, r25	; 0x1d
    3492:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3494:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3496:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3498:	01 97       	sbiw	r24, 0x01	; 1
    349a:	f1 f7       	brne	.-4      	; 0x3498 <LCDByte+0x86e>
    349c:	9d 8f       	std	Y+29, r25	; 0x1d
    349e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    34a2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    34a4:	01 97       	sbiw	r24, 0x01	; 1
    34a6:	9f 8f       	std	Y+31, r25	; 0x1f
    34a8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    34ac:	9f 8d       	ldd	r25, Y+31	; 0x1f
    34ae:	00 97       	sbiw	r24, 0x00	; 0
    34b0:	69 f7       	brne	.-38     	; 0x348c <LCDByte+0x862>
    34b2:	24 c0       	rjmp	.+72     	; 0x34fc <LCDByte+0x8d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34b4:	68 a1       	ldd	r22, Y+32	; 0x20
    34b6:	79 a1       	ldd	r23, Y+33	; 0x21
    34b8:	8a a1       	ldd	r24, Y+34	; 0x22
    34ba:	9b a1       	ldd	r25, Y+35	; 0x23
    34bc:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    34c0:	dc 01       	movw	r26, r24
    34c2:	cb 01       	movw	r24, r22
    34c4:	9f 8f       	std	Y+31, r25	; 0x1f
    34c6:	8e 8f       	std	Y+30, r24	; 0x1e
    34c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    34ca:	9f 8d       	ldd	r25, Y+31	; 0x1f
    34cc:	9b 8f       	std	Y+27, r25	; 0x1b
    34ce:	8a 8f       	std	Y+26, r24	; 0x1a
    34d0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    34d2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    34d4:	01 97       	sbiw	r24, 0x01	; 1
    34d6:	f1 f7       	brne	.-4      	; 0x34d4 <LCDByte+0x8aa>
    34d8:	9b 8f       	std	Y+27, r25	; 0x1b
    34da:	8a 8f       	std	Y+26, r24	; 0x1a
    34dc:	0f c0       	rjmp	.+30     	; 0x34fc <LCDByte+0x8d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    34de:	69 a5       	ldd	r22, Y+41	; 0x29
    34e0:	7a a5       	ldd	r23, Y+42	; 0x2a
    34e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    34e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    34e6:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    34ea:	dc 01       	movw	r26, r24
    34ec:	cb 01       	movw	r24, r22
    34ee:	88 a7       	std	Y+40, r24	; 0x28
    34f0:	88 a5       	ldd	r24, Y+40	; 0x28
    34f2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    34f4:	89 8d       	ldd	r24, Y+25	; 0x19
    34f6:	8a 95       	dec	r24
    34f8:	f1 f7       	brne	.-4      	; 0x34f6 <LCDByte+0x8cc>
    34fa:	89 8f       	std	Y+25, r24	; 0x19

_delay_us(1);			//tEH

//SEND

CLEAR_E();
    34fc:	a5 e3       	ldi	r26, 0x35	; 53
    34fe:	b0 e0       	ldi	r27, 0x00	; 0
    3500:	e5 e3       	ldi	r30, 0x35	; 53
    3502:	f0 e0       	ldi	r31, 0x00	; 0
    3504:	80 81       	ld	r24, Z
    3506:	8f 77       	andi	r24, 0x7F	; 127
    3508:	8c 93       	st	X, r24
    350a:	80 e0       	ldi	r24, 0x00	; 0
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	a0 e8       	ldi	r26, 0x80	; 128
    3510:	bf e3       	ldi	r27, 0x3F	; 63
    3512:	8d 8b       	std	Y+21, r24	; 0x15
    3514:	9e 8b       	std	Y+22, r25	; 0x16
    3516:	af 8b       	std	Y+23, r26	; 0x17
    3518:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    351a:	6d 89       	ldd	r22, Y+21	; 0x15
    351c:	7e 89       	ldd	r23, Y+22	; 0x16
    351e:	8f 89       	ldd	r24, Y+23	; 0x17
    3520:	98 8d       	ldd	r25, Y+24	; 0x18
    3522:	2a ef       	ldi	r18, 0xFA	; 250
    3524:	3d ee       	ldi	r19, 0xED	; 237
    3526:	4b e6       	ldi	r20, 0x6B	; 107
    3528:	50 e4       	ldi	r21, 0x40	; 64
    352a:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    352e:	dc 01       	movw	r26, r24
    3530:	cb 01       	movw	r24, r22
    3532:	89 8b       	std	Y+17, r24	; 0x11
    3534:	9a 8b       	std	Y+18, r25	; 0x12
    3536:	ab 8b       	std	Y+19, r26	; 0x13
    3538:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    353a:	69 89       	ldd	r22, Y+17	; 0x11
    353c:	7a 89       	ldd	r23, Y+18	; 0x12
    353e:	8b 89       	ldd	r24, Y+19	; 0x13
    3540:	9c 89       	ldd	r25, Y+20	; 0x14
    3542:	20 e0       	ldi	r18, 0x00	; 0
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	40 e8       	ldi	r20, 0x80	; 128
    3548:	5f e3       	ldi	r21, 0x3F	; 63
    354a:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    354e:	88 23       	and	r24, r24
    3550:	1c f4       	brge	.+6      	; 0x3558 <LCDByte+0x92e>
		__ticks = 1;
    3552:	81 e0       	ldi	r24, 0x01	; 1
    3554:	88 8b       	std	Y+16, r24	; 0x10
    3556:	91 c0       	rjmp	.+290    	; 0x367a <LCDByte+0xa50>
	else if (__tmp > 255)
    3558:	69 89       	ldd	r22, Y+17	; 0x11
    355a:	7a 89       	ldd	r23, Y+18	; 0x12
    355c:	8b 89       	ldd	r24, Y+19	; 0x13
    355e:	9c 89       	ldd	r25, Y+20	; 0x14
    3560:	20 e0       	ldi	r18, 0x00	; 0
    3562:	30 e0       	ldi	r19, 0x00	; 0
    3564:	4f e7       	ldi	r20, 0x7F	; 127
    3566:	53 e4       	ldi	r21, 0x43	; 67
    3568:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    356c:	18 16       	cp	r1, r24
    356e:	0c f0       	brlt	.+2      	; 0x3572 <LCDByte+0x948>
    3570:	7b c0       	rjmp	.+246    	; 0x3668 <LCDByte+0xa3e>
	{
		_delay_ms(__us / 1000.0);
    3572:	6d 89       	ldd	r22, Y+21	; 0x15
    3574:	7e 89       	ldd	r23, Y+22	; 0x16
    3576:	8f 89       	ldd	r24, Y+23	; 0x17
    3578:	98 8d       	ldd	r25, Y+24	; 0x18
    357a:	20 e0       	ldi	r18, 0x00	; 0
    357c:	30 e0       	ldi	r19, 0x00	; 0
    357e:	4a e7       	ldi	r20, 0x7A	; 122
    3580:	54 e4       	ldi	r21, 0x44	; 68
    3582:	0e 94 a4 3b 	call	0x7748	; 0x7748 <__divsf3>
    3586:	dc 01       	movw	r26, r24
    3588:	cb 01       	movw	r24, r22
    358a:	8c 87       	std	Y+12, r24	; 0x0c
    358c:	9d 87       	std	Y+13, r25	; 0x0d
    358e:	ae 87       	std	Y+14, r26	; 0x0e
    3590:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3592:	6c 85       	ldd	r22, Y+12	; 0x0c
    3594:	7d 85       	ldd	r23, Y+13	; 0x0d
    3596:	8e 85       	ldd	r24, Y+14	; 0x0e
    3598:	9f 85       	ldd	r25, Y+15	; 0x0f
    359a:	2d ec       	ldi	r18, 0xCD	; 205
    359c:	3c ec       	ldi	r19, 0xCC	; 204
    359e:	4c e2       	ldi	r20, 0x2C	; 44
    35a0:	55 e4       	ldi	r21, 0x45	; 69
    35a2:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    35a6:	dc 01       	movw	r26, r24
    35a8:	cb 01       	movw	r24, r22
    35aa:	88 87       	std	Y+8, r24	; 0x08
    35ac:	99 87       	std	Y+9, r25	; 0x09
    35ae:	aa 87       	std	Y+10, r26	; 0x0a
    35b0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    35b2:	68 85       	ldd	r22, Y+8	; 0x08
    35b4:	79 85       	ldd	r23, Y+9	; 0x09
    35b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    35b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    35ba:	20 e0       	ldi	r18, 0x00	; 0
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	40 e8       	ldi	r20, 0x80	; 128
    35c0:	5f e3       	ldi	r21, 0x3F	; 63
    35c2:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    35c6:	88 23       	and	r24, r24
    35c8:	2c f4       	brge	.+10     	; 0x35d4 <LCDByte+0x9aa>
		__ticks = 1;
    35ca:	81 e0       	ldi	r24, 0x01	; 1
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	9f 83       	std	Y+7, r25	; 0x07
    35d0:	8e 83       	std	Y+6, r24	; 0x06
    35d2:	3f c0       	rjmp	.+126    	; 0x3652 <LCDByte+0xa28>
	else if (__tmp > 65535)
    35d4:	68 85       	ldd	r22, Y+8	; 0x08
    35d6:	79 85       	ldd	r23, Y+9	; 0x09
    35d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    35da:	9b 85       	ldd	r25, Y+11	; 0x0b
    35dc:	20 e0       	ldi	r18, 0x00	; 0
    35de:	3f ef       	ldi	r19, 0xFF	; 255
    35e0:	4f e7       	ldi	r20, 0x7F	; 127
    35e2:	57 e4       	ldi	r21, 0x47	; 71
    35e4:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    35e8:	18 16       	cp	r1, r24
    35ea:	4c f5       	brge	.+82     	; 0x363e <LCDByte+0xa14>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35ec:	6c 85       	ldd	r22, Y+12	; 0x0c
    35ee:	7d 85       	ldd	r23, Y+13	; 0x0d
    35f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    35f2:	9f 85       	ldd	r25, Y+15	; 0x0f
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	30 e0       	ldi	r19, 0x00	; 0
    35f8:	40 e2       	ldi	r20, 0x20	; 32
    35fa:	51 e4       	ldi	r21, 0x41	; 65
    35fc:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    3600:	dc 01       	movw	r26, r24
    3602:	cb 01       	movw	r24, r22
    3604:	bc 01       	movw	r22, r24
    3606:	cd 01       	movw	r24, r26
    3608:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    360c:	dc 01       	movw	r26, r24
    360e:	cb 01       	movw	r24, r22
    3610:	9f 83       	std	Y+7, r25	; 0x07
    3612:	8e 83       	std	Y+6, r24	; 0x06
    3614:	0f c0       	rjmp	.+30     	; 0x3634 <LCDByte+0xa0a>
    3616:	84 e1       	ldi	r24, 0x14	; 20
    3618:	91 e0       	ldi	r25, 0x01	; 1
    361a:	9d 83       	std	Y+5, r25	; 0x05
    361c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    361e:	8c 81       	ldd	r24, Y+4	; 0x04
    3620:	9d 81       	ldd	r25, Y+5	; 0x05
    3622:	01 97       	sbiw	r24, 0x01	; 1
    3624:	f1 f7       	brne	.-4      	; 0x3622 <LCDByte+0x9f8>
    3626:	9d 83       	std	Y+5, r25	; 0x05
    3628:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    362a:	8e 81       	ldd	r24, Y+6	; 0x06
    362c:	9f 81       	ldd	r25, Y+7	; 0x07
    362e:	01 97       	sbiw	r24, 0x01	; 1
    3630:	9f 83       	std	Y+7, r25	; 0x07
    3632:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3634:	8e 81       	ldd	r24, Y+6	; 0x06
    3636:	9f 81       	ldd	r25, Y+7	; 0x07
    3638:	00 97       	sbiw	r24, 0x00	; 0
    363a:	69 f7       	brne	.-38     	; 0x3616 <LCDByte+0x9ec>
    363c:	24 c0       	rjmp	.+72     	; 0x3686 <LCDByte+0xa5c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    363e:	68 85       	ldd	r22, Y+8	; 0x08
    3640:	79 85       	ldd	r23, Y+9	; 0x09
    3642:	8a 85       	ldd	r24, Y+10	; 0x0a
    3644:	9b 85       	ldd	r25, Y+11	; 0x0b
    3646:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    364a:	dc 01       	movw	r26, r24
    364c:	cb 01       	movw	r24, r22
    364e:	9f 83       	std	Y+7, r25	; 0x07
    3650:	8e 83       	std	Y+6, r24	; 0x06
    3652:	8e 81       	ldd	r24, Y+6	; 0x06
    3654:	9f 81       	ldd	r25, Y+7	; 0x07
    3656:	9b 83       	std	Y+3, r25	; 0x03
    3658:	8a 83       	std	Y+2, r24	; 0x02
    365a:	8a 81       	ldd	r24, Y+2	; 0x02
    365c:	9b 81       	ldd	r25, Y+3	; 0x03
    365e:	01 97       	sbiw	r24, 0x01	; 1
    3660:	f1 f7       	brne	.-4      	; 0x365e <LCDByte+0xa34>
    3662:	9b 83       	std	Y+3, r25	; 0x03
    3664:	8a 83       	std	Y+2, r24	; 0x02
    3666:	0f c0       	rjmp	.+30     	; 0x3686 <LCDByte+0xa5c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3668:	69 89       	ldd	r22, Y+17	; 0x11
    366a:	7a 89       	ldd	r23, Y+18	; 0x12
    366c:	8b 89       	ldd	r24, Y+19	; 0x13
    366e:	9c 89       	ldd	r25, Y+20	; 0x14
    3670:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    3674:	dc 01       	movw	r26, r24
    3676:	cb 01       	movw	r24, r22
    3678:	88 8b       	std	Y+16, r24	; 0x10
    367a:	88 89       	ldd	r24, Y+16	; 0x10
    367c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    367e:	89 81       	ldd	r24, Y+1	; 0x01
    3680:	8a 95       	dec	r24
    3682:	f1 f7       	brne	.-4      	; 0x3680 <LCDByte+0xa56>
    3684:	89 83       	std	Y+1, r24	; 0x01

_delay_us(1);			//tEL

LCDBusyLoop();
    3686:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <LCDBusyLoop>
}
    368a:	c3 58       	subi	r28, 0x83	; 131
    368c:	df 4f       	sbci	r29, 0xFF	; 255
    368e:	0f b6       	in	r0, 0x3f	; 63
    3690:	f8 94       	cli
    3692:	de bf       	out	0x3e, r29	; 62
    3694:	0f be       	out	0x3f, r0	; 63
    3696:	cd bf       	out	0x3d, r28	; 61
    3698:	cf 91       	pop	r28
    369a:	df 91       	pop	r29
    369c:	1f 91       	pop	r17
    369e:	0f 91       	pop	r16
    36a0:	08 95       	ret

000036a2 <LCDBusyLoop>:

void LCDBusyLoop()
{
    36a2:	0f 93       	push	r16
    36a4:	1f 93       	push	r17
    36a6:	df 93       	push	r29
    36a8:	cf 93       	push	r28
    36aa:	cd b7       	in	r28, 0x3d	; 61
    36ac:	de b7       	in	r29, 0x3e	; 62
    36ae:	cb 5a       	subi	r28, 0xAB	; 171
    36b0:	d0 40       	sbci	r29, 0x00	; 0
    36b2:	0f b6       	in	r0, 0x3f	; 63
    36b4:	f8 94       	cli
    36b6:	de bf       	out	0x3e, r29	; 62
    36b8:	0f be       	out	0x3f, r0	; 63
    36ba:	cd bf       	out	0x3d, r28	; 61
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;
    36bc:	fe 01       	movw	r30, r28
    36be:	e6 55       	subi	r30, 0x56	; 86
    36c0:	ff 4f       	sbci	r31, 0xFF	; 255
    36c2:	10 82       	st	Z, r1

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
    36c4:	a4 e3       	ldi	r26, 0x34	; 52
    36c6:	b0 e0       	ldi	r27, 0x00	; 0
    36c8:	e4 e3       	ldi	r30, 0x34	; 52
    36ca:	f0 e0       	ldi	r31, 0x00	; 0
    36cc:	80 81       	ld	r24, Z
    36ce:	80 7f       	andi	r24, 0xF0	; 240
    36d0:	8c 93       	st	X, r24

	//change LCD mode
	SET_RW();		//Read mode
    36d2:	a5 e3       	ldi	r26, 0x35	; 53
    36d4:	b0 e0       	ldi	r27, 0x00	; 0
    36d6:	e5 e3       	ldi	r30, 0x35	; 53
    36d8:	f0 e0       	ldi	r31, 0x00	; 0
    36da:	80 81       	ld	r24, Z
    36dc:	80 62       	ori	r24, 0x20	; 32
    36de:	8c 93       	st	X, r24
	CLEAR_RS();		//Read status
    36e0:	a5 e3       	ldi	r26, 0x35	; 53
    36e2:	b0 e0       	ldi	r27, 0x00	; 0
    36e4:	e5 e3       	ldi	r30, 0x35	; 53
    36e6:	f0 e0       	ldi	r31, 0x00	; 0
    36e8:	80 81       	ld	r24, Z
    36ea:	8f 7b       	andi	r24, 0xBF	; 191
    36ec:	8c 93       	st	X, r24
    36ee:	fe 01       	movw	r30, r28
    36f0:	eb 55       	subi	r30, 0x5B	; 91
    36f2:	ff 4f       	sbci	r31, 0xFF	; 255
    36f4:	80 e0       	ldi	r24, 0x00	; 0
    36f6:	90 e0       	ldi	r25, 0x00	; 0
    36f8:	a0 e0       	ldi	r26, 0x00	; 0
    36fa:	bf e3       	ldi	r27, 0x3F	; 63
    36fc:	80 83       	st	Z, r24
    36fe:	91 83       	std	Z+1, r25	; 0x01
    3700:	a2 83       	std	Z+2, r26	; 0x02
    3702:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3704:	8e 01       	movw	r16, r28
    3706:	0f 55       	subi	r16, 0x5F	; 95
    3708:	1f 4f       	sbci	r17, 0xFF	; 255
    370a:	fe 01       	movw	r30, r28
    370c:	eb 55       	subi	r30, 0x5B	; 91
    370e:	ff 4f       	sbci	r31, 0xFF	; 255
    3710:	60 81       	ld	r22, Z
    3712:	71 81       	ldd	r23, Z+1	; 0x01
    3714:	82 81       	ldd	r24, Z+2	; 0x02
    3716:	93 81       	ldd	r25, Z+3	; 0x03
    3718:	2a ef       	ldi	r18, 0xFA	; 250
    371a:	3d ee       	ldi	r19, 0xED	; 237
    371c:	4b e6       	ldi	r20, 0x6B	; 107
    371e:	50 e4       	ldi	r21, 0x40	; 64
    3720:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    3724:	dc 01       	movw	r26, r24
    3726:	cb 01       	movw	r24, r22
    3728:	f8 01       	movw	r30, r16
    372a:	80 83       	st	Z, r24
    372c:	91 83       	std	Z+1, r25	; 0x01
    372e:	a2 83       	std	Z+2, r26	; 0x02
    3730:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3732:	fe 01       	movw	r30, r28
    3734:	ef 55       	subi	r30, 0x5F	; 95
    3736:	ff 4f       	sbci	r31, 0xFF	; 255
    3738:	60 81       	ld	r22, Z
    373a:	71 81       	ldd	r23, Z+1	; 0x01
    373c:	82 81       	ldd	r24, Z+2	; 0x02
    373e:	93 81       	ldd	r25, Z+3	; 0x03
    3740:	20 e0       	ldi	r18, 0x00	; 0
    3742:	30 e0       	ldi	r19, 0x00	; 0
    3744:	40 e8       	ldi	r20, 0x80	; 128
    3746:	5f e3       	ldi	r21, 0x3F	; 63
    3748:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    374c:	88 23       	and	r24, r24
    374e:	34 f4       	brge	.+12     	; 0x375c <LCDBusyLoop+0xba>
		__ticks = 1;
    3750:	fe 01       	movw	r30, r28
    3752:	e0 56       	subi	r30, 0x60	; 96
    3754:	ff 4f       	sbci	r31, 0xFF	; 255
    3756:	81 e0       	ldi	r24, 0x01	; 1
    3758:	80 83       	st	Z, r24
    375a:	e0 c0       	rjmp	.+448    	; 0x391c <LCDBusyLoop+0x27a>
	else if (__tmp > 255)
    375c:	fe 01       	movw	r30, r28
    375e:	ef 55       	subi	r30, 0x5F	; 95
    3760:	ff 4f       	sbci	r31, 0xFF	; 255
    3762:	60 81       	ld	r22, Z
    3764:	71 81       	ldd	r23, Z+1	; 0x01
    3766:	82 81       	ldd	r24, Z+2	; 0x02
    3768:	93 81       	ldd	r25, Z+3	; 0x03
    376a:	20 e0       	ldi	r18, 0x00	; 0
    376c:	30 e0       	ldi	r19, 0x00	; 0
    376e:	4f e7       	ldi	r20, 0x7F	; 127
    3770:	53 e4       	ldi	r21, 0x43	; 67
    3772:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    3776:	18 16       	cp	r1, r24
    3778:	0c f0       	brlt	.+2      	; 0x377c <LCDBusyLoop+0xda>
    377a:	c0 c0       	rjmp	.+384    	; 0x38fc <LCDBusyLoop+0x25a>
	{
		_delay_ms(__us / 1000.0);
    377c:	fe 01       	movw	r30, r28
    377e:	eb 55       	subi	r30, 0x5B	; 91
    3780:	ff 4f       	sbci	r31, 0xFF	; 255
    3782:	60 81       	ld	r22, Z
    3784:	71 81       	ldd	r23, Z+1	; 0x01
    3786:	82 81       	ldd	r24, Z+2	; 0x02
    3788:	93 81       	ldd	r25, Z+3	; 0x03
    378a:	20 e0       	ldi	r18, 0x00	; 0
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	4a e7       	ldi	r20, 0x7A	; 122
    3790:	54 e4       	ldi	r21, 0x44	; 68
    3792:	0e 94 a4 3b 	call	0x7748	; 0x7748 <__divsf3>
    3796:	dc 01       	movw	r26, r24
    3798:	cb 01       	movw	r24, r22
    379a:	fe 01       	movw	r30, r28
    379c:	e4 56       	subi	r30, 0x64	; 100
    379e:	ff 4f       	sbci	r31, 0xFF	; 255
    37a0:	80 83       	st	Z, r24
    37a2:	91 83       	std	Z+1, r25	; 0x01
    37a4:	a2 83       	std	Z+2, r26	; 0x02
    37a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37a8:	8e 01       	movw	r16, r28
    37aa:	08 56       	subi	r16, 0x68	; 104
    37ac:	1f 4f       	sbci	r17, 0xFF	; 255
    37ae:	fe 01       	movw	r30, r28
    37b0:	e4 56       	subi	r30, 0x64	; 100
    37b2:	ff 4f       	sbci	r31, 0xFF	; 255
    37b4:	60 81       	ld	r22, Z
    37b6:	71 81       	ldd	r23, Z+1	; 0x01
    37b8:	82 81       	ldd	r24, Z+2	; 0x02
    37ba:	93 81       	ldd	r25, Z+3	; 0x03
    37bc:	2d ec       	ldi	r18, 0xCD	; 205
    37be:	3c ec       	ldi	r19, 0xCC	; 204
    37c0:	4c e2       	ldi	r20, 0x2C	; 44
    37c2:	55 e4       	ldi	r21, 0x45	; 69
    37c4:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    37c8:	dc 01       	movw	r26, r24
    37ca:	cb 01       	movw	r24, r22
    37cc:	f8 01       	movw	r30, r16
    37ce:	80 83       	st	Z, r24
    37d0:	91 83       	std	Z+1, r25	; 0x01
    37d2:	a2 83       	std	Z+2, r26	; 0x02
    37d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37d6:	fe 01       	movw	r30, r28
    37d8:	e8 56       	subi	r30, 0x68	; 104
    37da:	ff 4f       	sbci	r31, 0xFF	; 255
    37dc:	60 81       	ld	r22, Z
    37de:	71 81       	ldd	r23, Z+1	; 0x01
    37e0:	82 81       	ldd	r24, Z+2	; 0x02
    37e2:	93 81       	ldd	r25, Z+3	; 0x03
    37e4:	20 e0       	ldi	r18, 0x00	; 0
    37e6:	30 e0       	ldi	r19, 0x00	; 0
    37e8:	40 e8       	ldi	r20, 0x80	; 128
    37ea:	5f e3       	ldi	r21, 0x3F	; 63
    37ec:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    37f0:	88 23       	and	r24, r24
    37f2:	44 f4       	brge	.+16     	; 0x3804 <LCDBusyLoop+0x162>
		__ticks = 1;
    37f4:	fe 01       	movw	r30, r28
    37f6:	ea 56       	subi	r30, 0x6A	; 106
    37f8:	ff 4f       	sbci	r31, 0xFF	; 255
    37fa:	81 e0       	ldi	r24, 0x01	; 1
    37fc:	90 e0       	ldi	r25, 0x00	; 0
    37fe:	91 83       	std	Z+1, r25	; 0x01
    3800:	80 83       	st	Z, r24
    3802:	64 c0       	rjmp	.+200    	; 0x38cc <LCDBusyLoop+0x22a>
	else if (__tmp > 65535)
    3804:	fe 01       	movw	r30, r28
    3806:	e8 56       	subi	r30, 0x68	; 104
    3808:	ff 4f       	sbci	r31, 0xFF	; 255
    380a:	60 81       	ld	r22, Z
    380c:	71 81       	ldd	r23, Z+1	; 0x01
    380e:	82 81       	ldd	r24, Z+2	; 0x02
    3810:	93 81       	ldd	r25, Z+3	; 0x03
    3812:	20 e0       	ldi	r18, 0x00	; 0
    3814:	3f ef       	ldi	r19, 0xFF	; 255
    3816:	4f e7       	ldi	r20, 0x7F	; 127
    3818:	57 e4       	ldi	r21, 0x47	; 71
    381a:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    381e:	18 16       	cp	r1, r24
    3820:	0c f0       	brlt	.+2      	; 0x3824 <LCDBusyLoop+0x182>
    3822:	43 c0       	rjmp	.+134    	; 0x38aa <LCDBusyLoop+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3824:	fe 01       	movw	r30, r28
    3826:	e4 56       	subi	r30, 0x64	; 100
    3828:	ff 4f       	sbci	r31, 0xFF	; 255
    382a:	60 81       	ld	r22, Z
    382c:	71 81       	ldd	r23, Z+1	; 0x01
    382e:	82 81       	ldd	r24, Z+2	; 0x02
    3830:	93 81       	ldd	r25, Z+3	; 0x03
    3832:	20 e0       	ldi	r18, 0x00	; 0
    3834:	30 e0       	ldi	r19, 0x00	; 0
    3836:	40 e2       	ldi	r20, 0x20	; 32
    3838:	51 e4       	ldi	r21, 0x41	; 65
    383a:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    383e:	dc 01       	movw	r26, r24
    3840:	cb 01       	movw	r24, r22
    3842:	8e 01       	movw	r16, r28
    3844:	0a 56       	subi	r16, 0x6A	; 106
    3846:	1f 4f       	sbci	r17, 0xFF	; 255
    3848:	bc 01       	movw	r22, r24
    384a:	cd 01       	movw	r24, r26
    384c:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    3850:	dc 01       	movw	r26, r24
    3852:	cb 01       	movw	r24, r22
    3854:	f8 01       	movw	r30, r16
    3856:	91 83       	std	Z+1, r25	; 0x01
    3858:	80 83       	st	Z, r24
    385a:	1f c0       	rjmp	.+62     	; 0x389a <LCDBusyLoop+0x1f8>
    385c:	fe 01       	movw	r30, r28
    385e:	ec 56       	subi	r30, 0x6C	; 108
    3860:	ff 4f       	sbci	r31, 0xFF	; 255
    3862:	84 e1       	ldi	r24, 0x14	; 20
    3864:	91 e0       	ldi	r25, 0x01	; 1
    3866:	91 83       	std	Z+1, r25	; 0x01
    3868:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    386a:	fe 01       	movw	r30, r28
    386c:	ec 56       	subi	r30, 0x6C	; 108
    386e:	ff 4f       	sbci	r31, 0xFF	; 255
    3870:	80 81       	ld	r24, Z
    3872:	91 81       	ldd	r25, Z+1	; 0x01
    3874:	01 97       	sbiw	r24, 0x01	; 1
    3876:	f1 f7       	brne	.-4      	; 0x3874 <LCDBusyLoop+0x1d2>
    3878:	fe 01       	movw	r30, r28
    387a:	ec 56       	subi	r30, 0x6C	; 108
    387c:	ff 4f       	sbci	r31, 0xFF	; 255
    387e:	91 83       	std	Z+1, r25	; 0x01
    3880:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3882:	de 01       	movw	r26, r28
    3884:	aa 56       	subi	r26, 0x6A	; 106
    3886:	bf 4f       	sbci	r27, 0xFF	; 255
    3888:	fe 01       	movw	r30, r28
    388a:	ea 56       	subi	r30, 0x6A	; 106
    388c:	ff 4f       	sbci	r31, 0xFF	; 255
    388e:	80 81       	ld	r24, Z
    3890:	91 81       	ldd	r25, Z+1	; 0x01
    3892:	01 97       	sbiw	r24, 0x01	; 1
    3894:	11 96       	adiw	r26, 0x01	; 1
    3896:	9c 93       	st	X, r25
    3898:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    389a:	fe 01       	movw	r30, r28
    389c:	ea 56       	subi	r30, 0x6A	; 106
    389e:	ff 4f       	sbci	r31, 0xFF	; 255
    38a0:	80 81       	ld	r24, Z
    38a2:	91 81       	ldd	r25, Z+1	; 0x01
    38a4:	00 97       	sbiw	r24, 0x00	; 0
    38a6:	d1 f6       	brne	.-76     	; 0x385c <LCDBusyLoop+0x1ba>
    38a8:	4b c0       	rjmp	.+150    	; 0x3940 <LCDBusyLoop+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38aa:	8e 01       	movw	r16, r28
    38ac:	0a 56       	subi	r16, 0x6A	; 106
    38ae:	1f 4f       	sbci	r17, 0xFF	; 255
    38b0:	fe 01       	movw	r30, r28
    38b2:	e8 56       	subi	r30, 0x68	; 104
    38b4:	ff 4f       	sbci	r31, 0xFF	; 255
    38b6:	60 81       	ld	r22, Z
    38b8:	71 81       	ldd	r23, Z+1	; 0x01
    38ba:	82 81       	ldd	r24, Z+2	; 0x02
    38bc:	93 81       	ldd	r25, Z+3	; 0x03
    38be:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    38c2:	dc 01       	movw	r26, r24
    38c4:	cb 01       	movw	r24, r22
    38c6:	f8 01       	movw	r30, r16
    38c8:	91 83       	std	Z+1, r25	; 0x01
    38ca:	80 83       	st	Z, r24
    38cc:	de 01       	movw	r26, r28
    38ce:	ae 56       	subi	r26, 0x6E	; 110
    38d0:	bf 4f       	sbci	r27, 0xFF	; 255
    38d2:	fe 01       	movw	r30, r28
    38d4:	ea 56       	subi	r30, 0x6A	; 106
    38d6:	ff 4f       	sbci	r31, 0xFF	; 255
    38d8:	80 81       	ld	r24, Z
    38da:	91 81       	ldd	r25, Z+1	; 0x01
    38dc:	11 96       	adiw	r26, 0x01	; 1
    38de:	9c 93       	st	X, r25
    38e0:	8e 93       	st	-X, r24
    38e2:	fe 01       	movw	r30, r28
    38e4:	ee 56       	subi	r30, 0x6E	; 110
    38e6:	ff 4f       	sbci	r31, 0xFF	; 255
    38e8:	80 81       	ld	r24, Z
    38ea:	91 81       	ldd	r25, Z+1	; 0x01
    38ec:	01 97       	sbiw	r24, 0x01	; 1
    38ee:	f1 f7       	brne	.-4      	; 0x38ec <LCDBusyLoop+0x24a>
    38f0:	fe 01       	movw	r30, r28
    38f2:	ee 56       	subi	r30, 0x6E	; 110
    38f4:	ff 4f       	sbci	r31, 0xFF	; 255
    38f6:	91 83       	std	Z+1, r25	; 0x01
    38f8:	80 83       	st	Z, r24
    38fa:	22 c0       	rjmp	.+68     	; 0x3940 <LCDBusyLoop+0x29e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    38fc:	8e 01       	movw	r16, r28
    38fe:	00 56       	subi	r16, 0x60	; 96
    3900:	1f 4f       	sbci	r17, 0xFF	; 255
    3902:	fe 01       	movw	r30, r28
    3904:	ef 55       	subi	r30, 0x5F	; 95
    3906:	ff 4f       	sbci	r31, 0xFF	; 255
    3908:	60 81       	ld	r22, Z
    390a:	71 81       	ldd	r23, Z+1	; 0x01
    390c:	82 81       	ldd	r24, Z+2	; 0x02
    390e:	93 81       	ldd	r25, Z+3	; 0x03
    3910:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    3914:	dc 01       	movw	r26, r24
    3916:	cb 01       	movw	r24, r22
    3918:	f8 01       	movw	r30, r16
    391a:	80 83       	st	Z, r24
    391c:	de 01       	movw	r26, r28
    391e:	af 56       	subi	r26, 0x6F	; 111
    3920:	bf 4f       	sbci	r27, 0xFF	; 255
    3922:	fe 01       	movw	r30, r28
    3924:	e0 56       	subi	r30, 0x60	; 96
    3926:	ff 4f       	sbci	r31, 0xFF	; 255
    3928:	80 81       	ld	r24, Z
    392a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    392c:	fe 01       	movw	r30, r28
    392e:	ef 56       	subi	r30, 0x6F	; 111
    3930:	ff 4f       	sbci	r31, 0xFF	; 255
    3932:	80 81       	ld	r24, Z
    3934:	8a 95       	dec	r24
    3936:	f1 f7       	brne	.-4      	; 0x3934 <LCDBusyLoop+0x292>
    3938:	fe 01       	movw	r30, r28
    393a:	ef 56       	subi	r30, 0x6F	; 111
    393c:	ff 4f       	sbci	r31, 0xFF	; 255
    393e:	80 83       	st	Z, r24

	
	do
	{

		SET_E();
    3940:	a5 e3       	ldi	r26, 0x35	; 53
    3942:	b0 e0       	ldi	r27, 0x00	; 0
    3944:	e5 e3       	ldi	r30, 0x35	; 53
    3946:	f0 e0       	ldi	r31, 0x00	; 0
    3948:	80 81       	ld	r24, Z
    394a:	80 68       	ori	r24, 0x80	; 128
    394c:	8c 93       	st	X, r24
    394e:	fe 01       	movw	r30, r28
    3950:	e3 57       	subi	r30, 0x73	; 115
    3952:	ff 4f       	sbci	r31, 0xFF	; 255
    3954:	80 e0       	ldi	r24, 0x00	; 0
    3956:	90 e0       	ldi	r25, 0x00	; 0
    3958:	a0 e0       	ldi	r26, 0x00	; 0
    395a:	bf e3       	ldi	r27, 0x3F	; 63
    395c:	80 83       	st	Z, r24
    395e:	91 83       	std	Z+1, r25	; 0x01
    3960:	a2 83       	std	Z+2, r26	; 0x02
    3962:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3964:	8e 01       	movw	r16, r28
    3966:	07 57       	subi	r16, 0x77	; 119
    3968:	1f 4f       	sbci	r17, 0xFF	; 255
    396a:	fe 01       	movw	r30, r28
    396c:	e3 57       	subi	r30, 0x73	; 115
    396e:	ff 4f       	sbci	r31, 0xFF	; 255
    3970:	60 81       	ld	r22, Z
    3972:	71 81       	ldd	r23, Z+1	; 0x01
    3974:	82 81       	ldd	r24, Z+2	; 0x02
    3976:	93 81       	ldd	r25, Z+3	; 0x03
    3978:	2a ef       	ldi	r18, 0xFA	; 250
    397a:	3d ee       	ldi	r19, 0xED	; 237
    397c:	4b e6       	ldi	r20, 0x6B	; 107
    397e:	50 e4       	ldi	r21, 0x40	; 64
    3980:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    3984:	dc 01       	movw	r26, r24
    3986:	cb 01       	movw	r24, r22
    3988:	f8 01       	movw	r30, r16
    398a:	80 83       	st	Z, r24
    398c:	91 83       	std	Z+1, r25	; 0x01
    398e:	a2 83       	std	Z+2, r26	; 0x02
    3990:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3992:	fe 01       	movw	r30, r28
    3994:	e7 57       	subi	r30, 0x77	; 119
    3996:	ff 4f       	sbci	r31, 0xFF	; 255
    3998:	60 81       	ld	r22, Z
    399a:	71 81       	ldd	r23, Z+1	; 0x01
    399c:	82 81       	ldd	r24, Z+2	; 0x02
    399e:	93 81       	ldd	r25, Z+3	; 0x03
    39a0:	20 e0       	ldi	r18, 0x00	; 0
    39a2:	30 e0       	ldi	r19, 0x00	; 0
    39a4:	40 e8       	ldi	r20, 0x80	; 128
    39a6:	5f e3       	ldi	r21, 0x3F	; 63
    39a8:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    39ac:	88 23       	and	r24, r24
    39ae:	34 f4       	brge	.+12     	; 0x39bc <LCDBusyLoop+0x31a>
		__ticks = 1;
    39b0:	fe 01       	movw	r30, r28
    39b2:	e8 57       	subi	r30, 0x78	; 120
    39b4:	ff 4f       	sbci	r31, 0xFF	; 255
    39b6:	81 e0       	ldi	r24, 0x01	; 1
    39b8:	80 83       	st	Z, r24
    39ba:	e0 c0       	rjmp	.+448    	; 0x3b7c <LCDBusyLoop+0x4da>
	else if (__tmp > 255)
    39bc:	fe 01       	movw	r30, r28
    39be:	e7 57       	subi	r30, 0x77	; 119
    39c0:	ff 4f       	sbci	r31, 0xFF	; 255
    39c2:	60 81       	ld	r22, Z
    39c4:	71 81       	ldd	r23, Z+1	; 0x01
    39c6:	82 81       	ldd	r24, Z+2	; 0x02
    39c8:	93 81       	ldd	r25, Z+3	; 0x03
    39ca:	20 e0       	ldi	r18, 0x00	; 0
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	4f e7       	ldi	r20, 0x7F	; 127
    39d0:	53 e4       	ldi	r21, 0x43	; 67
    39d2:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    39d6:	18 16       	cp	r1, r24
    39d8:	0c f0       	brlt	.+2      	; 0x39dc <LCDBusyLoop+0x33a>
    39da:	c0 c0       	rjmp	.+384    	; 0x3b5c <LCDBusyLoop+0x4ba>
	{
		_delay_ms(__us / 1000.0);
    39dc:	fe 01       	movw	r30, r28
    39de:	e3 57       	subi	r30, 0x73	; 115
    39e0:	ff 4f       	sbci	r31, 0xFF	; 255
    39e2:	60 81       	ld	r22, Z
    39e4:	71 81       	ldd	r23, Z+1	; 0x01
    39e6:	82 81       	ldd	r24, Z+2	; 0x02
    39e8:	93 81       	ldd	r25, Z+3	; 0x03
    39ea:	20 e0       	ldi	r18, 0x00	; 0
    39ec:	30 e0       	ldi	r19, 0x00	; 0
    39ee:	4a e7       	ldi	r20, 0x7A	; 122
    39f0:	54 e4       	ldi	r21, 0x44	; 68
    39f2:	0e 94 a4 3b 	call	0x7748	; 0x7748 <__divsf3>
    39f6:	dc 01       	movw	r26, r24
    39f8:	cb 01       	movw	r24, r22
    39fa:	fe 01       	movw	r30, r28
    39fc:	ec 57       	subi	r30, 0x7C	; 124
    39fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3a00:	80 83       	st	Z, r24
    3a02:	91 83       	std	Z+1, r25	; 0x01
    3a04:	a2 83       	std	Z+2, r26	; 0x02
    3a06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a08:	8e 01       	movw	r16, r28
    3a0a:	00 58       	subi	r16, 0x80	; 128
    3a0c:	1f 4f       	sbci	r17, 0xFF	; 255
    3a0e:	fe 01       	movw	r30, r28
    3a10:	ec 57       	subi	r30, 0x7C	; 124
    3a12:	ff 4f       	sbci	r31, 0xFF	; 255
    3a14:	60 81       	ld	r22, Z
    3a16:	71 81       	ldd	r23, Z+1	; 0x01
    3a18:	82 81       	ldd	r24, Z+2	; 0x02
    3a1a:	93 81       	ldd	r25, Z+3	; 0x03
    3a1c:	2d ec       	ldi	r18, 0xCD	; 205
    3a1e:	3c ec       	ldi	r19, 0xCC	; 204
    3a20:	4c e2       	ldi	r20, 0x2C	; 44
    3a22:	55 e4       	ldi	r21, 0x45	; 69
    3a24:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    3a28:	dc 01       	movw	r26, r24
    3a2a:	cb 01       	movw	r24, r22
    3a2c:	f8 01       	movw	r30, r16
    3a2e:	80 83       	st	Z, r24
    3a30:	91 83       	std	Z+1, r25	; 0x01
    3a32:	a2 83       	std	Z+2, r26	; 0x02
    3a34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a36:	fe 01       	movw	r30, r28
    3a38:	e0 58       	subi	r30, 0x80	; 128
    3a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3c:	60 81       	ld	r22, Z
    3a3e:	71 81       	ldd	r23, Z+1	; 0x01
    3a40:	82 81       	ldd	r24, Z+2	; 0x02
    3a42:	93 81       	ldd	r25, Z+3	; 0x03
    3a44:	20 e0       	ldi	r18, 0x00	; 0
    3a46:	30 e0       	ldi	r19, 0x00	; 0
    3a48:	40 e8       	ldi	r20, 0x80	; 128
    3a4a:	5f e3       	ldi	r21, 0x3F	; 63
    3a4c:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    3a50:	88 23       	and	r24, r24
    3a52:	44 f4       	brge	.+16     	; 0x3a64 <LCDBusyLoop+0x3c2>
		__ticks = 1;
    3a54:	fe 01       	movw	r30, r28
    3a56:	e2 58       	subi	r30, 0x82	; 130
    3a58:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5a:	81 e0       	ldi	r24, 0x01	; 1
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	91 83       	std	Z+1, r25	; 0x01
    3a60:	80 83       	st	Z, r24
    3a62:	64 c0       	rjmp	.+200    	; 0x3b2c <LCDBusyLoop+0x48a>
	else if (__tmp > 65535)
    3a64:	fe 01       	movw	r30, r28
    3a66:	e0 58       	subi	r30, 0x80	; 128
    3a68:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6a:	60 81       	ld	r22, Z
    3a6c:	71 81       	ldd	r23, Z+1	; 0x01
    3a6e:	82 81       	ldd	r24, Z+2	; 0x02
    3a70:	93 81       	ldd	r25, Z+3	; 0x03
    3a72:	20 e0       	ldi	r18, 0x00	; 0
    3a74:	3f ef       	ldi	r19, 0xFF	; 255
    3a76:	4f e7       	ldi	r20, 0x7F	; 127
    3a78:	57 e4       	ldi	r21, 0x47	; 71
    3a7a:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    3a7e:	18 16       	cp	r1, r24
    3a80:	0c f0       	brlt	.+2      	; 0x3a84 <LCDBusyLoop+0x3e2>
    3a82:	43 c0       	rjmp	.+134    	; 0x3b0a <LCDBusyLoop+0x468>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a84:	fe 01       	movw	r30, r28
    3a86:	ec 57       	subi	r30, 0x7C	; 124
    3a88:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8a:	60 81       	ld	r22, Z
    3a8c:	71 81       	ldd	r23, Z+1	; 0x01
    3a8e:	82 81       	ldd	r24, Z+2	; 0x02
    3a90:	93 81       	ldd	r25, Z+3	; 0x03
    3a92:	20 e0       	ldi	r18, 0x00	; 0
    3a94:	30 e0       	ldi	r19, 0x00	; 0
    3a96:	40 e2       	ldi	r20, 0x20	; 32
    3a98:	51 e4       	ldi	r21, 0x41	; 65
    3a9a:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    3a9e:	dc 01       	movw	r26, r24
    3aa0:	cb 01       	movw	r24, r22
    3aa2:	8e 01       	movw	r16, r28
    3aa4:	02 58       	subi	r16, 0x82	; 130
    3aa6:	1f 4f       	sbci	r17, 0xFF	; 255
    3aa8:	bc 01       	movw	r22, r24
    3aaa:	cd 01       	movw	r24, r26
    3aac:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    3ab0:	dc 01       	movw	r26, r24
    3ab2:	cb 01       	movw	r24, r22
    3ab4:	f8 01       	movw	r30, r16
    3ab6:	91 83       	std	Z+1, r25	; 0x01
    3ab8:	80 83       	st	Z, r24
    3aba:	1f c0       	rjmp	.+62     	; 0x3afa <LCDBusyLoop+0x458>
    3abc:	fe 01       	movw	r30, r28
    3abe:	e4 58       	subi	r30, 0x84	; 132
    3ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac2:	84 e1       	ldi	r24, 0x14	; 20
    3ac4:	91 e0       	ldi	r25, 0x01	; 1
    3ac6:	91 83       	std	Z+1, r25	; 0x01
    3ac8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3aca:	fe 01       	movw	r30, r28
    3acc:	e4 58       	subi	r30, 0x84	; 132
    3ace:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad0:	80 81       	ld	r24, Z
    3ad2:	91 81       	ldd	r25, Z+1	; 0x01
    3ad4:	01 97       	sbiw	r24, 0x01	; 1
    3ad6:	f1 f7       	brne	.-4      	; 0x3ad4 <LCDBusyLoop+0x432>
    3ad8:	fe 01       	movw	r30, r28
    3ada:	e4 58       	subi	r30, 0x84	; 132
    3adc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ade:	91 83       	std	Z+1, r25	; 0x01
    3ae0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ae2:	de 01       	movw	r26, r28
    3ae4:	a2 58       	subi	r26, 0x82	; 130
    3ae6:	bf 4f       	sbci	r27, 0xFF	; 255
    3ae8:	fe 01       	movw	r30, r28
    3aea:	e2 58       	subi	r30, 0x82	; 130
    3aec:	ff 4f       	sbci	r31, 0xFF	; 255
    3aee:	80 81       	ld	r24, Z
    3af0:	91 81       	ldd	r25, Z+1	; 0x01
    3af2:	01 97       	sbiw	r24, 0x01	; 1
    3af4:	11 96       	adiw	r26, 0x01	; 1
    3af6:	9c 93       	st	X, r25
    3af8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3afa:	fe 01       	movw	r30, r28
    3afc:	e2 58       	subi	r30, 0x82	; 130
    3afe:	ff 4f       	sbci	r31, 0xFF	; 255
    3b00:	80 81       	ld	r24, Z
    3b02:	91 81       	ldd	r25, Z+1	; 0x01
    3b04:	00 97       	sbiw	r24, 0x00	; 0
    3b06:	d1 f6       	brne	.-76     	; 0x3abc <LCDBusyLoop+0x41a>
    3b08:	4b c0       	rjmp	.+150    	; 0x3ba0 <LCDBusyLoop+0x4fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b0a:	8e 01       	movw	r16, r28
    3b0c:	02 58       	subi	r16, 0x82	; 130
    3b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b10:	fe 01       	movw	r30, r28
    3b12:	e0 58       	subi	r30, 0x80	; 128
    3b14:	ff 4f       	sbci	r31, 0xFF	; 255
    3b16:	60 81       	ld	r22, Z
    3b18:	71 81       	ldd	r23, Z+1	; 0x01
    3b1a:	82 81       	ldd	r24, Z+2	; 0x02
    3b1c:	93 81       	ldd	r25, Z+3	; 0x03
    3b1e:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    3b22:	dc 01       	movw	r26, r24
    3b24:	cb 01       	movw	r24, r22
    3b26:	f8 01       	movw	r30, r16
    3b28:	91 83       	std	Z+1, r25	; 0x01
    3b2a:	80 83       	st	Z, r24
    3b2c:	de 01       	movw	r26, r28
    3b2e:	a6 58       	subi	r26, 0x86	; 134
    3b30:	bf 4f       	sbci	r27, 0xFF	; 255
    3b32:	fe 01       	movw	r30, r28
    3b34:	e2 58       	subi	r30, 0x82	; 130
    3b36:	ff 4f       	sbci	r31, 0xFF	; 255
    3b38:	80 81       	ld	r24, Z
    3b3a:	91 81       	ldd	r25, Z+1	; 0x01
    3b3c:	11 96       	adiw	r26, 0x01	; 1
    3b3e:	9c 93       	st	X, r25
    3b40:	8e 93       	st	-X, r24
    3b42:	fe 01       	movw	r30, r28
    3b44:	e6 58       	subi	r30, 0x86	; 134
    3b46:	ff 4f       	sbci	r31, 0xFF	; 255
    3b48:	80 81       	ld	r24, Z
    3b4a:	91 81       	ldd	r25, Z+1	; 0x01
    3b4c:	01 97       	sbiw	r24, 0x01	; 1
    3b4e:	f1 f7       	brne	.-4      	; 0x3b4c <LCDBusyLoop+0x4aa>
    3b50:	fe 01       	movw	r30, r28
    3b52:	e6 58       	subi	r30, 0x86	; 134
    3b54:	ff 4f       	sbci	r31, 0xFF	; 255
    3b56:	91 83       	std	Z+1, r25	; 0x01
    3b58:	80 83       	st	Z, r24
    3b5a:	22 c0       	rjmp	.+68     	; 0x3ba0 <LCDBusyLoop+0x4fe>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3b5c:	8e 01       	movw	r16, r28
    3b5e:	08 57       	subi	r16, 0x78	; 120
    3b60:	1f 4f       	sbci	r17, 0xFF	; 255
    3b62:	fe 01       	movw	r30, r28
    3b64:	e7 57       	subi	r30, 0x77	; 119
    3b66:	ff 4f       	sbci	r31, 0xFF	; 255
    3b68:	60 81       	ld	r22, Z
    3b6a:	71 81       	ldd	r23, Z+1	; 0x01
    3b6c:	82 81       	ldd	r24, Z+2	; 0x02
    3b6e:	93 81       	ldd	r25, Z+3	; 0x03
    3b70:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    3b74:	dc 01       	movw	r26, r24
    3b76:	cb 01       	movw	r24, r22
    3b78:	f8 01       	movw	r30, r16
    3b7a:	80 83       	st	Z, r24
    3b7c:	de 01       	movw	r26, r28
    3b7e:	a7 58       	subi	r26, 0x87	; 135
    3b80:	bf 4f       	sbci	r27, 0xFF	; 255
    3b82:	fe 01       	movw	r30, r28
    3b84:	e8 57       	subi	r30, 0x78	; 120
    3b86:	ff 4f       	sbci	r31, 0xFF	; 255
    3b88:	80 81       	ld	r24, Z
    3b8a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3b8c:	fe 01       	movw	r30, r28
    3b8e:	e7 58       	subi	r30, 0x87	; 135
    3b90:	ff 4f       	sbci	r31, 0xFF	; 255
    3b92:	80 81       	ld	r24, Z
    3b94:	8a 95       	dec	r24
    3b96:	f1 f7       	brne	.-4      	; 0x3b94 <LCDBusyLoop+0x4f2>
    3b98:	fe 01       	movw	r30, r28
    3b9a:	e7 58       	subi	r30, 0x87	; 135
    3b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9e:	80 83       	st	Z, r24

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
    3ba0:	e3 e3       	ldi	r30, 0x33	; 51
    3ba2:	f0 e0       	ldi	r31, 0x00	; 0
    3ba4:	de 01       	movw	r26, r28
    3ba6:	a6 55       	subi	r26, 0x56	; 86
    3ba8:	bf 4f       	sbci	r27, 0xFF	; 255
    3baa:	80 81       	ld	r24, Z
    3bac:	8c 93       	st	X, r24
		status=status<<4;
    3bae:	de 01       	movw	r26, r28
    3bb0:	a6 55       	subi	r26, 0x56	; 86
    3bb2:	bf 4f       	sbci	r27, 0xFF	; 255
    3bb4:	fe 01       	movw	r30, r28
    3bb6:	e6 55       	subi	r30, 0x56	; 86
    3bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bba:	80 81       	ld	r24, Z
    3bbc:	82 95       	swap	r24
    3bbe:	80 7f       	andi	r24, 0xF0	; 240
    3bc0:	8c 93       	st	X, r24
    3bc2:	fe 01       	movw	r30, r28
    3bc4:	eb 58       	subi	r30, 0x8B	; 139
    3bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc8:	80 e0       	ldi	r24, 0x00	; 0
    3bca:	90 e0       	ldi	r25, 0x00	; 0
    3bcc:	a0 e0       	ldi	r26, 0x00	; 0
    3bce:	bf e3       	ldi	r27, 0x3F	; 63
    3bd0:	80 83       	st	Z, r24
    3bd2:	91 83       	std	Z+1, r25	; 0x01
    3bd4:	a2 83       	std	Z+2, r26	; 0x02
    3bd6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3bd8:	8e 01       	movw	r16, r28
    3bda:	0f 58       	subi	r16, 0x8F	; 143
    3bdc:	1f 4f       	sbci	r17, 0xFF	; 255
    3bde:	fe 01       	movw	r30, r28
    3be0:	eb 58       	subi	r30, 0x8B	; 139
    3be2:	ff 4f       	sbci	r31, 0xFF	; 255
    3be4:	60 81       	ld	r22, Z
    3be6:	71 81       	ldd	r23, Z+1	; 0x01
    3be8:	82 81       	ldd	r24, Z+2	; 0x02
    3bea:	93 81       	ldd	r25, Z+3	; 0x03
    3bec:	2a ef       	ldi	r18, 0xFA	; 250
    3bee:	3d ee       	ldi	r19, 0xED	; 237
    3bf0:	4b e6       	ldi	r20, 0x6B	; 107
    3bf2:	50 e4       	ldi	r21, 0x40	; 64
    3bf4:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    3bf8:	dc 01       	movw	r26, r24
    3bfa:	cb 01       	movw	r24, r22
    3bfc:	f8 01       	movw	r30, r16
    3bfe:	80 83       	st	Z, r24
    3c00:	91 83       	std	Z+1, r25	; 0x01
    3c02:	a2 83       	std	Z+2, r26	; 0x02
    3c04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c06:	fe 01       	movw	r30, r28
    3c08:	ef 58       	subi	r30, 0x8F	; 143
    3c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0c:	60 81       	ld	r22, Z
    3c0e:	71 81       	ldd	r23, Z+1	; 0x01
    3c10:	82 81       	ldd	r24, Z+2	; 0x02
    3c12:	93 81       	ldd	r25, Z+3	; 0x03
    3c14:	20 e0       	ldi	r18, 0x00	; 0
    3c16:	30 e0       	ldi	r19, 0x00	; 0
    3c18:	40 e8       	ldi	r20, 0x80	; 128
    3c1a:	5f e3       	ldi	r21, 0x3F	; 63
    3c1c:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    3c20:	88 23       	and	r24, r24
    3c22:	34 f4       	brge	.+12     	; 0x3c30 <LCDBusyLoop+0x58e>
		__ticks = 1;
    3c24:	fe 01       	movw	r30, r28
    3c26:	e0 59       	subi	r30, 0x90	; 144
    3c28:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2a:	81 e0       	ldi	r24, 0x01	; 1
    3c2c:	80 83       	st	Z, r24
    3c2e:	e0 c0       	rjmp	.+448    	; 0x3df0 <LCDBusyLoop+0x74e>
	else if (__tmp > 255)
    3c30:	fe 01       	movw	r30, r28
    3c32:	ef 58       	subi	r30, 0x8F	; 143
    3c34:	ff 4f       	sbci	r31, 0xFF	; 255
    3c36:	60 81       	ld	r22, Z
    3c38:	71 81       	ldd	r23, Z+1	; 0x01
    3c3a:	82 81       	ldd	r24, Z+2	; 0x02
    3c3c:	93 81       	ldd	r25, Z+3	; 0x03
    3c3e:	20 e0       	ldi	r18, 0x00	; 0
    3c40:	30 e0       	ldi	r19, 0x00	; 0
    3c42:	4f e7       	ldi	r20, 0x7F	; 127
    3c44:	53 e4       	ldi	r21, 0x43	; 67
    3c46:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    3c4a:	18 16       	cp	r1, r24
    3c4c:	0c f0       	brlt	.+2      	; 0x3c50 <LCDBusyLoop+0x5ae>
    3c4e:	c0 c0       	rjmp	.+384    	; 0x3dd0 <LCDBusyLoop+0x72e>
	{
		_delay_ms(__us / 1000.0);
    3c50:	fe 01       	movw	r30, r28
    3c52:	eb 58       	subi	r30, 0x8B	; 139
    3c54:	ff 4f       	sbci	r31, 0xFF	; 255
    3c56:	60 81       	ld	r22, Z
    3c58:	71 81       	ldd	r23, Z+1	; 0x01
    3c5a:	82 81       	ldd	r24, Z+2	; 0x02
    3c5c:	93 81       	ldd	r25, Z+3	; 0x03
    3c5e:	20 e0       	ldi	r18, 0x00	; 0
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	4a e7       	ldi	r20, 0x7A	; 122
    3c64:	54 e4       	ldi	r21, 0x44	; 68
    3c66:	0e 94 a4 3b 	call	0x7748	; 0x7748 <__divsf3>
    3c6a:	dc 01       	movw	r26, r24
    3c6c:	cb 01       	movw	r24, r22
    3c6e:	fe 01       	movw	r30, r28
    3c70:	e4 59       	subi	r30, 0x94	; 148
    3c72:	ff 4f       	sbci	r31, 0xFF	; 255
    3c74:	80 83       	st	Z, r24
    3c76:	91 83       	std	Z+1, r25	; 0x01
    3c78:	a2 83       	std	Z+2, r26	; 0x02
    3c7a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c7c:	8e 01       	movw	r16, r28
    3c7e:	08 59       	subi	r16, 0x98	; 152
    3c80:	1f 4f       	sbci	r17, 0xFF	; 255
    3c82:	fe 01       	movw	r30, r28
    3c84:	e4 59       	subi	r30, 0x94	; 148
    3c86:	ff 4f       	sbci	r31, 0xFF	; 255
    3c88:	60 81       	ld	r22, Z
    3c8a:	71 81       	ldd	r23, Z+1	; 0x01
    3c8c:	82 81       	ldd	r24, Z+2	; 0x02
    3c8e:	93 81       	ldd	r25, Z+3	; 0x03
    3c90:	2d ec       	ldi	r18, 0xCD	; 205
    3c92:	3c ec       	ldi	r19, 0xCC	; 204
    3c94:	4c e2       	ldi	r20, 0x2C	; 44
    3c96:	55 e4       	ldi	r21, 0x45	; 69
    3c98:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    3c9c:	dc 01       	movw	r26, r24
    3c9e:	cb 01       	movw	r24, r22
    3ca0:	f8 01       	movw	r30, r16
    3ca2:	80 83       	st	Z, r24
    3ca4:	91 83       	std	Z+1, r25	; 0x01
    3ca6:	a2 83       	std	Z+2, r26	; 0x02
    3ca8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3caa:	fe 01       	movw	r30, r28
    3cac:	e8 59       	subi	r30, 0x98	; 152
    3cae:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb0:	60 81       	ld	r22, Z
    3cb2:	71 81       	ldd	r23, Z+1	; 0x01
    3cb4:	82 81       	ldd	r24, Z+2	; 0x02
    3cb6:	93 81       	ldd	r25, Z+3	; 0x03
    3cb8:	20 e0       	ldi	r18, 0x00	; 0
    3cba:	30 e0       	ldi	r19, 0x00	; 0
    3cbc:	40 e8       	ldi	r20, 0x80	; 128
    3cbe:	5f e3       	ldi	r21, 0x3F	; 63
    3cc0:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    3cc4:	88 23       	and	r24, r24
    3cc6:	44 f4       	brge	.+16     	; 0x3cd8 <LCDBusyLoop+0x636>
		__ticks = 1;
    3cc8:	fe 01       	movw	r30, r28
    3cca:	ea 59       	subi	r30, 0x9A	; 154
    3ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cce:	81 e0       	ldi	r24, 0x01	; 1
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	91 83       	std	Z+1, r25	; 0x01
    3cd4:	80 83       	st	Z, r24
    3cd6:	64 c0       	rjmp	.+200    	; 0x3da0 <LCDBusyLoop+0x6fe>
	else if (__tmp > 65535)
    3cd8:	fe 01       	movw	r30, r28
    3cda:	e8 59       	subi	r30, 0x98	; 152
    3cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cde:	60 81       	ld	r22, Z
    3ce0:	71 81       	ldd	r23, Z+1	; 0x01
    3ce2:	82 81       	ldd	r24, Z+2	; 0x02
    3ce4:	93 81       	ldd	r25, Z+3	; 0x03
    3ce6:	20 e0       	ldi	r18, 0x00	; 0
    3ce8:	3f ef       	ldi	r19, 0xFF	; 255
    3cea:	4f e7       	ldi	r20, 0x7F	; 127
    3cec:	57 e4       	ldi	r21, 0x47	; 71
    3cee:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    3cf2:	18 16       	cp	r1, r24
    3cf4:	0c f0       	brlt	.+2      	; 0x3cf8 <LCDBusyLoop+0x656>
    3cf6:	43 c0       	rjmp	.+134    	; 0x3d7e <LCDBusyLoop+0x6dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cf8:	fe 01       	movw	r30, r28
    3cfa:	e4 59       	subi	r30, 0x94	; 148
    3cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfe:	60 81       	ld	r22, Z
    3d00:	71 81       	ldd	r23, Z+1	; 0x01
    3d02:	82 81       	ldd	r24, Z+2	; 0x02
    3d04:	93 81       	ldd	r25, Z+3	; 0x03
    3d06:	20 e0       	ldi	r18, 0x00	; 0
    3d08:	30 e0       	ldi	r19, 0x00	; 0
    3d0a:	40 e2       	ldi	r20, 0x20	; 32
    3d0c:	51 e4       	ldi	r21, 0x41	; 65
    3d0e:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    3d12:	dc 01       	movw	r26, r24
    3d14:	cb 01       	movw	r24, r22
    3d16:	8e 01       	movw	r16, r28
    3d18:	0a 59       	subi	r16, 0x9A	; 154
    3d1a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d1c:	bc 01       	movw	r22, r24
    3d1e:	cd 01       	movw	r24, r26
    3d20:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    3d24:	dc 01       	movw	r26, r24
    3d26:	cb 01       	movw	r24, r22
    3d28:	f8 01       	movw	r30, r16
    3d2a:	91 83       	std	Z+1, r25	; 0x01
    3d2c:	80 83       	st	Z, r24
    3d2e:	1f c0       	rjmp	.+62     	; 0x3d6e <LCDBusyLoop+0x6cc>
    3d30:	fe 01       	movw	r30, r28
    3d32:	ec 59       	subi	r30, 0x9C	; 156
    3d34:	ff 4f       	sbci	r31, 0xFF	; 255
    3d36:	84 e1       	ldi	r24, 0x14	; 20
    3d38:	91 e0       	ldi	r25, 0x01	; 1
    3d3a:	91 83       	std	Z+1, r25	; 0x01
    3d3c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3d3e:	fe 01       	movw	r30, r28
    3d40:	ec 59       	subi	r30, 0x9C	; 156
    3d42:	ff 4f       	sbci	r31, 0xFF	; 255
    3d44:	80 81       	ld	r24, Z
    3d46:	91 81       	ldd	r25, Z+1	; 0x01
    3d48:	01 97       	sbiw	r24, 0x01	; 1
    3d4a:	f1 f7       	brne	.-4      	; 0x3d48 <LCDBusyLoop+0x6a6>
    3d4c:	fe 01       	movw	r30, r28
    3d4e:	ec 59       	subi	r30, 0x9C	; 156
    3d50:	ff 4f       	sbci	r31, 0xFF	; 255
    3d52:	91 83       	std	Z+1, r25	; 0x01
    3d54:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d56:	de 01       	movw	r26, r28
    3d58:	aa 59       	subi	r26, 0x9A	; 154
    3d5a:	bf 4f       	sbci	r27, 0xFF	; 255
    3d5c:	fe 01       	movw	r30, r28
    3d5e:	ea 59       	subi	r30, 0x9A	; 154
    3d60:	ff 4f       	sbci	r31, 0xFF	; 255
    3d62:	80 81       	ld	r24, Z
    3d64:	91 81       	ldd	r25, Z+1	; 0x01
    3d66:	01 97       	sbiw	r24, 0x01	; 1
    3d68:	11 96       	adiw	r26, 0x01	; 1
    3d6a:	9c 93       	st	X, r25
    3d6c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d6e:	fe 01       	movw	r30, r28
    3d70:	ea 59       	subi	r30, 0x9A	; 154
    3d72:	ff 4f       	sbci	r31, 0xFF	; 255
    3d74:	80 81       	ld	r24, Z
    3d76:	91 81       	ldd	r25, Z+1	; 0x01
    3d78:	00 97       	sbiw	r24, 0x00	; 0
    3d7a:	d1 f6       	brne	.-76     	; 0x3d30 <LCDBusyLoop+0x68e>
    3d7c:	4b c0       	rjmp	.+150    	; 0x3e14 <LCDBusyLoop+0x772>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d7e:	8e 01       	movw	r16, r28
    3d80:	0a 59       	subi	r16, 0x9A	; 154
    3d82:	1f 4f       	sbci	r17, 0xFF	; 255
    3d84:	fe 01       	movw	r30, r28
    3d86:	e8 59       	subi	r30, 0x98	; 152
    3d88:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8a:	60 81       	ld	r22, Z
    3d8c:	71 81       	ldd	r23, Z+1	; 0x01
    3d8e:	82 81       	ldd	r24, Z+2	; 0x02
    3d90:	93 81       	ldd	r25, Z+3	; 0x03
    3d92:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    3d96:	dc 01       	movw	r26, r24
    3d98:	cb 01       	movw	r24, r22
    3d9a:	f8 01       	movw	r30, r16
    3d9c:	91 83       	std	Z+1, r25	; 0x01
    3d9e:	80 83       	st	Z, r24
    3da0:	de 01       	movw	r26, r28
    3da2:	ae 59       	subi	r26, 0x9E	; 158
    3da4:	bf 4f       	sbci	r27, 0xFF	; 255
    3da6:	fe 01       	movw	r30, r28
    3da8:	ea 59       	subi	r30, 0x9A	; 154
    3daa:	ff 4f       	sbci	r31, 0xFF	; 255
    3dac:	80 81       	ld	r24, Z
    3dae:	91 81       	ldd	r25, Z+1	; 0x01
    3db0:	11 96       	adiw	r26, 0x01	; 1
    3db2:	9c 93       	st	X, r25
    3db4:	8e 93       	st	-X, r24
    3db6:	fe 01       	movw	r30, r28
    3db8:	ee 59       	subi	r30, 0x9E	; 158
    3dba:	ff 4f       	sbci	r31, 0xFF	; 255
    3dbc:	80 81       	ld	r24, Z
    3dbe:	91 81       	ldd	r25, Z+1	; 0x01
    3dc0:	01 97       	sbiw	r24, 0x01	; 1
    3dc2:	f1 f7       	brne	.-4      	; 0x3dc0 <LCDBusyLoop+0x71e>
    3dc4:	fe 01       	movw	r30, r28
    3dc6:	ee 59       	subi	r30, 0x9E	; 158
    3dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dca:	91 83       	std	Z+1, r25	; 0x01
    3dcc:	80 83       	st	Z, r24
    3dce:	22 c0       	rjmp	.+68     	; 0x3e14 <LCDBusyLoop+0x772>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3dd0:	8e 01       	movw	r16, r28
    3dd2:	00 59       	subi	r16, 0x90	; 144
    3dd4:	1f 4f       	sbci	r17, 0xFF	; 255
    3dd6:	fe 01       	movw	r30, r28
    3dd8:	ef 58       	subi	r30, 0x8F	; 143
    3dda:	ff 4f       	sbci	r31, 0xFF	; 255
    3ddc:	60 81       	ld	r22, Z
    3dde:	71 81       	ldd	r23, Z+1	; 0x01
    3de0:	82 81       	ldd	r24, Z+2	; 0x02
    3de2:	93 81       	ldd	r25, Z+3	; 0x03
    3de4:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    3de8:	dc 01       	movw	r26, r24
    3dea:	cb 01       	movw	r24, r22
    3dec:	f8 01       	movw	r30, r16
    3dee:	80 83       	st	Z, r24
    3df0:	de 01       	movw	r26, r28
    3df2:	af 59       	subi	r26, 0x9F	; 159
    3df4:	bf 4f       	sbci	r27, 0xFF	; 255
    3df6:	fe 01       	movw	r30, r28
    3df8:	e0 59       	subi	r30, 0x90	; 144
    3dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfc:	80 81       	ld	r24, Z
    3dfe:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3e00:	fe 01       	movw	r30, r28
    3e02:	ef 59       	subi	r30, 0x9F	; 159
    3e04:	ff 4f       	sbci	r31, 0xFF	; 255
    3e06:	80 81       	ld	r24, Z
    3e08:	8a 95       	dec	r24
    3e0a:	f1 f7       	brne	.-4      	; 0x3e08 <LCDBusyLoop+0x766>
    3e0c:	fe 01       	movw	r30, r28
    3e0e:	ef 59       	subi	r30, 0x9F	; 159
    3e10:	ff 4f       	sbci	r31, 0xFF	; 255
    3e12:	80 83       	st	Z, r24

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
    3e14:	a5 e3       	ldi	r26, 0x35	; 53
    3e16:	b0 e0       	ldi	r27, 0x00	; 0
    3e18:	e5 e3       	ldi	r30, 0x35	; 53
    3e1a:	f0 e0       	ldi	r31, 0x00	; 0
    3e1c:	80 81       	ld	r24, Z
    3e1e:	8f 77       	andi	r24, 0x7F	; 127
    3e20:	8c 93       	st	X, r24
    3e22:	fe 01       	movw	r30, r28
    3e24:	e3 5a       	subi	r30, 0xA3	; 163
    3e26:	ff 4f       	sbci	r31, 0xFF	; 255
    3e28:	80 e0       	ldi	r24, 0x00	; 0
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	a0 e8       	ldi	r26, 0x80	; 128
    3e2e:	bf e3       	ldi	r27, 0x3F	; 63
    3e30:	80 83       	st	Z, r24
    3e32:	91 83       	std	Z+1, r25	; 0x01
    3e34:	a2 83       	std	Z+2, r26	; 0x02
    3e36:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3e38:	8e 01       	movw	r16, r28
    3e3a:	07 5a       	subi	r16, 0xA7	; 167
    3e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    3e3e:	fe 01       	movw	r30, r28
    3e40:	e3 5a       	subi	r30, 0xA3	; 163
    3e42:	ff 4f       	sbci	r31, 0xFF	; 255
    3e44:	60 81       	ld	r22, Z
    3e46:	71 81       	ldd	r23, Z+1	; 0x01
    3e48:	82 81       	ldd	r24, Z+2	; 0x02
    3e4a:	93 81       	ldd	r25, Z+3	; 0x03
    3e4c:	2a ef       	ldi	r18, 0xFA	; 250
    3e4e:	3d ee       	ldi	r19, 0xED	; 237
    3e50:	4b e6       	ldi	r20, 0x6B	; 107
    3e52:	50 e4       	ldi	r21, 0x40	; 64
    3e54:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    3e58:	dc 01       	movw	r26, r24
    3e5a:	cb 01       	movw	r24, r22
    3e5c:	f8 01       	movw	r30, r16
    3e5e:	80 83       	st	Z, r24
    3e60:	91 83       	std	Z+1, r25	; 0x01
    3e62:	a2 83       	std	Z+2, r26	; 0x02
    3e64:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e66:	fe 01       	movw	r30, r28
    3e68:	e7 5a       	subi	r30, 0xA7	; 167
    3e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6c:	60 81       	ld	r22, Z
    3e6e:	71 81       	ldd	r23, Z+1	; 0x01
    3e70:	82 81       	ldd	r24, Z+2	; 0x02
    3e72:	93 81       	ldd	r25, Z+3	; 0x03
    3e74:	20 e0       	ldi	r18, 0x00	; 0
    3e76:	30 e0       	ldi	r19, 0x00	; 0
    3e78:	40 e8       	ldi	r20, 0x80	; 128
    3e7a:	5f e3       	ldi	r21, 0x3F	; 63
    3e7c:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    3e80:	88 23       	and	r24, r24
    3e82:	34 f4       	brge	.+12     	; 0x3e90 <LCDBusyLoop+0x7ee>
		__ticks = 1;
    3e84:	fe 01       	movw	r30, r28
    3e86:	e8 5a       	subi	r30, 0xA8	; 168
    3e88:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8a:	81 e0       	ldi	r24, 0x01	; 1
    3e8c:	80 83       	st	Z, r24
    3e8e:	e0 c0       	rjmp	.+448    	; 0x4050 <LCDBusyLoop+0x9ae>
	else if (__tmp > 255)
    3e90:	fe 01       	movw	r30, r28
    3e92:	e7 5a       	subi	r30, 0xA7	; 167
    3e94:	ff 4f       	sbci	r31, 0xFF	; 255
    3e96:	60 81       	ld	r22, Z
    3e98:	71 81       	ldd	r23, Z+1	; 0x01
    3e9a:	82 81       	ldd	r24, Z+2	; 0x02
    3e9c:	93 81       	ldd	r25, Z+3	; 0x03
    3e9e:	20 e0       	ldi	r18, 0x00	; 0
    3ea0:	30 e0       	ldi	r19, 0x00	; 0
    3ea2:	4f e7       	ldi	r20, 0x7F	; 127
    3ea4:	53 e4       	ldi	r21, 0x43	; 67
    3ea6:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    3eaa:	18 16       	cp	r1, r24
    3eac:	0c f0       	brlt	.+2      	; 0x3eb0 <LCDBusyLoop+0x80e>
    3eae:	c0 c0       	rjmp	.+384    	; 0x4030 <LCDBusyLoop+0x98e>
	{
		_delay_ms(__us / 1000.0);
    3eb0:	fe 01       	movw	r30, r28
    3eb2:	e3 5a       	subi	r30, 0xA3	; 163
    3eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb6:	60 81       	ld	r22, Z
    3eb8:	71 81       	ldd	r23, Z+1	; 0x01
    3eba:	82 81       	ldd	r24, Z+2	; 0x02
    3ebc:	93 81       	ldd	r25, Z+3	; 0x03
    3ebe:	20 e0       	ldi	r18, 0x00	; 0
    3ec0:	30 e0       	ldi	r19, 0x00	; 0
    3ec2:	4a e7       	ldi	r20, 0x7A	; 122
    3ec4:	54 e4       	ldi	r21, 0x44	; 68
    3ec6:	0e 94 a4 3b 	call	0x7748	; 0x7748 <__divsf3>
    3eca:	dc 01       	movw	r26, r24
    3ecc:	cb 01       	movw	r24, r22
    3ece:	fe 01       	movw	r30, r28
    3ed0:	ec 5a       	subi	r30, 0xAC	; 172
    3ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed4:	80 83       	st	Z, r24
    3ed6:	91 83       	std	Z+1, r25	; 0x01
    3ed8:	a2 83       	std	Z+2, r26	; 0x02
    3eda:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3edc:	8e 01       	movw	r16, r28
    3ede:	00 5b       	subi	r16, 0xB0	; 176
    3ee0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ee2:	fe 01       	movw	r30, r28
    3ee4:	ec 5a       	subi	r30, 0xAC	; 172
    3ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee8:	60 81       	ld	r22, Z
    3eea:	71 81       	ldd	r23, Z+1	; 0x01
    3eec:	82 81       	ldd	r24, Z+2	; 0x02
    3eee:	93 81       	ldd	r25, Z+3	; 0x03
    3ef0:	2d ec       	ldi	r18, 0xCD	; 205
    3ef2:	3c ec       	ldi	r19, 0xCC	; 204
    3ef4:	4c e2       	ldi	r20, 0x2C	; 44
    3ef6:	55 e4       	ldi	r21, 0x45	; 69
    3ef8:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    3efc:	dc 01       	movw	r26, r24
    3efe:	cb 01       	movw	r24, r22
    3f00:	f8 01       	movw	r30, r16
    3f02:	80 83       	st	Z, r24
    3f04:	91 83       	std	Z+1, r25	; 0x01
    3f06:	a2 83       	std	Z+2, r26	; 0x02
    3f08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f0a:	fe 01       	movw	r30, r28
    3f0c:	e0 5b       	subi	r30, 0xB0	; 176
    3f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f10:	60 81       	ld	r22, Z
    3f12:	71 81       	ldd	r23, Z+1	; 0x01
    3f14:	82 81       	ldd	r24, Z+2	; 0x02
    3f16:	93 81       	ldd	r25, Z+3	; 0x03
    3f18:	20 e0       	ldi	r18, 0x00	; 0
    3f1a:	30 e0       	ldi	r19, 0x00	; 0
    3f1c:	40 e8       	ldi	r20, 0x80	; 128
    3f1e:	5f e3       	ldi	r21, 0x3F	; 63
    3f20:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    3f24:	88 23       	and	r24, r24
    3f26:	44 f4       	brge	.+16     	; 0x3f38 <LCDBusyLoop+0x896>
		__ticks = 1;
    3f28:	fe 01       	movw	r30, r28
    3f2a:	e2 5b       	subi	r30, 0xB2	; 178
    3f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2e:	81 e0       	ldi	r24, 0x01	; 1
    3f30:	90 e0       	ldi	r25, 0x00	; 0
    3f32:	91 83       	std	Z+1, r25	; 0x01
    3f34:	80 83       	st	Z, r24
    3f36:	64 c0       	rjmp	.+200    	; 0x4000 <LCDBusyLoop+0x95e>
	else if (__tmp > 65535)
    3f38:	fe 01       	movw	r30, r28
    3f3a:	e0 5b       	subi	r30, 0xB0	; 176
    3f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3e:	60 81       	ld	r22, Z
    3f40:	71 81       	ldd	r23, Z+1	; 0x01
    3f42:	82 81       	ldd	r24, Z+2	; 0x02
    3f44:	93 81       	ldd	r25, Z+3	; 0x03
    3f46:	20 e0       	ldi	r18, 0x00	; 0
    3f48:	3f ef       	ldi	r19, 0xFF	; 255
    3f4a:	4f e7       	ldi	r20, 0x7F	; 127
    3f4c:	57 e4       	ldi	r21, 0x47	; 71
    3f4e:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    3f52:	18 16       	cp	r1, r24
    3f54:	0c f0       	brlt	.+2      	; 0x3f58 <LCDBusyLoop+0x8b6>
    3f56:	43 c0       	rjmp	.+134    	; 0x3fde <LCDBusyLoop+0x93c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f58:	fe 01       	movw	r30, r28
    3f5a:	ec 5a       	subi	r30, 0xAC	; 172
    3f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5e:	60 81       	ld	r22, Z
    3f60:	71 81       	ldd	r23, Z+1	; 0x01
    3f62:	82 81       	ldd	r24, Z+2	; 0x02
    3f64:	93 81       	ldd	r25, Z+3	; 0x03
    3f66:	20 e0       	ldi	r18, 0x00	; 0
    3f68:	30 e0       	ldi	r19, 0x00	; 0
    3f6a:	40 e2       	ldi	r20, 0x20	; 32
    3f6c:	51 e4       	ldi	r21, 0x41	; 65
    3f6e:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    3f72:	dc 01       	movw	r26, r24
    3f74:	cb 01       	movw	r24, r22
    3f76:	8e 01       	movw	r16, r28
    3f78:	02 5b       	subi	r16, 0xB2	; 178
    3f7a:	1f 4f       	sbci	r17, 0xFF	; 255
    3f7c:	bc 01       	movw	r22, r24
    3f7e:	cd 01       	movw	r24, r26
    3f80:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    3f84:	dc 01       	movw	r26, r24
    3f86:	cb 01       	movw	r24, r22
    3f88:	f8 01       	movw	r30, r16
    3f8a:	91 83       	std	Z+1, r25	; 0x01
    3f8c:	80 83       	st	Z, r24
    3f8e:	1f c0       	rjmp	.+62     	; 0x3fce <LCDBusyLoop+0x92c>
    3f90:	fe 01       	movw	r30, r28
    3f92:	e4 5b       	subi	r30, 0xB4	; 180
    3f94:	ff 4f       	sbci	r31, 0xFF	; 255
    3f96:	84 e1       	ldi	r24, 0x14	; 20
    3f98:	91 e0       	ldi	r25, 0x01	; 1
    3f9a:	91 83       	std	Z+1, r25	; 0x01
    3f9c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3f9e:	fe 01       	movw	r30, r28
    3fa0:	e4 5b       	subi	r30, 0xB4	; 180
    3fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa4:	80 81       	ld	r24, Z
    3fa6:	91 81       	ldd	r25, Z+1	; 0x01
    3fa8:	01 97       	sbiw	r24, 0x01	; 1
    3faa:	f1 f7       	brne	.-4      	; 0x3fa8 <LCDBusyLoop+0x906>
    3fac:	fe 01       	movw	r30, r28
    3fae:	e4 5b       	subi	r30, 0xB4	; 180
    3fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb2:	91 83       	std	Z+1, r25	; 0x01
    3fb4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fb6:	de 01       	movw	r26, r28
    3fb8:	a2 5b       	subi	r26, 0xB2	; 178
    3fba:	bf 4f       	sbci	r27, 0xFF	; 255
    3fbc:	fe 01       	movw	r30, r28
    3fbe:	e2 5b       	subi	r30, 0xB2	; 178
    3fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc2:	80 81       	ld	r24, Z
    3fc4:	91 81       	ldd	r25, Z+1	; 0x01
    3fc6:	01 97       	sbiw	r24, 0x01	; 1
    3fc8:	11 96       	adiw	r26, 0x01	; 1
    3fca:	9c 93       	st	X, r25
    3fcc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fce:	fe 01       	movw	r30, r28
    3fd0:	e2 5b       	subi	r30, 0xB2	; 178
    3fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd4:	80 81       	ld	r24, Z
    3fd6:	91 81       	ldd	r25, Z+1	; 0x01
    3fd8:	00 97       	sbiw	r24, 0x00	; 0
    3fda:	d1 f6       	brne	.-76     	; 0x3f90 <LCDBusyLoop+0x8ee>
    3fdc:	4b c0       	rjmp	.+150    	; 0x4074 <LCDBusyLoop+0x9d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fde:	8e 01       	movw	r16, r28
    3fe0:	02 5b       	subi	r16, 0xB2	; 178
    3fe2:	1f 4f       	sbci	r17, 0xFF	; 255
    3fe4:	fe 01       	movw	r30, r28
    3fe6:	e0 5b       	subi	r30, 0xB0	; 176
    3fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fea:	60 81       	ld	r22, Z
    3fec:	71 81       	ldd	r23, Z+1	; 0x01
    3fee:	82 81       	ldd	r24, Z+2	; 0x02
    3ff0:	93 81       	ldd	r25, Z+3	; 0x03
    3ff2:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    3ff6:	dc 01       	movw	r26, r24
    3ff8:	cb 01       	movw	r24, r22
    3ffa:	f8 01       	movw	r30, r16
    3ffc:	91 83       	std	Z+1, r25	; 0x01
    3ffe:	80 83       	st	Z, r24
    4000:	de 01       	movw	r26, r28
    4002:	a6 5b       	subi	r26, 0xB6	; 182
    4004:	bf 4f       	sbci	r27, 0xFF	; 255
    4006:	fe 01       	movw	r30, r28
    4008:	e2 5b       	subi	r30, 0xB2	; 178
    400a:	ff 4f       	sbci	r31, 0xFF	; 255
    400c:	80 81       	ld	r24, Z
    400e:	91 81       	ldd	r25, Z+1	; 0x01
    4010:	11 96       	adiw	r26, 0x01	; 1
    4012:	9c 93       	st	X, r25
    4014:	8e 93       	st	-X, r24
    4016:	fe 01       	movw	r30, r28
    4018:	e6 5b       	subi	r30, 0xB6	; 182
    401a:	ff 4f       	sbci	r31, 0xFF	; 255
    401c:	80 81       	ld	r24, Z
    401e:	91 81       	ldd	r25, Z+1	; 0x01
    4020:	01 97       	sbiw	r24, 0x01	; 1
    4022:	f1 f7       	brne	.-4      	; 0x4020 <LCDBusyLoop+0x97e>
    4024:	fe 01       	movw	r30, r28
    4026:	e6 5b       	subi	r30, 0xB6	; 182
    4028:	ff 4f       	sbci	r31, 0xFF	; 255
    402a:	91 83       	std	Z+1, r25	; 0x01
    402c:	80 83       	st	Z, r24
    402e:	22 c0       	rjmp	.+68     	; 0x4074 <LCDBusyLoop+0x9d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4030:	8e 01       	movw	r16, r28
    4032:	08 5a       	subi	r16, 0xA8	; 168
    4034:	1f 4f       	sbci	r17, 0xFF	; 255
    4036:	fe 01       	movw	r30, r28
    4038:	e7 5a       	subi	r30, 0xA7	; 167
    403a:	ff 4f       	sbci	r31, 0xFF	; 255
    403c:	60 81       	ld	r22, Z
    403e:	71 81       	ldd	r23, Z+1	; 0x01
    4040:	82 81       	ldd	r24, Z+2	; 0x02
    4042:	93 81       	ldd	r25, Z+3	; 0x03
    4044:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    4048:	dc 01       	movw	r26, r24
    404a:	cb 01       	movw	r24, r22
    404c:	f8 01       	movw	r30, r16
    404e:	80 83       	st	Z, r24
    4050:	de 01       	movw	r26, r28
    4052:	a7 5b       	subi	r26, 0xB7	; 183
    4054:	bf 4f       	sbci	r27, 0xFF	; 255
    4056:	fe 01       	movw	r30, r28
    4058:	e8 5a       	subi	r30, 0xA8	; 168
    405a:	ff 4f       	sbci	r31, 0xFF	; 255
    405c:	80 81       	ld	r24, Z
    405e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4060:	fe 01       	movw	r30, r28
    4062:	e7 5b       	subi	r30, 0xB7	; 183
    4064:	ff 4f       	sbci	r31, 0xFF	; 255
    4066:	80 81       	ld	r24, Z
    4068:	8a 95       	dec	r24
    406a:	f1 f7       	brne	.-4      	; 0x4068 <LCDBusyLoop+0x9c6>
    406c:	fe 01       	movw	r30, r28
    406e:	e7 5b       	subi	r30, 0xB7	; 183
    4070:	ff 4f       	sbci	r31, 0xFF	; 255
    4072:	80 83       	st	Z, r24
		_delay_us(1);	//tEL

		SET_E();
    4074:	a5 e3       	ldi	r26, 0x35	; 53
    4076:	b0 e0       	ldi	r27, 0x00	; 0
    4078:	e5 e3       	ldi	r30, 0x35	; 53
    407a:	f0 e0       	ldi	r31, 0x00	; 0
    407c:	80 81       	ld	r24, Z
    407e:	80 68       	ori	r24, 0x80	; 128
    4080:	8c 93       	st	X, r24
    4082:	fe 01       	movw	r30, r28
    4084:	eb 5b       	subi	r30, 0xBB	; 187
    4086:	ff 4f       	sbci	r31, 0xFF	; 255
    4088:	80 e0       	ldi	r24, 0x00	; 0
    408a:	90 e0       	ldi	r25, 0x00	; 0
    408c:	a0 e0       	ldi	r26, 0x00	; 0
    408e:	bf e3       	ldi	r27, 0x3F	; 63
    4090:	80 83       	st	Z, r24
    4092:	91 83       	std	Z+1, r25	; 0x01
    4094:	a2 83       	std	Z+2, r26	; 0x02
    4096:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4098:	8e 01       	movw	r16, r28
    409a:	0f 5b       	subi	r16, 0xBF	; 191
    409c:	1f 4f       	sbci	r17, 0xFF	; 255
    409e:	fe 01       	movw	r30, r28
    40a0:	eb 5b       	subi	r30, 0xBB	; 187
    40a2:	ff 4f       	sbci	r31, 0xFF	; 255
    40a4:	60 81       	ld	r22, Z
    40a6:	71 81       	ldd	r23, Z+1	; 0x01
    40a8:	82 81       	ldd	r24, Z+2	; 0x02
    40aa:	93 81       	ldd	r25, Z+3	; 0x03
    40ac:	2a ef       	ldi	r18, 0xFA	; 250
    40ae:	3d ee       	ldi	r19, 0xED	; 237
    40b0:	4b e6       	ldi	r20, 0x6B	; 107
    40b2:	50 e4       	ldi	r21, 0x40	; 64
    40b4:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    40b8:	dc 01       	movw	r26, r24
    40ba:	cb 01       	movw	r24, r22
    40bc:	f8 01       	movw	r30, r16
    40be:	80 83       	st	Z, r24
    40c0:	91 83       	std	Z+1, r25	; 0x01
    40c2:	a2 83       	std	Z+2, r26	; 0x02
    40c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    40c6:	fe 01       	movw	r30, r28
    40c8:	ef 5b       	subi	r30, 0xBF	; 191
    40ca:	ff 4f       	sbci	r31, 0xFF	; 255
    40cc:	60 81       	ld	r22, Z
    40ce:	71 81       	ldd	r23, Z+1	; 0x01
    40d0:	82 81       	ldd	r24, Z+2	; 0x02
    40d2:	93 81       	ldd	r25, Z+3	; 0x03
    40d4:	20 e0       	ldi	r18, 0x00	; 0
    40d6:	30 e0       	ldi	r19, 0x00	; 0
    40d8:	40 e8       	ldi	r20, 0x80	; 128
    40da:	5f e3       	ldi	r21, 0x3F	; 63
    40dc:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    40e0:	88 23       	and	r24, r24
    40e2:	34 f4       	brge	.+12     	; 0x40f0 <LCDBusyLoop+0xa4e>
		__ticks = 1;
    40e4:	81 e0       	ldi	r24, 0x01	; 1
    40e6:	fe 01       	movw	r30, r28
    40e8:	e0 5c       	subi	r30, 0xC0	; 192
    40ea:	ff 4f       	sbci	r31, 0xFF	; 255
    40ec:	80 83       	st	Z, r24
    40ee:	9d c0       	rjmp	.+314    	; 0x422a <LCDBusyLoop+0xb88>
	else if (__tmp > 255)
    40f0:	fe 01       	movw	r30, r28
    40f2:	ef 5b       	subi	r30, 0xBF	; 191
    40f4:	ff 4f       	sbci	r31, 0xFF	; 255
    40f6:	60 81       	ld	r22, Z
    40f8:	71 81       	ldd	r23, Z+1	; 0x01
    40fa:	82 81       	ldd	r24, Z+2	; 0x02
    40fc:	93 81       	ldd	r25, Z+3	; 0x03
    40fe:	20 e0       	ldi	r18, 0x00	; 0
    4100:	30 e0       	ldi	r19, 0x00	; 0
    4102:	4f e7       	ldi	r20, 0x7F	; 127
    4104:	53 e4       	ldi	r21, 0x43	; 67
    4106:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    410a:	18 16       	cp	r1, r24
    410c:	0c f0       	brlt	.+2      	; 0x4110 <LCDBusyLoop+0xa6e>
    410e:	7e c0       	rjmp	.+252    	; 0x420c <LCDBusyLoop+0xb6a>
	{
		_delay_ms(__us / 1000.0);
    4110:	fe 01       	movw	r30, r28
    4112:	eb 5b       	subi	r30, 0xBB	; 187
    4114:	ff 4f       	sbci	r31, 0xFF	; 255
    4116:	60 81       	ld	r22, Z
    4118:	71 81       	ldd	r23, Z+1	; 0x01
    411a:	82 81       	ldd	r24, Z+2	; 0x02
    411c:	93 81       	ldd	r25, Z+3	; 0x03
    411e:	20 e0       	ldi	r18, 0x00	; 0
    4120:	30 e0       	ldi	r19, 0x00	; 0
    4122:	4a e7       	ldi	r20, 0x7A	; 122
    4124:	54 e4       	ldi	r21, 0x44	; 68
    4126:	0e 94 a4 3b 	call	0x7748	; 0x7748 <__divsf3>
    412a:	dc 01       	movw	r26, r24
    412c:	cb 01       	movw	r24, r22
    412e:	8c af       	std	Y+60, r24	; 0x3c
    4130:	9d af       	std	Y+61, r25	; 0x3d
    4132:	ae af       	std	Y+62, r26	; 0x3e
    4134:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4136:	6c ad       	ldd	r22, Y+60	; 0x3c
    4138:	7d ad       	ldd	r23, Y+61	; 0x3d
    413a:	8e ad       	ldd	r24, Y+62	; 0x3e
    413c:	9f ad       	ldd	r25, Y+63	; 0x3f
    413e:	2d ec       	ldi	r18, 0xCD	; 205
    4140:	3c ec       	ldi	r19, 0xCC	; 204
    4142:	4c e2       	ldi	r20, 0x2C	; 44
    4144:	55 e4       	ldi	r21, 0x45	; 69
    4146:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    414a:	dc 01       	movw	r26, r24
    414c:	cb 01       	movw	r24, r22
    414e:	88 af       	std	Y+56, r24	; 0x38
    4150:	99 af       	std	Y+57, r25	; 0x39
    4152:	aa af       	std	Y+58, r26	; 0x3a
    4154:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    4156:	68 ad       	ldd	r22, Y+56	; 0x38
    4158:	79 ad       	ldd	r23, Y+57	; 0x39
    415a:	8a ad       	ldd	r24, Y+58	; 0x3a
    415c:	9b ad       	ldd	r25, Y+59	; 0x3b
    415e:	20 e0       	ldi	r18, 0x00	; 0
    4160:	30 e0       	ldi	r19, 0x00	; 0
    4162:	40 e8       	ldi	r20, 0x80	; 128
    4164:	5f e3       	ldi	r21, 0x3F	; 63
    4166:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    416a:	88 23       	and	r24, r24
    416c:	2c f4       	brge	.+10     	; 0x4178 <LCDBusyLoop+0xad6>
		__ticks = 1;
    416e:	81 e0       	ldi	r24, 0x01	; 1
    4170:	90 e0       	ldi	r25, 0x00	; 0
    4172:	9f ab       	std	Y+55, r25	; 0x37
    4174:	8e ab       	std	Y+54, r24	; 0x36
    4176:	3f c0       	rjmp	.+126    	; 0x41f6 <LCDBusyLoop+0xb54>
	else if (__tmp > 65535)
    4178:	68 ad       	ldd	r22, Y+56	; 0x38
    417a:	79 ad       	ldd	r23, Y+57	; 0x39
    417c:	8a ad       	ldd	r24, Y+58	; 0x3a
    417e:	9b ad       	ldd	r25, Y+59	; 0x3b
    4180:	20 e0       	ldi	r18, 0x00	; 0
    4182:	3f ef       	ldi	r19, 0xFF	; 255
    4184:	4f e7       	ldi	r20, 0x7F	; 127
    4186:	57 e4       	ldi	r21, 0x47	; 71
    4188:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    418c:	18 16       	cp	r1, r24
    418e:	4c f5       	brge	.+82     	; 0x41e2 <LCDBusyLoop+0xb40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4190:	6c ad       	ldd	r22, Y+60	; 0x3c
    4192:	7d ad       	ldd	r23, Y+61	; 0x3d
    4194:	8e ad       	ldd	r24, Y+62	; 0x3e
    4196:	9f ad       	ldd	r25, Y+63	; 0x3f
    4198:	20 e0       	ldi	r18, 0x00	; 0
    419a:	30 e0       	ldi	r19, 0x00	; 0
    419c:	40 e2       	ldi	r20, 0x20	; 32
    419e:	51 e4       	ldi	r21, 0x41	; 65
    41a0:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    41a4:	dc 01       	movw	r26, r24
    41a6:	cb 01       	movw	r24, r22
    41a8:	bc 01       	movw	r22, r24
    41aa:	cd 01       	movw	r24, r26
    41ac:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    41b0:	dc 01       	movw	r26, r24
    41b2:	cb 01       	movw	r24, r22
    41b4:	9f ab       	std	Y+55, r25	; 0x37
    41b6:	8e ab       	std	Y+54, r24	; 0x36
    41b8:	0f c0       	rjmp	.+30     	; 0x41d8 <LCDBusyLoop+0xb36>
    41ba:	84 e1       	ldi	r24, 0x14	; 20
    41bc:	91 e0       	ldi	r25, 0x01	; 1
    41be:	9d ab       	std	Y+53, r25	; 0x35
    41c0:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    41c2:	8c a9       	ldd	r24, Y+52	; 0x34
    41c4:	9d a9       	ldd	r25, Y+53	; 0x35
    41c6:	01 97       	sbiw	r24, 0x01	; 1
    41c8:	f1 f7       	brne	.-4      	; 0x41c6 <LCDBusyLoop+0xb24>
    41ca:	9d ab       	std	Y+53, r25	; 0x35
    41cc:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41ce:	8e a9       	ldd	r24, Y+54	; 0x36
    41d0:	9f a9       	ldd	r25, Y+55	; 0x37
    41d2:	01 97       	sbiw	r24, 0x01	; 1
    41d4:	9f ab       	std	Y+55, r25	; 0x37
    41d6:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41d8:	8e a9       	ldd	r24, Y+54	; 0x36
    41da:	9f a9       	ldd	r25, Y+55	; 0x37
    41dc:	00 97       	sbiw	r24, 0x00	; 0
    41de:	69 f7       	brne	.-38     	; 0x41ba <LCDBusyLoop+0xb18>
    41e0:	2d c0       	rjmp	.+90     	; 0x423c <LCDBusyLoop+0xb9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41e2:	68 ad       	ldd	r22, Y+56	; 0x38
    41e4:	79 ad       	ldd	r23, Y+57	; 0x39
    41e6:	8a ad       	ldd	r24, Y+58	; 0x3a
    41e8:	9b ad       	ldd	r25, Y+59	; 0x3b
    41ea:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    41ee:	dc 01       	movw	r26, r24
    41f0:	cb 01       	movw	r24, r22
    41f2:	9f ab       	std	Y+55, r25	; 0x37
    41f4:	8e ab       	std	Y+54, r24	; 0x36
    41f6:	8e a9       	ldd	r24, Y+54	; 0x36
    41f8:	9f a9       	ldd	r25, Y+55	; 0x37
    41fa:	9b ab       	std	Y+51, r25	; 0x33
    41fc:	8a ab       	std	Y+50, r24	; 0x32
    41fe:	8a a9       	ldd	r24, Y+50	; 0x32
    4200:	9b a9       	ldd	r25, Y+51	; 0x33
    4202:	01 97       	sbiw	r24, 0x01	; 1
    4204:	f1 f7       	brne	.-4      	; 0x4202 <LCDBusyLoop+0xb60>
    4206:	9b ab       	std	Y+51, r25	; 0x33
    4208:	8a ab       	std	Y+50, r24	; 0x32
    420a:	18 c0       	rjmp	.+48     	; 0x423c <LCDBusyLoop+0xb9a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    420c:	fe 01       	movw	r30, r28
    420e:	ef 5b       	subi	r30, 0xBF	; 191
    4210:	ff 4f       	sbci	r31, 0xFF	; 255
    4212:	60 81       	ld	r22, Z
    4214:	71 81       	ldd	r23, Z+1	; 0x01
    4216:	82 81       	ldd	r24, Z+2	; 0x02
    4218:	93 81       	ldd	r25, Z+3	; 0x03
    421a:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    421e:	dc 01       	movw	r26, r24
    4220:	cb 01       	movw	r24, r22
    4222:	fe 01       	movw	r30, r28
    4224:	e0 5c       	subi	r30, 0xC0	; 192
    4226:	ff 4f       	sbci	r31, 0xFF	; 255
    4228:	80 83       	st	Z, r24
    422a:	fe 01       	movw	r30, r28
    422c:	e0 5c       	subi	r30, 0xC0	; 192
    422e:	ff 4f       	sbci	r31, 0xFF	; 255
    4230:	80 81       	ld	r24, Z
    4232:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4234:	89 a9       	ldd	r24, Y+49	; 0x31
    4236:	8a 95       	dec	r24
    4238:	f1 f7       	brne	.-4      	; 0x4236 <LCDBusyLoop+0xb94>
    423a:	89 ab       	std	Y+49, r24	; 0x31
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
    423c:	e3 e3       	ldi	r30, 0x33	; 51
    423e:	f0 e0       	ldi	r31, 0x00	; 0
    4240:	de 01       	movw	r26, r28
    4242:	a7 55       	subi	r26, 0x57	; 87
    4244:	bf 4f       	sbci	r27, 0xFF	; 255
    4246:	80 81       	ld	r24, Z
    4248:	8c 93       	st	X, r24
		temp&=0x0F;
    424a:	de 01       	movw	r26, r28
    424c:	a7 55       	subi	r26, 0x57	; 87
    424e:	bf 4f       	sbci	r27, 0xFF	; 255
    4250:	fe 01       	movw	r30, r28
    4252:	e7 55       	subi	r30, 0x57	; 87
    4254:	ff 4f       	sbci	r31, 0xFF	; 255
    4256:	80 81       	ld	r24, Z
    4258:	8f 70       	andi	r24, 0x0F	; 15
    425a:	8c 93       	st	X, r24

		status=status|temp;
    425c:	9e 01       	movw	r18, r28
    425e:	26 55       	subi	r18, 0x56	; 86
    4260:	3f 4f       	sbci	r19, 0xFF	; 255
    4262:	fe 01       	movw	r30, r28
    4264:	e6 55       	subi	r30, 0x56	; 86
    4266:	ff 4f       	sbci	r31, 0xFF	; 255
    4268:	de 01       	movw	r26, r28
    426a:	a7 55       	subi	r26, 0x57	; 87
    426c:	bf 4f       	sbci	r27, 0xFF	; 255
    426e:	90 81       	ld	r25, Z
    4270:	8c 91       	ld	r24, X
    4272:	89 2b       	or	r24, r25
    4274:	f9 01       	movw	r30, r18
    4276:	80 83       	st	Z, r24

		busy=status & 0x80;//0b10000000
    4278:	de 01       	movw	r26, r28
    427a:	a5 55       	subi	r26, 0x55	; 85
    427c:	bf 4f       	sbci	r27, 0xFF	; 255
    427e:	fe 01       	movw	r30, r28
    4280:	e6 55       	subi	r30, 0x56	; 86
    4282:	ff 4f       	sbci	r31, 0xFF	; 255
    4284:	80 81       	ld	r24, Z
    4286:	80 78       	andi	r24, 0x80	; 128
    4288:	8c 93       	st	X, r24
    428a:	80 e0       	ldi	r24, 0x00	; 0
    428c:	90 e0       	ldi	r25, 0x00	; 0
    428e:	a0 e0       	ldi	r26, 0x00	; 0
    4290:	bf e3       	ldi	r27, 0x3F	; 63
    4292:	8d a7       	std	Y+45, r24	; 0x2d
    4294:	9e a7       	std	Y+46, r25	; 0x2e
    4296:	af a7       	std	Y+47, r26	; 0x2f
    4298:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    429a:	6d a5       	ldd	r22, Y+45	; 0x2d
    429c:	7e a5       	ldd	r23, Y+46	; 0x2e
    429e:	8f a5       	ldd	r24, Y+47	; 0x2f
    42a0:	98 a9       	ldd	r25, Y+48	; 0x30
    42a2:	2a ef       	ldi	r18, 0xFA	; 250
    42a4:	3d ee       	ldi	r19, 0xED	; 237
    42a6:	4b e6       	ldi	r20, 0x6B	; 107
    42a8:	50 e4       	ldi	r21, 0x40	; 64
    42aa:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    42ae:	dc 01       	movw	r26, r24
    42b0:	cb 01       	movw	r24, r22
    42b2:	89 a7       	std	Y+41, r24	; 0x29
    42b4:	9a a7       	std	Y+42, r25	; 0x2a
    42b6:	ab a7       	std	Y+43, r26	; 0x2b
    42b8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    42ba:	69 a5       	ldd	r22, Y+41	; 0x29
    42bc:	7a a5       	ldd	r23, Y+42	; 0x2a
    42be:	8b a5       	ldd	r24, Y+43	; 0x2b
    42c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    42c2:	20 e0       	ldi	r18, 0x00	; 0
    42c4:	30 e0       	ldi	r19, 0x00	; 0
    42c6:	40 e8       	ldi	r20, 0x80	; 128
    42c8:	5f e3       	ldi	r21, 0x3F	; 63
    42ca:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    42ce:	88 23       	and	r24, r24
    42d0:	1c f4       	brge	.+6      	; 0x42d8 <LCDBusyLoop+0xc36>
		__ticks = 1;
    42d2:	81 e0       	ldi	r24, 0x01	; 1
    42d4:	88 a7       	std	Y+40, r24	; 0x28
    42d6:	91 c0       	rjmp	.+290    	; 0x43fa <LCDBusyLoop+0xd58>
	else if (__tmp > 255)
    42d8:	69 a5       	ldd	r22, Y+41	; 0x29
    42da:	7a a5       	ldd	r23, Y+42	; 0x2a
    42dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    42de:	9c a5       	ldd	r25, Y+44	; 0x2c
    42e0:	20 e0       	ldi	r18, 0x00	; 0
    42e2:	30 e0       	ldi	r19, 0x00	; 0
    42e4:	4f e7       	ldi	r20, 0x7F	; 127
    42e6:	53 e4       	ldi	r21, 0x43	; 67
    42e8:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    42ec:	18 16       	cp	r1, r24
    42ee:	0c f0       	brlt	.+2      	; 0x42f2 <LCDBusyLoop+0xc50>
    42f0:	7b c0       	rjmp	.+246    	; 0x43e8 <LCDBusyLoop+0xd46>
	{
		_delay_ms(__us / 1000.0);
    42f2:	6d a5       	ldd	r22, Y+45	; 0x2d
    42f4:	7e a5       	ldd	r23, Y+46	; 0x2e
    42f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    42f8:	98 a9       	ldd	r25, Y+48	; 0x30
    42fa:	20 e0       	ldi	r18, 0x00	; 0
    42fc:	30 e0       	ldi	r19, 0x00	; 0
    42fe:	4a e7       	ldi	r20, 0x7A	; 122
    4300:	54 e4       	ldi	r21, 0x44	; 68
    4302:	0e 94 a4 3b 	call	0x7748	; 0x7748 <__divsf3>
    4306:	dc 01       	movw	r26, r24
    4308:	cb 01       	movw	r24, r22
    430a:	8c a3       	std	Y+36, r24	; 0x24
    430c:	9d a3       	std	Y+37, r25	; 0x25
    430e:	ae a3       	std	Y+38, r26	; 0x26
    4310:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4312:	6c a1       	ldd	r22, Y+36	; 0x24
    4314:	7d a1       	ldd	r23, Y+37	; 0x25
    4316:	8e a1       	ldd	r24, Y+38	; 0x26
    4318:	9f a1       	ldd	r25, Y+39	; 0x27
    431a:	2d ec       	ldi	r18, 0xCD	; 205
    431c:	3c ec       	ldi	r19, 0xCC	; 204
    431e:	4c e2       	ldi	r20, 0x2C	; 44
    4320:	55 e4       	ldi	r21, 0x45	; 69
    4322:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    4326:	dc 01       	movw	r26, r24
    4328:	cb 01       	movw	r24, r22
    432a:	88 a3       	std	Y+32, r24	; 0x20
    432c:	99 a3       	std	Y+33, r25	; 0x21
    432e:	aa a3       	std	Y+34, r26	; 0x22
    4330:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    4332:	68 a1       	ldd	r22, Y+32	; 0x20
    4334:	79 a1       	ldd	r23, Y+33	; 0x21
    4336:	8a a1       	ldd	r24, Y+34	; 0x22
    4338:	9b a1       	ldd	r25, Y+35	; 0x23
    433a:	20 e0       	ldi	r18, 0x00	; 0
    433c:	30 e0       	ldi	r19, 0x00	; 0
    433e:	40 e8       	ldi	r20, 0x80	; 128
    4340:	5f e3       	ldi	r21, 0x3F	; 63
    4342:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    4346:	88 23       	and	r24, r24
    4348:	2c f4       	brge	.+10     	; 0x4354 <LCDBusyLoop+0xcb2>
		__ticks = 1;
    434a:	81 e0       	ldi	r24, 0x01	; 1
    434c:	90 e0       	ldi	r25, 0x00	; 0
    434e:	9f 8f       	std	Y+31, r25	; 0x1f
    4350:	8e 8f       	std	Y+30, r24	; 0x1e
    4352:	3f c0       	rjmp	.+126    	; 0x43d2 <LCDBusyLoop+0xd30>
	else if (__tmp > 65535)
    4354:	68 a1       	ldd	r22, Y+32	; 0x20
    4356:	79 a1       	ldd	r23, Y+33	; 0x21
    4358:	8a a1       	ldd	r24, Y+34	; 0x22
    435a:	9b a1       	ldd	r25, Y+35	; 0x23
    435c:	20 e0       	ldi	r18, 0x00	; 0
    435e:	3f ef       	ldi	r19, 0xFF	; 255
    4360:	4f e7       	ldi	r20, 0x7F	; 127
    4362:	57 e4       	ldi	r21, 0x47	; 71
    4364:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    4368:	18 16       	cp	r1, r24
    436a:	4c f5       	brge	.+82     	; 0x43be <LCDBusyLoop+0xd1c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    436c:	6c a1       	ldd	r22, Y+36	; 0x24
    436e:	7d a1       	ldd	r23, Y+37	; 0x25
    4370:	8e a1       	ldd	r24, Y+38	; 0x26
    4372:	9f a1       	ldd	r25, Y+39	; 0x27
    4374:	20 e0       	ldi	r18, 0x00	; 0
    4376:	30 e0       	ldi	r19, 0x00	; 0
    4378:	40 e2       	ldi	r20, 0x20	; 32
    437a:	51 e4       	ldi	r21, 0x41	; 65
    437c:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    4380:	dc 01       	movw	r26, r24
    4382:	cb 01       	movw	r24, r22
    4384:	bc 01       	movw	r22, r24
    4386:	cd 01       	movw	r24, r26
    4388:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    438c:	dc 01       	movw	r26, r24
    438e:	cb 01       	movw	r24, r22
    4390:	9f 8f       	std	Y+31, r25	; 0x1f
    4392:	8e 8f       	std	Y+30, r24	; 0x1e
    4394:	0f c0       	rjmp	.+30     	; 0x43b4 <LCDBusyLoop+0xd12>
    4396:	84 e1       	ldi	r24, 0x14	; 20
    4398:	91 e0       	ldi	r25, 0x01	; 1
    439a:	9d 8f       	std	Y+29, r25	; 0x1d
    439c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    439e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    43a0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    43a2:	01 97       	sbiw	r24, 0x01	; 1
    43a4:	f1 f7       	brne	.-4      	; 0x43a2 <LCDBusyLoop+0xd00>
    43a6:	9d 8f       	std	Y+29, r25	; 0x1d
    43a8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    43ac:	9f 8d       	ldd	r25, Y+31	; 0x1f
    43ae:	01 97       	sbiw	r24, 0x01	; 1
    43b0:	9f 8f       	std	Y+31, r25	; 0x1f
    43b2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    43b6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    43b8:	00 97       	sbiw	r24, 0x00	; 0
    43ba:	69 f7       	brne	.-38     	; 0x4396 <LCDBusyLoop+0xcf4>
    43bc:	24 c0       	rjmp	.+72     	; 0x4406 <LCDBusyLoop+0xd64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43be:	68 a1       	ldd	r22, Y+32	; 0x20
    43c0:	79 a1       	ldd	r23, Y+33	; 0x21
    43c2:	8a a1       	ldd	r24, Y+34	; 0x22
    43c4:	9b a1       	ldd	r25, Y+35	; 0x23
    43c6:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    43ca:	dc 01       	movw	r26, r24
    43cc:	cb 01       	movw	r24, r22
    43ce:	9f 8f       	std	Y+31, r25	; 0x1f
    43d0:	8e 8f       	std	Y+30, r24	; 0x1e
    43d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    43d4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    43d6:	9b 8f       	std	Y+27, r25	; 0x1b
    43d8:	8a 8f       	std	Y+26, r24	; 0x1a
    43da:	8a 8d       	ldd	r24, Y+26	; 0x1a
    43dc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    43de:	01 97       	sbiw	r24, 0x01	; 1
    43e0:	f1 f7       	brne	.-4      	; 0x43de <LCDBusyLoop+0xd3c>
    43e2:	9b 8f       	std	Y+27, r25	; 0x1b
    43e4:	8a 8f       	std	Y+26, r24	; 0x1a
    43e6:	0f c0       	rjmp	.+30     	; 0x4406 <LCDBusyLoop+0xd64>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    43e8:	69 a5       	ldd	r22, Y+41	; 0x29
    43ea:	7a a5       	ldd	r23, Y+42	; 0x2a
    43ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    43ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    43f0:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    43f4:	dc 01       	movw	r26, r24
    43f6:	cb 01       	movw	r24, r22
    43f8:	88 a7       	std	Y+40, r24	; 0x28
    43fa:	88 a5       	ldd	r24, Y+40	; 0x28
    43fc:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    43fe:	89 8d       	ldd	r24, Y+25	; 0x19
    4400:	8a 95       	dec	r24
    4402:	f1 f7       	brne	.-4      	; 0x4400 <LCDBusyLoop+0xd5e>
    4404:	89 8f       	std	Y+25, r24	; 0x19

		_delay_us(0.5);
		CLEAR_E();
    4406:	a5 e3       	ldi	r26, 0x35	; 53
    4408:	b0 e0       	ldi	r27, 0x00	; 0
    440a:	e5 e3       	ldi	r30, 0x35	; 53
    440c:	f0 e0       	ldi	r31, 0x00	; 0
    440e:	80 81       	ld	r24, Z
    4410:	8f 77       	andi	r24, 0x7F	; 127
    4412:	8c 93       	st	X, r24
    4414:	80 e0       	ldi	r24, 0x00	; 0
    4416:	90 e0       	ldi	r25, 0x00	; 0
    4418:	a0 e8       	ldi	r26, 0x80	; 128
    441a:	bf e3       	ldi	r27, 0x3F	; 63
    441c:	8d 8b       	std	Y+21, r24	; 0x15
    441e:	9e 8b       	std	Y+22, r25	; 0x16
    4420:	af 8b       	std	Y+23, r26	; 0x17
    4422:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4424:	6d 89       	ldd	r22, Y+21	; 0x15
    4426:	7e 89       	ldd	r23, Y+22	; 0x16
    4428:	8f 89       	ldd	r24, Y+23	; 0x17
    442a:	98 8d       	ldd	r25, Y+24	; 0x18
    442c:	2a ef       	ldi	r18, 0xFA	; 250
    442e:	3d ee       	ldi	r19, 0xED	; 237
    4430:	4b e6       	ldi	r20, 0x6B	; 107
    4432:	50 e4       	ldi	r21, 0x40	; 64
    4434:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    4438:	dc 01       	movw	r26, r24
    443a:	cb 01       	movw	r24, r22
    443c:	89 8b       	std	Y+17, r24	; 0x11
    443e:	9a 8b       	std	Y+18, r25	; 0x12
    4440:	ab 8b       	std	Y+19, r26	; 0x13
    4442:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4444:	69 89       	ldd	r22, Y+17	; 0x11
    4446:	7a 89       	ldd	r23, Y+18	; 0x12
    4448:	8b 89       	ldd	r24, Y+19	; 0x13
    444a:	9c 89       	ldd	r25, Y+20	; 0x14
    444c:	20 e0       	ldi	r18, 0x00	; 0
    444e:	30 e0       	ldi	r19, 0x00	; 0
    4450:	40 e8       	ldi	r20, 0x80	; 128
    4452:	5f e3       	ldi	r21, 0x3F	; 63
    4454:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    4458:	88 23       	and	r24, r24
    445a:	1c f4       	brge	.+6      	; 0x4462 <LCDBusyLoop+0xdc0>
		__ticks = 1;
    445c:	81 e0       	ldi	r24, 0x01	; 1
    445e:	88 8b       	std	Y+16, r24	; 0x10
    4460:	91 c0       	rjmp	.+290    	; 0x4584 <LCDBusyLoop+0xee2>
	else if (__tmp > 255)
    4462:	69 89       	ldd	r22, Y+17	; 0x11
    4464:	7a 89       	ldd	r23, Y+18	; 0x12
    4466:	8b 89       	ldd	r24, Y+19	; 0x13
    4468:	9c 89       	ldd	r25, Y+20	; 0x14
    446a:	20 e0       	ldi	r18, 0x00	; 0
    446c:	30 e0       	ldi	r19, 0x00	; 0
    446e:	4f e7       	ldi	r20, 0x7F	; 127
    4470:	53 e4       	ldi	r21, 0x43	; 67
    4472:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    4476:	18 16       	cp	r1, r24
    4478:	0c f0       	brlt	.+2      	; 0x447c <LCDBusyLoop+0xdda>
    447a:	7b c0       	rjmp	.+246    	; 0x4572 <LCDBusyLoop+0xed0>
	{
		_delay_ms(__us / 1000.0);
    447c:	6d 89       	ldd	r22, Y+21	; 0x15
    447e:	7e 89       	ldd	r23, Y+22	; 0x16
    4480:	8f 89       	ldd	r24, Y+23	; 0x17
    4482:	98 8d       	ldd	r25, Y+24	; 0x18
    4484:	20 e0       	ldi	r18, 0x00	; 0
    4486:	30 e0       	ldi	r19, 0x00	; 0
    4488:	4a e7       	ldi	r20, 0x7A	; 122
    448a:	54 e4       	ldi	r21, 0x44	; 68
    448c:	0e 94 a4 3b 	call	0x7748	; 0x7748 <__divsf3>
    4490:	dc 01       	movw	r26, r24
    4492:	cb 01       	movw	r24, r22
    4494:	8c 87       	std	Y+12, r24	; 0x0c
    4496:	9d 87       	std	Y+13, r25	; 0x0d
    4498:	ae 87       	std	Y+14, r26	; 0x0e
    449a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    449c:	6c 85       	ldd	r22, Y+12	; 0x0c
    449e:	7d 85       	ldd	r23, Y+13	; 0x0d
    44a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    44a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    44a4:	2d ec       	ldi	r18, 0xCD	; 205
    44a6:	3c ec       	ldi	r19, 0xCC	; 204
    44a8:	4c e2       	ldi	r20, 0x2C	; 44
    44aa:	55 e4       	ldi	r21, 0x45	; 69
    44ac:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    44b0:	dc 01       	movw	r26, r24
    44b2:	cb 01       	movw	r24, r22
    44b4:	88 87       	std	Y+8, r24	; 0x08
    44b6:	99 87       	std	Y+9, r25	; 0x09
    44b8:	aa 87       	std	Y+10, r26	; 0x0a
    44ba:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    44bc:	68 85       	ldd	r22, Y+8	; 0x08
    44be:	79 85       	ldd	r23, Y+9	; 0x09
    44c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    44c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    44c4:	20 e0       	ldi	r18, 0x00	; 0
    44c6:	30 e0       	ldi	r19, 0x00	; 0
    44c8:	40 e8       	ldi	r20, 0x80	; 128
    44ca:	5f e3       	ldi	r21, 0x3F	; 63
    44cc:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    44d0:	88 23       	and	r24, r24
    44d2:	2c f4       	brge	.+10     	; 0x44de <LCDBusyLoop+0xe3c>
		__ticks = 1;
    44d4:	81 e0       	ldi	r24, 0x01	; 1
    44d6:	90 e0       	ldi	r25, 0x00	; 0
    44d8:	9f 83       	std	Y+7, r25	; 0x07
    44da:	8e 83       	std	Y+6, r24	; 0x06
    44dc:	3f c0       	rjmp	.+126    	; 0x455c <LCDBusyLoop+0xeba>
	else if (__tmp > 65535)
    44de:	68 85       	ldd	r22, Y+8	; 0x08
    44e0:	79 85       	ldd	r23, Y+9	; 0x09
    44e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    44e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    44e6:	20 e0       	ldi	r18, 0x00	; 0
    44e8:	3f ef       	ldi	r19, 0xFF	; 255
    44ea:	4f e7       	ldi	r20, 0x7F	; 127
    44ec:	57 e4       	ldi	r21, 0x47	; 71
    44ee:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    44f2:	18 16       	cp	r1, r24
    44f4:	4c f5       	brge	.+82     	; 0x4548 <LCDBusyLoop+0xea6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44f6:	6c 85       	ldd	r22, Y+12	; 0x0c
    44f8:	7d 85       	ldd	r23, Y+13	; 0x0d
    44fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    44fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    44fe:	20 e0       	ldi	r18, 0x00	; 0
    4500:	30 e0       	ldi	r19, 0x00	; 0
    4502:	40 e2       	ldi	r20, 0x20	; 32
    4504:	51 e4       	ldi	r21, 0x41	; 65
    4506:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    450a:	dc 01       	movw	r26, r24
    450c:	cb 01       	movw	r24, r22
    450e:	bc 01       	movw	r22, r24
    4510:	cd 01       	movw	r24, r26
    4512:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    4516:	dc 01       	movw	r26, r24
    4518:	cb 01       	movw	r24, r22
    451a:	9f 83       	std	Y+7, r25	; 0x07
    451c:	8e 83       	std	Y+6, r24	; 0x06
    451e:	0f c0       	rjmp	.+30     	; 0x453e <LCDBusyLoop+0xe9c>
    4520:	84 e1       	ldi	r24, 0x14	; 20
    4522:	91 e0       	ldi	r25, 0x01	; 1
    4524:	9d 83       	std	Y+5, r25	; 0x05
    4526:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4528:	8c 81       	ldd	r24, Y+4	; 0x04
    452a:	9d 81       	ldd	r25, Y+5	; 0x05
    452c:	01 97       	sbiw	r24, 0x01	; 1
    452e:	f1 f7       	brne	.-4      	; 0x452c <LCDBusyLoop+0xe8a>
    4530:	9d 83       	std	Y+5, r25	; 0x05
    4532:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4534:	8e 81       	ldd	r24, Y+6	; 0x06
    4536:	9f 81       	ldd	r25, Y+7	; 0x07
    4538:	01 97       	sbiw	r24, 0x01	; 1
    453a:	9f 83       	std	Y+7, r25	; 0x07
    453c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    453e:	8e 81       	ldd	r24, Y+6	; 0x06
    4540:	9f 81       	ldd	r25, Y+7	; 0x07
    4542:	00 97       	sbiw	r24, 0x00	; 0
    4544:	69 f7       	brne	.-38     	; 0x4520 <LCDBusyLoop+0xe7e>
    4546:	24 c0       	rjmp	.+72     	; 0x4590 <LCDBusyLoop+0xeee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4548:	68 85       	ldd	r22, Y+8	; 0x08
    454a:	79 85       	ldd	r23, Y+9	; 0x09
    454c:	8a 85       	ldd	r24, Y+10	; 0x0a
    454e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4550:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    4554:	dc 01       	movw	r26, r24
    4556:	cb 01       	movw	r24, r22
    4558:	9f 83       	std	Y+7, r25	; 0x07
    455a:	8e 83       	std	Y+6, r24	; 0x06
    455c:	8e 81       	ldd	r24, Y+6	; 0x06
    455e:	9f 81       	ldd	r25, Y+7	; 0x07
    4560:	9b 83       	std	Y+3, r25	; 0x03
    4562:	8a 83       	std	Y+2, r24	; 0x02
    4564:	8a 81       	ldd	r24, Y+2	; 0x02
    4566:	9b 81       	ldd	r25, Y+3	; 0x03
    4568:	01 97       	sbiw	r24, 0x01	; 1
    456a:	f1 f7       	brne	.-4      	; 0x4568 <LCDBusyLoop+0xec6>
    456c:	9b 83       	std	Y+3, r25	; 0x03
    456e:	8a 83       	std	Y+2, r24	; 0x02
    4570:	0f c0       	rjmp	.+30     	; 0x4590 <LCDBusyLoop+0xeee>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4572:	69 89       	ldd	r22, Y+17	; 0x11
    4574:	7a 89       	ldd	r23, Y+18	; 0x12
    4576:	8b 89       	ldd	r24, Y+19	; 0x13
    4578:	9c 89       	ldd	r25, Y+20	; 0x14
    457a:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    457e:	dc 01       	movw	r26, r24
    4580:	cb 01       	movw	r24, r22
    4582:	88 8b       	std	Y+16, r24	; 0x10
    4584:	88 89       	ldd	r24, Y+16	; 0x10
    4586:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4588:	89 81       	ldd	r24, Y+1	; 0x01
    458a:	8a 95       	dec	r24
    458c:	f1 f7       	brne	.-4      	; 0x458a <LCDBusyLoop+0xee8>
    458e:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);	//tEL
	}while(busy);
    4590:	fe 01       	movw	r30, r28
    4592:	e5 55       	subi	r30, 0x55	; 85
    4594:	ff 4f       	sbci	r31, 0xFF	; 255
    4596:	80 81       	ld	r24, Z
    4598:	88 23       	and	r24, r24
    459a:	09 f0       	breq	.+2      	; 0x459e <LCDBusyLoop+0xefc>
    459c:	d1 c9       	rjmp	.-3166   	; 0x3940 <LCDBusyLoop+0x29e>

	CLEAR_RW();		//write mode
    459e:	a5 e3       	ldi	r26, 0x35	; 53
    45a0:	b0 e0       	ldi	r27, 0x00	; 0
    45a2:	e5 e3       	ldi	r30, 0x35	; 53
    45a4:	f0 e0       	ldi	r31, 0x00	; 0
    45a6:	80 81       	ld	r24, Z
    45a8:	8f 7d       	andi	r24, 0xDF	; 223
    45aa:	8c 93       	st	X, r24
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
    45ac:	a4 e3       	ldi	r26, 0x34	; 52
    45ae:	b0 e0       	ldi	r27, 0x00	; 0
    45b0:	e4 e3       	ldi	r30, 0x34	; 52
    45b2:	f0 e0       	ldi	r31, 0x00	; 0
    45b4:	80 81       	ld	r24, Z
    45b6:	8f 60       	ori	r24, 0x0F	; 15
    45b8:	8c 93       	st	X, r24

}
    45ba:	c5 55       	subi	r28, 0x55	; 85
    45bc:	df 4f       	sbci	r29, 0xFF	; 255
    45be:	0f b6       	in	r0, 0x3f	; 63
    45c0:	f8 94       	cli
    45c2:	de bf       	out	0x3e, r29	; 62
    45c4:	0f be       	out	0x3f, r0	; 63
    45c6:	cd bf       	out	0x3d, r28	; 61
    45c8:	cf 91       	pop	r28
    45ca:	df 91       	pop	r29
    45cc:	1f 91       	pop	r17
    45ce:	0f 91       	pop	r16
    45d0:	08 95       	ret

000045d2 <InitLCD>:

void InitLCD(uint8_t style)
{
    45d2:	0f 93       	push	r16
    45d4:	1f 93       	push	r17
    45d6:	df 93       	push	r29
    45d8:	cf 93       	push	r28
    45da:	cd b7       	in	r28, 0x3d	; 61
    45dc:	de b7       	in	r29, 0x3e	; 62
    45de:	c7 55       	subi	r28, 0x57	; 87
    45e0:	d0 40       	sbci	r29, 0x00	; 0
    45e2:	0f b6       	in	r0, 0x3f	; 63
    45e4:	f8 94       	cli
    45e6:	de bf       	out	0x3e, r29	; 62
    45e8:	0f be       	out	0x3f, r0	; 63
    45ea:	cd bf       	out	0x3d, r28	; 61
    45ec:	fe 01       	movw	r30, r28
    45ee:	e9 5a       	subi	r30, 0xA9	; 169
    45f0:	ff 4f       	sbci	r31, 0xFF	; 255
    45f2:	80 83       	st	Z, r24
    45f4:	fe 01       	movw	r30, r28
    45f6:	ed 5a       	subi	r30, 0xAD	; 173
    45f8:	ff 4f       	sbci	r31, 0xFF	; 255
    45fa:	80 e0       	ldi	r24, 0x00	; 0
    45fc:	90 e0       	ldi	r25, 0x00	; 0
    45fe:	a0 ef       	ldi	r26, 0xF0	; 240
    4600:	b1 e4       	ldi	r27, 0x41	; 65
    4602:	80 83       	st	Z, r24
    4604:	91 83       	std	Z+1, r25	; 0x01
    4606:	a2 83       	std	Z+2, r26	; 0x02
    4608:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    460a:	8e 01       	movw	r16, r28
    460c:	01 5b       	subi	r16, 0xB1	; 177
    460e:	1f 4f       	sbci	r17, 0xFF	; 255
    4610:	fe 01       	movw	r30, r28
    4612:	ed 5a       	subi	r30, 0xAD	; 173
    4614:	ff 4f       	sbci	r31, 0xFF	; 255
    4616:	60 81       	ld	r22, Z
    4618:	71 81       	ldd	r23, Z+1	; 0x01
    461a:	82 81       	ldd	r24, Z+2	; 0x02
    461c:	93 81       	ldd	r25, Z+3	; 0x03
    461e:	2d ec       	ldi	r18, 0xCD	; 205
    4620:	3c ec       	ldi	r19, 0xCC	; 204
    4622:	4c e2       	ldi	r20, 0x2C	; 44
    4624:	55 e4       	ldi	r21, 0x45	; 69
    4626:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    462a:	dc 01       	movw	r26, r24
    462c:	cb 01       	movw	r24, r22
    462e:	f8 01       	movw	r30, r16
    4630:	80 83       	st	Z, r24
    4632:	91 83       	std	Z+1, r25	; 0x01
    4634:	a2 83       	std	Z+2, r26	; 0x02
    4636:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4638:	fe 01       	movw	r30, r28
    463a:	e1 5b       	subi	r30, 0xB1	; 177
    463c:	ff 4f       	sbci	r31, 0xFF	; 255
    463e:	60 81       	ld	r22, Z
    4640:	71 81       	ldd	r23, Z+1	; 0x01
    4642:	82 81       	ldd	r24, Z+2	; 0x02
    4644:	93 81       	ldd	r25, Z+3	; 0x03
    4646:	20 e0       	ldi	r18, 0x00	; 0
    4648:	30 e0       	ldi	r19, 0x00	; 0
    464a:	40 e8       	ldi	r20, 0x80	; 128
    464c:	5f e3       	ldi	r21, 0x3F	; 63
    464e:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    4652:	88 23       	and	r24, r24
    4654:	44 f4       	brge	.+16     	; 0x4666 <InitLCD+0x94>
		__ticks = 1;
    4656:	fe 01       	movw	r30, r28
    4658:	e3 5b       	subi	r30, 0xB3	; 179
    465a:	ff 4f       	sbci	r31, 0xFF	; 255
    465c:	81 e0       	ldi	r24, 0x01	; 1
    465e:	90 e0       	ldi	r25, 0x00	; 0
    4660:	91 83       	std	Z+1, r25	; 0x01
    4662:	80 83       	st	Z, r24
    4664:	64 c0       	rjmp	.+200    	; 0x472e <InitLCD+0x15c>
	else if (__tmp > 65535)
    4666:	fe 01       	movw	r30, r28
    4668:	e1 5b       	subi	r30, 0xB1	; 177
    466a:	ff 4f       	sbci	r31, 0xFF	; 255
    466c:	60 81       	ld	r22, Z
    466e:	71 81       	ldd	r23, Z+1	; 0x01
    4670:	82 81       	ldd	r24, Z+2	; 0x02
    4672:	93 81       	ldd	r25, Z+3	; 0x03
    4674:	20 e0       	ldi	r18, 0x00	; 0
    4676:	3f ef       	ldi	r19, 0xFF	; 255
    4678:	4f e7       	ldi	r20, 0x7F	; 127
    467a:	57 e4       	ldi	r21, 0x47	; 71
    467c:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    4680:	18 16       	cp	r1, r24
    4682:	0c f0       	brlt	.+2      	; 0x4686 <InitLCD+0xb4>
    4684:	43 c0       	rjmp	.+134    	; 0x470c <InitLCD+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4686:	fe 01       	movw	r30, r28
    4688:	ed 5a       	subi	r30, 0xAD	; 173
    468a:	ff 4f       	sbci	r31, 0xFF	; 255
    468c:	60 81       	ld	r22, Z
    468e:	71 81       	ldd	r23, Z+1	; 0x01
    4690:	82 81       	ldd	r24, Z+2	; 0x02
    4692:	93 81       	ldd	r25, Z+3	; 0x03
    4694:	20 e0       	ldi	r18, 0x00	; 0
    4696:	30 e0       	ldi	r19, 0x00	; 0
    4698:	40 e2       	ldi	r20, 0x20	; 32
    469a:	51 e4       	ldi	r21, 0x41	; 65
    469c:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    46a0:	dc 01       	movw	r26, r24
    46a2:	cb 01       	movw	r24, r22
    46a4:	8e 01       	movw	r16, r28
    46a6:	03 5b       	subi	r16, 0xB3	; 179
    46a8:	1f 4f       	sbci	r17, 0xFF	; 255
    46aa:	bc 01       	movw	r22, r24
    46ac:	cd 01       	movw	r24, r26
    46ae:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    46b2:	dc 01       	movw	r26, r24
    46b4:	cb 01       	movw	r24, r22
    46b6:	f8 01       	movw	r30, r16
    46b8:	91 83       	std	Z+1, r25	; 0x01
    46ba:	80 83       	st	Z, r24
    46bc:	1f c0       	rjmp	.+62     	; 0x46fc <InitLCD+0x12a>
    46be:	fe 01       	movw	r30, r28
    46c0:	e5 5b       	subi	r30, 0xB5	; 181
    46c2:	ff 4f       	sbci	r31, 0xFF	; 255
    46c4:	84 e1       	ldi	r24, 0x14	; 20
    46c6:	91 e0       	ldi	r25, 0x01	; 1
    46c8:	91 83       	std	Z+1, r25	; 0x01
    46ca:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    46cc:	fe 01       	movw	r30, r28
    46ce:	e5 5b       	subi	r30, 0xB5	; 181
    46d0:	ff 4f       	sbci	r31, 0xFF	; 255
    46d2:	80 81       	ld	r24, Z
    46d4:	91 81       	ldd	r25, Z+1	; 0x01
    46d6:	01 97       	sbiw	r24, 0x01	; 1
    46d8:	f1 f7       	brne	.-4      	; 0x46d6 <InitLCD+0x104>
    46da:	fe 01       	movw	r30, r28
    46dc:	e5 5b       	subi	r30, 0xB5	; 181
    46de:	ff 4f       	sbci	r31, 0xFF	; 255
    46e0:	91 83       	std	Z+1, r25	; 0x01
    46e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46e4:	de 01       	movw	r26, r28
    46e6:	a3 5b       	subi	r26, 0xB3	; 179
    46e8:	bf 4f       	sbci	r27, 0xFF	; 255
    46ea:	fe 01       	movw	r30, r28
    46ec:	e3 5b       	subi	r30, 0xB3	; 179
    46ee:	ff 4f       	sbci	r31, 0xFF	; 255
    46f0:	80 81       	ld	r24, Z
    46f2:	91 81       	ldd	r25, Z+1	; 0x01
    46f4:	01 97       	sbiw	r24, 0x01	; 1
    46f6:	11 96       	adiw	r26, 0x01	; 1
    46f8:	9c 93       	st	X, r25
    46fa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46fc:	fe 01       	movw	r30, r28
    46fe:	e3 5b       	subi	r30, 0xB3	; 179
    4700:	ff 4f       	sbci	r31, 0xFF	; 255
    4702:	80 81       	ld	r24, Z
    4704:	91 81       	ldd	r25, Z+1	; 0x01
    4706:	00 97       	sbiw	r24, 0x00	; 0
    4708:	d1 f6       	brne	.-76     	; 0x46be <InitLCD+0xec>
    470a:	27 c0       	rjmp	.+78     	; 0x475a <InitLCD+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    470c:	8e 01       	movw	r16, r28
    470e:	03 5b       	subi	r16, 0xB3	; 179
    4710:	1f 4f       	sbci	r17, 0xFF	; 255
    4712:	fe 01       	movw	r30, r28
    4714:	e1 5b       	subi	r30, 0xB1	; 177
    4716:	ff 4f       	sbci	r31, 0xFF	; 255
    4718:	60 81       	ld	r22, Z
    471a:	71 81       	ldd	r23, Z+1	; 0x01
    471c:	82 81       	ldd	r24, Z+2	; 0x02
    471e:	93 81       	ldd	r25, Z+3	; 0x03
    4720:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    4724:	dc 01       	movw	r26, r24
    4726:	cb 01       	movw	r24, r22
    4728:	f8 01       	movw	r30, r16
    472a:	91 83       	std	Z+1, r25	; 0x01
    472c:	80 83       	st	Z, r24
    472e:	de 01       	movw	r26, r28
    4730:	a7 5b       	subi	r26, 0xB7	; 183
    4732:	bf 4f       	sbci	r27, 0xFF	; 255
    4734:	fe 01       	movw	r30, r28
    4736:	e3 5b       	subi	r30, 0xB3	; 179
    4738:	ff 4f       	sbci	r31, 0xFF	; 255
    473a:	80 81       	ld	r24, Z
    473c:	91 81       	ldd	r25, Z+1	; 0x01
    473e:	8d 93       	st	X+, r24
    4740:	9c 93       	st	X, r25
    4742:	fe 01       	movw	r30, r28
    4744:	e7 5b       	subi	r30, 0xB7	; 183
    4746:	ff 4f       	sbci	r31, 0xFF	; 255
    4748:	80 81       	ld	r24, Z
    474a:	91 81       	ldd	r25, Z+1	; 0x01
    474c:	01 97       	sbiw	r24, 0x01	; 1
    474e:	f1 f7       	brne	.-4      	; 0x474c <InitLCD+0x17a>
    4750:	fe 01       	movw	r30, r28
    4752:	e7 5b       	subi	r30, 0xB7	; 183
    4754:	ff 4f       	sbci	r31, 0xFF	; 255
    4756:	91 83       	std	Z+1, r25	; 0x01
    4758:	80 83       	st	Z, r24
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
    475a:	a4 e3       	ldi	r26, 0x34	; 52
    475c:	b0 e0       	ldi	r27, 0x00	; 0
    475e:	e4 e3       	ldi	r30, 0x34	; 52
    4760:	f0 e0       	ldi	r31, 0x00	; 0
    4762:	80 81       	ld	r24, Z
    4764:	8f 60       	ori	r24, 0x0F	; 15
    4766:	8c 93       	st	X, r24
	LCD_E_DDR|=(1<<LCD_E_POS);
    4768:	a4 e3       	ldi	r26, 0x34	; 52
    476a:	b0 e0       	ldi	r27, 0x00	; 0
    476c:	e4 e3       	ldi	r30, 0x34	; 52
    476e:	f0 e0       	ldi	r31, 0x00	; 0
    4770:	80 81       	ld	r24, Z
    4772:	80 68       	ori	r24, 0x80	; 128
    4774:	8c 93       	st	X, r24
	LCD_RS_DDR|=(1<<LCD_RS_POS);
    4776:	a4 e3       	ldi	r26, 0x34	; 52
    4778:	b0 e0       	ldi	r27, 0x00	; 0
    477a:	e4 e3       	ldi	r30, 0x34	; 52
    477c:	f0 e0       	ldi	r31, 0x00	; 0
    477e:	80 81       	ld	r24, Z
    4780:	80 64       	ori	r24, 0x40	; 64
    4782:	8c 93       	st	X, r24
	LCD_RW_DDR|=(1<<LCD_RW_POS);
    4784:	a4 e3       	ldi	r26, 0x34	; 52
    4786:	b0 e0       	ldi	r27, 0x00	; 0
    4788:	e4 e3       	ldi	r30, 0x34	; 52
    478a:	f0 e0       	ldi	r31, 0x00	; 0
    478c:	80 81       	ld	r24, Z
    478e:	80 62       	ori	r24, 0x20	; 32
    4790:	8c 93       	st	X, r24

	LCD_DATA_PORT&=0XF0;
    4792:	a5 e3       	ldi	r26, 0x35	; 53
    4794:	b0 e0       	ldi	r27, 0x00	; 0
    4796:	e5 e3       	ldi	r30, 0x35	; 53
    4798:	f0 e0       	ldi	r31, 0x00	; 0
    479a:	80 81       	ld	r24, Z
    479c:	80 7f       	andi	r24, 0xF0	; 240
    479e:	8c 93       	st	X, r24
	CLEAR_E();
    47a0:	a5 e3       	ldi	r26, 0x35	; 53
    47a2:	b0 e0       	ldi	r27, 0x00	; 0
    47a4:	e5 e3       	ldi	r30, 0x35	; 53
    47a6:	f0 e0       	ldi	r31, 0x00	; 0
    47a8:	80 81       	ld	r24, Z
    47aa:	8f 77       	andi	r24, 0x7F	; 127
    47ac:	8c 93       	st	X, r24
	CLEAR_RW();
    47ae:	a5 e3       	ldi	r26, 0x35	; 53
    47b0:	b0 e0       	ldi	r27, 0x00	; 0
    47b2:	e5 e3       	ldi	r30, 0x35	; 53
    47b4:	f0 e0       	ldi	r31, 0x00	; 0
    47b6:	80 81       	ld	r24, Z
    47b8:	8f 7d       	andi	r24, 0xDF	; 223
    47ba:	8c 93       	st	X, r24
	CLEAR_RS();
    47bc:	a5 e3       	ldi	r26, 0x35	; 53
    47be:	b0 e0       	ldi	r27, 0x00	; 0
    47c0:	e5 e3       	ldi	r30, 0x35	; 53
    47c2:	f0 e0       	ldi	r31, 0x00	; 0
    47c4:	80 81       	ld	r24, Z
    47c6:	8f 7b       	andi	r24, 0xBF	; 191
    47c8:	8c 93       	st	X, r24
    47ca:	fe 01       	movw	r30, r28
    47cc:	eb 5b       	subi	r30, 0xBB	; 187
    47ce:	ff 4f       	sbci	r31, 0xFF	; 255
    47d0:	8a e9       	ldi	r24, 0x9A	; 154
    47d2:	99 e9       	ldi	r25, 0x99	; 153
    47d4:	a9 e9       	ldi	r26, 0x99	; 153
    47d6:	be e3       	ldi	r27, 0x3E	; 62
    47d8:	80 83       	st	Z, r24
    47da:	91 83       	std	Z+1, r25	; 0x01
    47dc:	a2 83       	std	Z+2, r26	; 0x02
    47de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    47e0:	8e 01       	movw	r16, r28
    47e2:	0f 5b       	subi	r16, 0xBF	; 191
    47e4:	1f 4f       	sbci	r17, 0xFF	; 255
    47e6:	fe 01       	movw	r30, r28
    47e8:	eb 5b       	subi	r30, 0xBB	; 187
    47ea:	ff 4f       	sbci	r31, 0xFF	; 255
    47ec:	60 81       	ld	r22, Z
    47ee:	71 81       	ldd	r23, Z+1	; 0x01
    47f0:	82 81       	ldd	r24, Z+2	; 0x02
    47f2:	93 81       	ldd	r25, Z+3	; 0x03
    47f4:	2a ef       	ldi	r18, 0xFA	; 250
    47f6:	3d ee       	ldi	r19, 0xED	; 237
    47f8:	4b e6       	ldi	r20, 0x6B	; 107
    47fa:	50 e4       	ldi	r21, 0x40	; 64
    47fc:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    4800:	dc 01       	movw	r26, r24
    4802:	cb 01       	movw	r24, r22
    4804:	f8 01       	movw	r30, r16
    4806:	80 83       	st	Z, r24
    4808:	91 83       	std	Z+1, r25	; 0x01
    480a:	a2 83       	std	Z+2, r26	; 0x02
    480c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    480e:	fe 01       	movw	r30, r28
    4810:	ef 5b       	subi	r30, 0xBF	; 191
    4812:	ff 4f       	sbci	r31, 0xFF	; 255
    4814:	60 81       	ld	r22, Z
    4816:	71 81       	ldd	r23, Z+1	; 0x01
    4818:	82 81       	ldd	r24, Z+2	; 0x02
    481a:	93 81       	ldd	r25, Z+3	; 0x03
    481c:	20 e0       	ldi	r18, 0x00	; 0
    481e:	30 e0       	ldi	r19, 0x00	; 0
    4820:	40 e8       	ldi	r20, 0x80	; 128
    4822:	5f e3       	ldi	r21, 0x3F	; 63
    4824:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    4828:	88 23       	and	r24, r24
    482a:	34 f4       	brge	.+12     	; 0x4838 <InitLCD+0x266>
		__ticks = 1;
    482c:	81 e0       	ldi	r24, 0x01	; 1
    482e:	fe 01       	movw	r30, r28
    4830:	e0 5c       	subi	r30, 0xC0	; 192
    4832:	ff 4f       	sbci	r31, 0xFF	; 255
    4834:	80 83       	st	Z, r24
    4836:	9d c0       	rjmp	.+314    	; 0x4972 <InitLCD+0x3a0>
	else if (__tmp > 255)
    4838:	fe 01       	movw	r30, r28
    483a:	ef 5b       	subi	r30, 0xBF	; 191
    483c:	ff 4f       	sbci	r31, 0xFF	; 255
    483e:	60 81       	ld	r22, Z
    4840:	71 81       	ldd	r23, Z+1	; 0x01
    4842:	82 81       	ldd	r24, Z+2	; 0x02
    4844:	93 81       	ldd	r25, Z+3	; 0x03
    4846:	20 e0       	ldi	r18, 0x00	; 0
    4848:	30 e0       	ldi	r19, 0x00	; 0
    484a:	4f e7       	ldi	r20, 0x7F	; 127
    484c:	53 e4       	ldi	r21, 0x43	; 67
    484e:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    4852:	18 16       	cp	r1, r24
    4854:	0c f0       	brlt	.+2      	; 0x4858 <InitLCD+0x286>
    4856:	7e c0       	rjmp	.+252    	; 0x4954 <InitLCD+0x382>
	{
		_delay_ms(__us / 1000.0);
    4858:	fe 01       	movw	r30, r28
    485a:	eb 5b       	subi	r30, 0xBB	; 187
    485c:	ff 4f       	sbci	r31, 0xFF	; 255
    485e:	60 81       	ld	r22, Z
    4860:	71 81       	ldd	r23, Z+1	; 0x01
    4862:	82 81       	ldd	r24, Z+2	; 0x02
    4864:	93 81       	ldd	r25, Z+3	; 0x03
    4866:	20 e0       	ldi	r18, 0x00	; 0
    4868:	30 e0       	ldi	r19, 0x00	; 0
    486a:	4a e7       	ldi	r20, 0x7A	; 122
    486c:	54 e4       	ldi	r21, 0x44	; 68
    486e:	0e 94 a4 3b 	call	0x7748	; 0x7748 <__divsf3>
    4872:	dc 01       	movw	r26, r24
    4874:	cb 01       	movw	r24, r22
    4876:	8c af       	std	Y+60, r24	; 0x3c
    4878:	9d af       	std	Y+61, r25	; 0x3d
    487a:	ae af       	std	Y+62, r26	; 0x3e
    487c:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    487e:	6c ad       	ldd	r22, Y+60	; 0x3c
    4880:	7d ad       	ldd	r23, Y+61	; 0x3d
    4882:	8e ad       	ldd	r24, Y+62	; 0x3e
    4884:	9f ad       	ldd	r25, Y+63	; 0x3f
    4886:	2d ec       	ldi	r18, 0xCD	; 205
    4888:	3c ec       	ldi	r19, 0xCC	; 204
    488a:	4c e2       	ldi	r20, 0x2C	; 44
    488c:	55 e4       	ldi	r21, 0x45	; 69
    488e:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    4892:	dc 01       	movw	r26, r24
    4894:	cb 01       	movw	r24, r22
    4896:	88 af       	std	Y+56, r24	; 0x38
    4898:	99 af       	std	Y+57, r25	; 0x39
    489a:	aa af       	std	Y+58, r26	; 0x3a
    489c:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    489e:	68 ad       	ldd	r22, Y+56	; 0x38
    48a0:	79 ad       	ldd	r23, Y+57	; 0x39
    48a2:	8a ad       	ldd	r24, Y+58	; 0x3a
    48a4:	9b ad       	ldd	r25, Y+59	; 0x3b
    48a6:	20 e0       	ldi	r18, 0x00	; 0
    48a8:	30 e0       	ldi	r19, 0x00	; 0
    48aa:	40 e8       	ldi	r20, 0x80	; 128
    48ac:	5f e3       	ldi	r21, 0x3F	; 63
    48ae:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    48b2:	88 23       	and	r24, r24
    48b4:	2c f4       	brge	.+10     	; 0x48c0 <InitLCD+0x2ee>
		__ticks = 1;
    48b6:	81 e0       	ldi	r24, 0x01	; 1
    48b8:	90 e0       	ldi	r25, 0x00	; 0
    48ba:	9f ab       	std	Y+55, r25	; 0x37
    48bc:	8e ab       	std	Y+54, r24	; 0x36
    48be:	3f c0       	rjmp	.+126    	; 0x493e <InitLCD+0x36c>
	else if (__tmp > 65535)
    48c0:	68 ad       	ldd	r22, Y+56	; 0x38
    48c2:	79 ad       	ldd	r23, Y+57	; 0x39
    48c4:	8a ad       	ldd	r24, Y+58	; 0x3a
    48c6:	9b ad       	ldd	r25, Y+59	; 0x3b
    48c8:	20 e0       	ldi	r18, 0x00	; 0
    48ca:	3f ef       	ldi	r19, 0xFF	; 255
    48cc:	4f e7       	ldi	r20, 0x7F	; 127
    48ce:	57 e4       	ldi	r21, 0x47	; 71
    48d0:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    48d4:	18 16       	cp	r1, r24
    48d6:	4c f5       	brge	.+82     	; 0x492a <InitLCD+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48d8:	6c ad       	ldd	r22, Y+60	; 0x3c
    48da:	7d ad       	ldd	r23, Y+61	; 0x3d
    48dc:	8e ad       	ldd	r24, Y+62	; 0x3e
    48de:	9f ad       	ldd	r25, Y+63	; 0x3f
    48e0:	20 e0       	ldi	r18, 0x00	; 0
    48e2:	30 e0       	ldi	r19, 0x00	; 0
    48e4:	40 e2       	ldi	r20, 0x20	; 32
    48e6:	51 e4       	ldi	r21, 0x41	; 65
    48e8:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    48ec:	dc 01       	movw	r26, r24
    48ee:	cb 01       	movw	r24, r22
    48f0:	bc 01       	movw	r22, r24
    48f2:	cd 01       	movw	r24, r26
    48f4:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    48f8:	dc 01       	movw	r26, r24
    48fa:	cb 01       	movw	r24, r22
    48fc:	9f ab       	std	Y+55, r25	; 0x37
    48fe:	8e ab       	std	Y+54, r24	; 0x36
    4900:	0f c0       	rjmp	.+30     	; 0x4920 <InitLCD+0x34e>
    4902:	84 e1       	ldi	r24, 0x14	; 20
    4904:	91 e0       	ldi	r25, 0x01	; 1
    4906:	9d ab       	std	Y+53, r25	; 0x35
    4908:	8c ab       	std	Y+52, r24	; 0x34
    490a:	8c a9       	ldd	r24, Y+52	; 0x34
    490c:	9d a9       	ldd	r25, Y+53	; 0x35
    490e:	01 97       	sbiw	r24, 0x01	; 1
    4910:	f1 f7       	brne	.-4      	; 0x490e <InitLCD+0x33c>
    4912:	9d ab       	std	Y+53, r25	; 0x35
    4914:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4916:	8e a9       	ldd	r24, Y+54	; 0x36
    4918:	9f a9       	ldd	r25, Y+55	; 0x37
    491a:	01 97       	sbiw	r24, 0x01	; 1
    491c:	9f ab       	std	Y+55, r25	; 0x37
    491e:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4920:	8e a9       	ldd	r24, Y+54	; 0x36
    4922:	9f a9       	ldd	r25, Y+55	; 0x37
    4924:	00 97       	sbiw	r24, 0x00	; 0
    4926:	69 f7       	brne	.-38     	; 0x4902 <InitLCD+0x330>
    4928:	2d c0       	rjmp	.+90     	; 0x4984 <InitLCD+0x3b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    492a:	68 ad       	ldd	r22, Y+56	; 0x38
    492c:	79 ad       	ldd	r23, Y+57	; 0x39
    492e:	8a ad       	ldd	r24, Y+58	; 0x3a
    4930:	9b ad       	ldd	r25, Y+59	; 0x3b
    4932:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    4936:	dc 01       	movw	r26, r24
    4938:	cb 01       	movw	r24, r22
    493a:	9f ab       	std	Y+55, r25	; 0x37
    493c:	8e ab       	std	Y+54, r24	; 0x36
    493e:	8e a9       	ldd	r24, Y+54	; 0x36
    4940:	9f a9       	ldd	r25, Y+55	; 0x37
    4942:	9b ab       	std	Y+51, r25	; 0x33
    4944:	8a ab       	std	Y+50, r24	; 0x32
    4946:	8a a9       	ldd	r24, Y+50	; 0x32
    4948:	9b a9       	ldd	r25, Y+51	; 0x33
    494a:	01 97       	sbiw	r24, 0x01	; 1
    494c:	f1 f7       	brne	.-4      	; 0x494a <InitLCD+0x378>
    494e:	9b ab       	std	Y+51, r25	; 0x33
    4950:	8a ab       	std	Y+50, r24	; 0x32
    4952:	18 c0       	rjmp	.+48     	; 0x4984 <InitLCD+0x3b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4954:	fe 01       	movw	r30, r28
    4956:	ef 5b       	subi	r30, 0xBF	; 191
    4958:	ff 4f       	sbci	r31, 0xFF	; 255
    495a:	60 81       	ld	r22, Z
    495c:	71 81       	ldd	r23, Z+1	; 0x01
    495e:	82 81       	ldd	r24, Z+2	; 0x02
    4960:	93 81       	ldd	r25, Z+3	; 0x03
    4962:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    4966:	dc 01       	movw	r26, r24
    4968:	cb 01       	movw	r24, r22
    496a:	fe 01       	movw	r30, r28
    496c:	e0 5c       	subi	r30, 0xC0	; 192
    496e:	ff 4f       	sbci	r31, 0xFF	; 255
    4970:	80 83       	st	Z, r24
    4972:	fe 01       	movw	r30, r28
    4974:	e0 5c       	subi	r30, 0xC0	; 192
    4976:	ff 4f       	sbci	r31, 0xFF	; 255
    4978:	80 81       	ld	r24, Z
    497a:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    497c:	89 a9       	ldd	r24, Y+49	; 0x31
    497e:	8a 95       	dec	r24
    4980:	f1 f7       	brne	.-4      	; 0x497e <InitLCD+0x3ac>
    4982:	89 ab       	std	Y+49, r24	; 0x31

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
    4984:	a5 e3       	ldi	r26, 0x35	; 53
    4986:	b0 e0       	ldi	r27, 0x00	; 0
    4988:	e5 e3       	ldi	r30, 0x35	; 53
    498a:	f0 e0       	ldi	r31, 0x00	; 0
    498c:	80 81       	ld	r24, Z
    498e:	80 68       	ori	r24, 0x80	; 128
    4990:	8c 93       	st	X, r24
	LCD_DATA_PORT|=(0x02); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000 // 0b00000010
    4992:	a5 e3       	ldi	r26, 0x35	; 53
    4994:	b0 e0       	ldi	r27, 0x00	; 0
    4996:	e5 e3       	ldi	r30, 0x35	; 53
    4998:	f0 e0       	ldi	r31, 0x00	; 0
    499a:	80 81       	ld	r24, Z
    499c:	82 60       	ori	r24, 0x02	; 2
    499e:	8c 93       	st	X, r24
    49a0:	80 e0       	ldi	r24, 0x00	; 0
    49a2:	90 e0       	ldi	r25, 0x00	; 0
    49a4:	a0 e8       	ldi	r26, 0x80	; 128
    49a6:	bf e3       	ldi	r27, 0x3F	; 63
    49a8:	8d a7       	std	Y+45, r24	; 0x2d
    49aa:	9e a7       	std	Y+46, r25	; 0x2e
    49ac:	af a7       	std	Y+47, r26	; 0x2f
    49ae:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    49b0:	6d a5       	ldd	r22, Y+45	; 0x2d
    49b2:	7e a5       	ldd	r23, Y+46	; 0x2e
    49b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    49b6:	98 a9       	ldd	r25, Y+48	; 0x30
    49b8:	2a ef       	ldi	r18, 0xFA	; 250
    49ba:	3d ee       	ldi	r19, 0xED	; 237
    49bc:	4b e6       	ldi	r20, 0x6B	; 107
    49be:	50 e4       	ldi	r21, 0x40	; 64
    49c0:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    49c4:	dc 01       	movw	r26, r24
    49c6:	cb 01       	movw	r24, r22
    49c8:	89 a7       	std	Y+41, r24	; 0x29
    49ca:	9a a7       	std	Y+42, r25	; 0x2a
    49cc:	ab a7       	std	Y+43, r26	; 0x2b
    49ce:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    49d0:	69 a5       	ldd	r22, Y+41	; 0x29
    49d2:	7a a5       	ldd	r23, Y+42	; 0x2a
    49d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    49d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    49d8:	20 e0       	ldi	r18, 0x00	; 0
    49da:	30 e0       	ldi	r19, 0x00	; 0
    49dc:	40 e8       	ldi	r20, 0x80	; 128
    49de:	5f e3       	ldi	r21, 0x3F	; 63
    49e0:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    49e4:	88 23       	and	r24, r24
    49e6:	1c f4       	brge	.+6      	; 0x49ee <InitLCD+0x41c>
		__ticks = 1;
    49e8:	81 e0       	ldi	r24, 0x01	; 1
    49ea:	88 a7       	std	Y+40, r24	; 0x28
    49ec:	91 c0       	rjmp	.+290    	; 0x4b10 <InitLCD+0x53e>
	else if (__tmp > 255)
    49ee:	69 a5       	ldd	r22, Y+41	; 0x29
    49f0:	7a a5       	ldd	r23, Y+42	; 0x2a
    49f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    49f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    49f6:	20 e0       	ldi	r18, 0x00	; 0
    49f8:	30 e0       	ldi	r19, 0x00	; 0
    49fa:	4f e7       	ldi	r20, 0x7F	; 127
    49fc:	53 e4       	ldi	r21, 0x43	; 67
    49fe:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    4a02:	18 16       	cp	r1, r24
    4a04:	0c f0       	brlt	.+2      	; 0x4a08 <InitLCD+0x436>
    4a06:	7b c0       	rjmp	.+246    	; 0x4afe <InitLCD+0x52c>
	{
		_delay_ms(__us / 1000.0);
    4a08:	6d a5       	ldd	r22, Y+45	; 0x2d
    4a0a:	7e a5       	ldd	r23, Y+46	; 0x2e
    4a0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a0e:	98 a9       	ldd	r25, Y+48	; 0x30
    4a10:	20 e0       	ldi	r18, 0x00	; 0
    4a12:	30 e0       	ldi	r19, 0x00	; 0
    4a14:	4a e7       	ldi	r20, 0x7A	; 122
    4a16:	54 e4       	ldi	r21, 0x44	; 68
    4a18:	0e 94 a4 3b 	call	0x7748	; 0x7748 <__divsf3>
    4a1c:	dc 01       	movw	r26, r24
    4a1e:	cb 01       	movw	r24, r22
    4a20:	8c a3       	std	Y+36, r24	; 0x24
    4a22:	9d a3       	std	Y+37, r25	; 0x25
    4a24:	ae a3       	std	Y+38, r26	; 0x26
    4a26:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a28:	6c a1       	ldd	r22, Y+36	; 0x24
    4a2a:	7d a1       	ldd	r23, Y+37	; 0x25
    4a2c:	8e a1       	ldd	r24, Y+38	; 0x26
    4a2e:	9f a1       	ldd	r25, Y+39	; 0x27
    4a30:	2d ec       	ldi	r18, 0xCD	; 205
    4a32:	3c ec       	ldi	r19, 0xCC	; 204
    4a34:	4c e2       	ldi	r20, 0x2C	; 44
    4a36:	55 e4       	ldi	r21, 0x45	; 69
    4a38:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    4a3c:	dc 01       	movw	r26, r24
    4a3e:	cb 01       	movw	r24, r22
    4a40:	88 a3       	std	Y+32, r24	; 0x20
    4a42:	99 a3       	std	Y+33, r25	; 0x21
    4a44:	aa a3       	std	Y+34, r26	; 0x22
    4a46:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    4a48:	68 a1       	ldd	r22, Y+32	; 0x20
    4a4a:	79 a1       	ldd	r23, Y+33	; 0x21
    4a4c:	8a a1       	ldd	r24, Y+34	; 0x22
    4a4e:	9b a1       	ldd	r25, Y+35	; 0x23
    4a50:	20 e0       	ldi	r18, 0x00	; 0
    4a52:	30 e0       	ldi	r19, 0x00	; 0
    4a54:	40 e8       	ldi	r20, 0x80	; 128
    4a56:	5f e3       	ldi	r21, 0x3F	; 63
    4a58:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    4a5c:	88 23       	and	r24, r24
    4a5e:	2c f4       	brge	.+10     	; 0x4a6a <InitLCD+0x498>
		__ticks = 1;
    4a60:	81 e0       	ldi	r24, 0x01	; 1
    4a62:	90 e0       	ldi	r25, 0x00	; 0
    4a64:	9f 8f       	std	Y+31, r25	; 0x1f
    4a66:	8e 8f       	std	Y+30, r24	; 0x1e
    4a68:	3f c0       	rjmp	.+126    	; 0x4ae8 <InitLCD+0x516>
	else if (__tmp > 65535)
    4a6a:	68 a1       	ldd	r22, Y+32	; 0x20
    4a6c:	79 a1       	ldd	r23, Y+33	; 0x21
    4a6e:	8a a1       	ldd	r24, Y+34	; 0x22
    4a70:	9b a1       	ldd	r25, Y+35	; 0x23
    4a72:	20 e0       	ldi	r18, 0x00	; 0
    4a74:	3f ef       	ldi	r19, 0xFF	; 255
    4a76:	4f e7       	ldi	r20, 0x7F	; 127
    4a78:	57 e4       	ldi	r21, 0x47	; 71
    4a7a:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    4a7e:	18 16       	cp	r1, r24
    4a80:	4c f5       	brge	.+82     	; 0x4ad4 <InitLCD+0x502>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a82:	6c a1       	ldd	r22, Y+36	; 0x24
    4a84:	7d a1       	ldd	r23, Y+37	; 0x25
    4a86:	8e a1       	ldd	r24, Y+38	; 0x26
    4a88:	9f a1       	ldd	r25, Y+39	; 0x27
    4a8a:	20 e0       	ldi	r18, 0x00	; 0
    4a8c:	30 e0       	ldi	r19, 0x00	; 0
    4a8e:	40 e2       	ldi	r20, 0x20	; 32
    4a90:	51 e4       	ldi	r21, 0x41	; 65
    4a92:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    4a96:	dc 01       	movw	r26, r24
    4a98:	cb 01       	movw	r24, r22
    4a9a:	bc 01       	movw	r22, r24
    4a9c:	cd 01       	movw	r24, r26
    4a9e:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    4aa2:	dc 01       	movw	r26, r24
    4aa4:	cb 01       	movw	r24, r22
    4aa6:	9f 8f       	std	Y+31, r25	; 0x1f
    4aa8:	8e 8f       	std	Y+30, r24	; 0x1e
    4aaa:	0f c0       	rjmp	.+30     	; 0x4aca <InitLCD+0x4f8>
    4aac:	84 e1       	ldi	r24, 0x14	; 20
    4aae:	91 e0       	ldi	r25, 0x01	; 1
    4ab0:	9d 8f       	std	Y+29, r25	; 0x1d
    4ab2:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4ab4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4ab6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4ab8:	01 97       	sbiw	r24, 0x01	; 1
    4aba:	f1 f7       	brne	.-4      	; 0x4ab8 <InitLCD+0x4e6>
    4abc:	9d 8f       	std	Y+29, r25	; 0x1d
    4abe:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ac0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4ac2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4ac4:	01 97       	sbiw	r24, 0x01	; 1
    4ac6:	9f 8f       	std	Y+31, r25	; 0x1f
    4ac8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4acc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4ace:	00 97       	sbiw	r24, 0x00	; 0
    4ad0:	69 f7       	brne	.-38     	; 0x4aac <InitLCD+0x4da>
    4ad2:	24 c0       	rjmp	.+72     	; 0x4b1c <InitLCD+0x54a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ad4:	68 a1       	ldd	r22, Y+32	; 0x20
    4ad6:	79 a1       	ldd	r23, Y+33	; 0x21
    4ad8:	8a a1       	ldd	r24, Y+34	; 0x22
    4ada:	9b a1       	ldd	r25, Y+35	; 0x23
    4adc:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    4ae0:	dc 01       	movw	r26, r24
    4ae2:	cb 01       	movw	r24, r22
    4ae4:	9f 8f       	std	Y+31, r25	; 0x1f
    4ae6:	8e 8f       	std	Y+30, r24	; 0x1e
    4ae8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4aea:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4aec:	9b 8f       	std	Y+27, r25	; 0x1b
    4aee:	8a 8f       	std	Y+26, r24	; 0x1a
    4af0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4af2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4af4:	01 97       	sbiw	r24, 0x01	; 1
    4af6:	f1 f7       	brne	.-4      	; 0x4af4 <InitLCD+0x522>
    4af8:	9b 8f       	std	Y+27, r25	; 0x1b
    4afa:	8a 8f       	std	Y+26, r24	; 0x1a
    4afc:	0f c0       	rjmp	.+30     	; 0x4b1c <InitLCD+0x54a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4afe:	69 a5       	ldd	r22, Y+41	; 0x29
    4b00:	7a a5       	ldd	r23, Y+42	; 0x2a
    4b02:	8b a5       	ldd	r24, Y+43	; 0x2b
    4b04:	9c a5       	ldd	r25, Y+44	; 0x2c
    4b06:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    4b0a:	dc 01       	movw	r26, r24
    4b0c:	cb 01       	movw	r24, r22
    4b0e:	88 a7       	std	Y+40, r24	; 0x28
    4b10:	88 a5       	ldd	r24, Y+40	; 0x28
    4b12:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4b14:	89 8d       	ldd	r24, Y+25	; 0x19
    4b16:	8a 95       	dec	r24
    4b18:	f1 f7       	brne	.-4      	; 0x4b16 <InitLCD+0x544>
    4b1a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	CLEAR_E();
    4b1c:	a5 e3       	ldi	r26, 0x35	; 53
    4b1e:	b0 e0       	ldi	r27, 0x00	; 0
    4b20:	e5 e3       	ldi	r30, 0x35	; 53
    4b22:	f0 e0       	ldi	r31, 0x00	; 0
    4b24:	80 81       	ld	r24, Z
    4b26:	8f 77       	andi	r24, 0x7F	; 127
    4b28:	8c 93       	st	X, r24
    4b2a:	80 e0       	ldi	r24, 0x00	; 0
    4b2c:	90 e0       	ldi	r25, 0x00	; 0
    4b2e:	a0 e8       	ldi	r26, 0x80	; 128
    4b30:	bf e3       	ldi	r27, 0x3F	; 63
    4b32:	8d 8b       	std	Y+21, r24	; 0x15
    4b34:	9e 8b       	std	Y+22, r25	; 0x16
    4b36:	af 8b       	std	Y+23, r26	; 0x17
    4b38:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4b3a:	6d 89       	ldd	r22, Y+21	; 0x15
    4b3c:	7e 89       	ldd	r23, Y+22	; 0x16
    4b3e:	8f 89       	ldd	r24, Y+23	; 0x17
    4b40:	98 8d       	ldd	r25, Y+24	; 0x18
    4b42:	2a ef       	ldi	r18, 0xFA	; 250
    4b44:	3d ee       	ldi	r19, 0xED	; 237
    4b46:	4b e6       	ldi	r20, 0x6B	; 107
    4b48:	50 e4       	ldi	r21, 0x40	; 64
    4b4a:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    4b4e:	dc 01       	movw	r26, r24
    4b50:	cb 01       	movw	r24, r22
    4b52:	89 8b       	std	Y+17, r24	; 0x11
    4b54:	9a 8b       	std	Y+18, r25	; 0x12
    4b56:	ab 8b       	std	Y+19, r26	; 0x13
    4b58:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4b5a:	69 89       	ldd	r22, Y+17	; 0x11
    4b5c:	7a 89       	ldd	r23, Y+18	; 0x12
    4b5e:	8b 89       	ldd	r24, Y+19	; 0x13
    4b60:	9c 89       	ldd	r25, Y+20	; 0x14
    4b62:	20 e0       	ldi	r18, 0x00	; 0
    4b64:	30 e0       	ldi	r19, 0x00	; 0
    4b66:	40 e8       	ldi	r20, 0x80	; 128
    4b68:	5f e3       	ldi	r21, 0x3F	; 63
    4b6a:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    4b6e:	88 23       	and	r24, r24
    4b70:	1c f4       	brge	.+6      	; 0x4b78 <InitLCD+0x5a6>
		__ticks = 1;
    4b72:	81 e0       	ldi	r24, 0x01	; 1
    4b74:	88 8b       	std	Y+16, r24	; 0x10
    4b76:	91 c0       	rjmp	.+290    	; 0x4c9a <InitLCD+0x6c8>
	else if (__tmp > 255)
    4b78:	69 89       	ldd	r22, Y+17	; 0x11
    4b7a:	7a 89       	ldd	r23, Y+18	; 0x12
    4b7c:	8b 89       	ldd	r24, Y+19	; 0x13
    4b7e:	9c 89       	ldd	r25, Y+20	; 0x14
    4b80:	20 e0       	ldi	r18, 0x00	; 0
    4b82:	30 e0       	ldi	r19, 0x00	; 0
    4b84:	4f e7       	ldi	r20, 0x7F	; 127
    4b86:	53 e4       	ldi	r21, 0x43	; 67
    4b88:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    4b8c:	18 16       	cp	r1, r24
    4b8e:	0c f0       	brlt	.+2      	; 0x4b92 <InitLCD+0x5c0>
    4b90:	7b c0       	rjmp	.+246    	; 0x4c88 <InitLCD+0x6b6>
	{
		_delay_ms(__us / 1000.0);
    4b92:	6d 89       	ldd	r22, Y+21	; 0x15
    4b94:	7e 89       	ldd	r23, Y+22	; 0x16
    4b96:	8f 89       	ldd	r24, Y+23	; 0x17
    4b98:	98 8d       	ldd	r25, Y+24	; 0x18
    4b9a:	20 e0       	ldi	r18, 0x00	; 0
    4b9c:	30 e0       	ldi	r19, 0x00	; 0
    4b9e:	4a e7       	ldi	r20, 0x7A	; 122
    4ba0:	54 e4       	ldi	r21, 0x44	; 68
    4ba2:	0e 94 a4 3b 	call	0x7748	; 0x7748 <__divsf3>
    4ba6:	dc 01       	movw	r26, r24
    4ba8:	cb 01       	movw	r24, r22
    4baa:	8c 87       	std	Y+12, r24	; 0x0c
    4bac:	9d 87       	std	Y+13, r25	; 0x0d
    4bae:	ae 87       	std	Y+14, r26	; 0x0e
    4bb0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bb2:	6c 85       	ldd	r22, Y+12	; 0x0c
    4bb4:	7d 85       	ldd	r23, Y+13	; 0x0d
    4bb6:	8e 85       	ldd	r24, Y+14	; 0x0e
    4bb8:	9f 85       	ldd	r25, Y+15	; 0x0f
    4bba:	2d ec       	ldi	r18, 0xCD	; 205
    4bbc:	3c ec       	ldi	r19, 0xCC	; 204
    4bbe:	4c e2       	ldi	r20, 0x2C	; 44
    4bc0:	55 e4       	ldi	r21, 0x45	; 69
    4bc2:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    4bc6:	dc 01       	movw	r26, r24
    4bc8:	cb 01       	movw	r24, r22
    4bca:	88 87       	std	Y+8, r24	; 0x08
    4bcc:	99 87       	std	Y+9, r25	; 0x09
    4bce:	aa 87       	std	Y+10, r26	; 0x0a
    4bd0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4bd2:	68 85       	ldd	r22, Y+8	; 0x08
    4bd4:	79 85       	ldd	r23, Y+9	; 0x09
    4bd6:	8a 85       	ldd	r24, Y+10	; 0x0a
    4bd8:	9b 85       	ldd	r25, Y+11	; 0x0b
    4bda:	20 e0       	ldi	r18, 0x00	; 0
    4bdc:	30 e0       	ldi	r19, 0x00	; 0
    4bde:	40 e8       	ldi	r20, 0x80	; 128
    4be0:	5f e3       	ldi	r21, 0x3F	; 63
    4be2:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    4be6:	88 23       	and	r24, r24
    4be8:	2c f4       	brge	.+10     	; 0x4bf4 <InitLCD+0x622>
		__ticks = 1;
    4bea:	81 e0       	ldi	r24, 0x01	; 1
    4bec:	90 e0       	ldi	r25, 0x00	; 0
    4bee:	9f 83       	std	Y+7, r25	; 0x07
    4bf0:	8e 83       	std	Y+6, r24	; 0x06
    4bf2:	3f c0       	rjmp	.+126    	; 0x4c72 <InitLCD+0x6a0>
	else if (__tmp > 65535)
    4bf4:	68 85       	ldd	r22, Y+8	; 0x08
    4bf6:	79 85       	ldd	r23, Y+9	; 0x09
    4bf8:	8a 85       	ldd	r24, Y+10	; 0x0a
    4bfa:	9b 85       	ldd	r25, Y+11	; 0x0b
    4bfc:	20 e0       	ldi	r18, 0x00	; 0
    4bfe:	3f ef       	ldi	r19, 0xFF	; 255
    4c00:	4f e7       	ldi	r20, 0x7F	; 127
    4c02:	57 e4       	ldi	r21, 0x47	; 71
    4c04:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    4c08:	18 16       	cp	r1, r24
    4c0a:	4c f5       	brge	.+82     	; 0x4c5e <InitLCD+0x68c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c0c:	6c 85       	ldd	r22, Y+12	; 0x0c
    4c0e:	7d 85       	ldd	r23, Y+13	; 0x0d
    4c10:	8e 85       	ldd	r24, Y+14	; 0x0e
    4c12:	9f 85       	ldd	r25, Y+15	; 0x0f
    4c14:	20 e0       	ldi	r18, 0x00	; 0
    4c16:	30 e0       	ldi	r19, 0x00	; 0
    4c18:	40 e2       	ldi	r20, 0x20	; 32
    4c1a:	51 e4       	ldi	r21, 0x41	; 65
    4c1c:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    4c20:	dc 01       	movw	r26, r24
    4c22:	cb 01       	movw	r24, r22
    4c24:	bc 01       	movw	r22, r24
    4c26:	cd 01       	movw	r24, r26
    4c28:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    4c2c:	dc 01       	movw	r26, r24
    4c2e:	cb 01       	movw	r24, r22
    4c30:	9f 83       	std	Y+7, r25	; 0x07
    4c32:	8e 83       	std	Y+6, r24	; 0x06
    4c34:	0f c0       	rjmp	.+30     	; 0x4c54 <InitLCD+0x682>
    4c36:	84 e1       	ldi	r24, 0x14	; 20
    4c38:	91 e0       	ldi	r25, 0x01	; 1
    4c3a:	9d 83       	std	Y+5, r25	; 0x05
    4c3c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4c3e:	8c 81       	ldd	r24, Y+4	; 0x04
    4c40:	9d 81       	ldd	r25, Y+5	; 0x05
    4c42:	01 97       	sbiw	r24, 0x01	; 1
    4c44:	f1 f7       	brne	.-4      	; 0x4c42 <InitLCD+0x670>
    4c46:	9d 83       	std	Y+5, r25	; 0x05
    4c48:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c4a:	8e 81       	ldd	r24, Y+6	; 0x06
    4c4c:	9f 81       	ldd	r25, Y+7	; 0x07
    4c4e:	01 97       	sbiw	r24, 0x01	; 1
    4c50:	9f 83       	std	Y+7, r25	; 0x07
    4c52:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c54:	8e 81       	ldd	r24, Y+6	; 0x06
    4c56:	9f 81       	ldd	r25, Y+7	; 0x07
    4c58:	00 97       	sbiw	r24, 0x00	; 0
    4c5a:	69 f7       	brne	.-38     	; 0x4c36 <InitLCD+0x664>
    4c5c:	24 c0       	rjmp	.+72     	; 0x4ca6 <InitLCD+0x6d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c5e:	68 85       	ldd	r22, Y+8	; 0x08
    4c60:	79 85       	ldd	r23, Y+9	; 0x09
    4c62:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c64:	9b 85       	ldd	r25, Y+11	; 0x0b
    4c66:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    4c6a:	dc 01       	movw	r26, r24
    4c6c:	cb 01       	movw	r24, r22
    4c6e:	9f 83       	std	Y+7, r25	; 0x07
    4c70:	8e 83       	std	Y+6, r24	; 0x06
    4c72:	8e 81       	ldd	r24, Y+6	; 0x06
    4c74:	9f 81       	ldd	r25, Y+7	; 0x07
    4c76:	9b 83       	std	Y+3, r25	; 0x03
    4c78:	8a 83       	std	Y+2, r24	; 0x02
    4c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    4c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    4c7e:	01 97       	sbiw	r24, 0x01	; 1
    4c80:	f1 f7       	brne	.-4      	; 0x4c7e <InitLCD+0x6ac>
    4c82:	9b 83       	std	Y+3, r25	; 0x03
    4c84:	8a 83       	std	Y+2, r24	; 0x02
    4c86:	0f c0       	rjmp	.+30     	; 0x4ca6 <InitLCD+0x6d4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4c88:	69 89       	ldd	r22, Y+17	; 0x11
    4c8a:	7a 89       	ldd	r23, Y+18	; 0x12
    4c8c:	8b 89       	ldd	r24, Y+19	; 0x13
    4c8e:	9c 89       	ldd	r25, Y+20	; 0x14
    4c90:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    4c94:	dc 01       	movw	r26, r24
    4c96:	cb 01       	movw	r24, r22
    4c98:	88 8b       	std	Y+16, r24	; 0x10
    4c9a:	88 89       	ldd	r24, Y+16	; 0x10
    4c9c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4c9e:	89 81       	ldd	r24, Y+1	; 0x01
    4ca0:	8a 95       	dec	r24
    4ca2:	f1 f7       	brne	.-4      	; 0x4ca0 <InitLCD+0x6ce>
    4ca4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
    4ca6:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0x0C|style);	//Display On   //0b00001100|style
    4caa:	fe 01       	movw	r30, r28
    4cac:	e9 5a       	subi	r30, 0xA9	; 169
    4cae:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb0:	80 81       	ld	r24, Z
    4cb2:	8c 60       	ori	r24, 0x0C	; 12
    4cb4:	60 e0       	ldi	r22, 0x00	; 0
    4cb6:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCDByte>
	LCDCmd(0x28);			//function set 4-bit,2 line 5x7 dot format //0b00101000
    4cba:	88 e2       	ldi	r24, 0x28	; 40
    4cbc:	60 e0       	ldi	r22, 0x00	; 0
    4cbe:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCDByte>
}
    4cc2:	c9 5a       	subi	r28, 0xA9	; 169
    4cc4:	df 4f       	sbci	r29, 0xFF	; 255
    4cc6:	0f b6       	in	r0, 0x3f	; 63
    4cc8:	f8 94       	cli
    4cca:	de bf       	out	0x3e, r29	; 62
    4ccc:	0f be       	out	0x3f, r0	; 63
    4cce:	cd bf       	out	0x3d, r28	; 61
    4cd0:	cf 91       	pop	r28
    4cd2:	df 91       	pop	r29
    4cd4:	1f 91       	pop	r17
    4cd6:	0f 91       	pop	r16
    4cd8:	08 95       	ret

00004cda <LCDWriteString>:
void LCDWriteString(const char *msg)
{
    4cda:	df 93       	push	r29
    4cdc:	cf 93       	push	r28
    4cde:	00 d0       	rcall	.+0      	; 0x4ce0 <LCDWriteString+0x6>
    4ce0:	cd b7       	in	r28, 0x3d	; 61
    4ce2:	de b7       	in	r29, 0x3e	; 62
    4ce4:	9a 83       	std	Y+2, r25	; 0x02
    4ce6:	89 83       	std	Y+1, r24	; 0x01
    4ce8:	0b c0       	rjmp	.+22     	; 0x4d00 <LCDWriteString+0x26>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
    4cea:	e9 81       	ldd	r30, Y+1	; 0x01
    4cec:	fa 81       	ldd	r31, Y+2	; 0x02
    4cee:	80 81       	ld	r24, Z
    4cf0:	61 e0       	ldi	r22, 0x01	; 1
    4cf2:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCDByte>
	msg++;
    4cf6:	89 81       	ldd	r24, Y+1	; 0x01
    4cf8:	9a 81       	ldd	r25, Y+2	; 0x02
    4cfa:	01 96       	adiw	r24, 0x01	; 1
    4cfc:	9a 83       	std	Y+2, r25	; 0x02
    4cfe:	89 83       	std	Y+1, r24	; 0x01
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
    4d00:	e9 81       	ldd	r30, Y+1	; 0x01
    4d02:	fa 81       	ldd	r31, Y+2	; 0x02
    4d04:	80 81       	ld	r24, Z
    4d06:	88 23       	and	r24, r24
    4d08:	81 f7       	brne	.-32     	; 0x4cea <LCDWriteString+0x10>
 {
	LCDData(*msg);
	msg++;
 }
}
    4d0a:	0f 90       	pop	r0
    4d0c:	0f 90       	pop	r0
    4d0e:	cf 91       	pop	r28
    4d10:	df 91       	pop	r29
    4d12:	08 95       	ret

00004d14 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
    4d14:	df 93       	push	r29
    4d16:	cf 93       	push	r28
    4d18:	cd b7       	in	r28, 0x3d	; 61
    4d1a:	de b7       	in	r29, 0x3e	; 62
    4d1c:	2d 97       	sbiw	r28, 0x0d	; 13
    4d1e:	0f b6       	in	r0, 0x3f	; 63
    4d20:	f8 94       	cli
    4d22:	de bf       	out	0x3e, r29	; 62
    4d24:	0f be       	out	0x3f, r0	; 63
    4d26:	cd bf       	out	0x3d, r28	; 61
    4d28:	9b 87       	std	Y+11, r25	; 0x0b
    4d2a:	8a 87       	std	Y+10, r24	; 0x0a
    4d2c:	7d 87       	std	Y+13, r23	; 0x0d
    4d2e:	6c 87       	std	Y+12, r22	; 0x0c
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
    4d30:	85 e0       	ldi	r24, 0x05	; 5
    4d32:	fe 01       	movw	r30, r28
    4d34:	35 96       	adiw	r30, 0x05	; 5
    4d36:	df 01       	movw	r26, r30
    4d38:	28 2f       	mov	r18, r24
    4d3a:	1d 92       	st	X+, r1
    4d3c:	2a 95       	dec	r18
    4d3e:	e9 f7       	brne	.-6      	; 0x4d3a <LCDWriteInt+0x26>
	int i=4,j=0;
    4d40:	84 e0       	ldi	r24, 0x04	; 4
    4d42:	90 e0       	ldi	r25, 0x00	; 0
    4d44:	9c 83       	std	Y+4, r25	; 0x04
    4d46:	8b 83       	std	Y+3, r24	; 0x03
    4d48:	1a 82       	std	Y+2, r1	; 0x02
    4d4a:	19 82       	std	Y+1, r1	; 0x01
    4d4c:	1e c0       	rjmp	.+60     	; 0x4d8a <LCDWriteInt+0x76>
	while(val)
	{
	str[i]=val%10;
    4d4e:	eb 81       	ldd	r30, Y+3	; 0x03
    4d50:	fc 81       	ldd	r31, Y+4	; 0x04
    4d52:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d54:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d56:	2a e0       	ldi	r18, 0x0A	; 10
    4d58:	30 e0       	ldi	r19, 0x00	; 0
    4d5a:	b9 01       	movw	r22, r18
    4d5c:	0e 94 4b 3e 	call	0x7c96	; 0x7c96 <__divmodhi4>
    4d60:	28 2f       	mov	r18, r24
    4d62:	ce 01       	movw	r24, r28
    4d64:	05 96       	adiw	r24, 0x05	; 5
    4d66:	e8 0f       	add	r30, r24
    4d68:	f9 1f       	adc	r31, r25
    4d6a:	20 83       	st	Z, r18
	val=val/10;
    4d6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d6e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d70:	2a e0       	ldi	r18, 0x0A	; 10
    4d72:	30 e0       	ldi	r19, 0x00	; 0
    4d74:	b9 01       	movw	r22, r18
    4d76:	0e 94 4b 3e 	call	0x7c96	; 0x7c96 <__divmodhi4>
    4d7a:	cb 01       	movw	r24, r22
    4d7c:	9b 87       	std	Y+11, r25	; 0x0b
    4d7e:	8a 87       	std	Y+10, r24	; 0x0a
	i--;
    4d80:	8b 81       	ldd	r24, Y+3	; 0x03
    4d82:	9c 81       	ldd	r25, Y+4	; 0x04
    4d84:	01 97       	sbiw	r24, 0x01	; 1
    4d86:	9c 83       	std	Y+4, r25	; 0x04
    4d88:	8b 83       	std	Y+3, r24	; 0x03

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
    4d8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d8c:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d8e:	00 97       	sbiw	r24, 0x00	; 0
    4d90:	f1 f6       	brne	.-68     	; 0x4d4e <LCDWriteInt+0x3a>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
    4d92:	8c 85       	ldd	r24, Y+12	; 0x0c
    4d94:	9d 85       	ldd	r25, Y+13	; 0x0d
    4d96:	af ef       	ldi	r26, 0xFF	; 255
    4d98:	8f 3f       	cpi	r24, 0xFF	; 255
    4d9a:	9a 07       	cpc	r25, r26
    4d9c:	89 f4       	brne	.+34     	; 0x4dc0 <LCDWriteInt+0xac>
    4d9e:	05 c0       	rjmp	.+10     	; 0x4daa <LCDWriteInt+0x96>
		while(str[j]==0) j++;
    4da0:	89 81       	ldd	r24, Y+1	; 0x01
    4da2:	9a 81       	ldd	r25, Y+2	; 0x02
    4da4:	01 96       	adiw	r24, 0x01	; 1
    4da6:	9a 83       	std	Y+2, r25	; 0x02
    4da8:	89 83       	std	Y+1, r24	; 0x01
    4daa:	29 81       	ldd	r18, Y+1	; 0x01
    4dac:	3a 81       	ldd	r19, Y+2	; 0x02
    4dae:	ce 01       	movw	r24, r28
    4db0:	05 96       	adiw	r24, 0x05	; 5
    4db2:	fc 01       	movw	r30, r24
    4db4:	e2 0f       	add	r30, r18
    4db6:	f3 1f       	adc	r31, r19
    4db8:	80 81       	ld	r24, Z
    4dba:	88 23       	and	r24, r24
    4dbc:	89 f3       	breq	.-30     	; 0x4da0 <LCDWriteInt+0x8c>
    4dbe:	08 c0       	rjmp	.+16     	; 0x4dd0 <LCDWriteInt+0xbc>
	else
		j=5-field_length;
    4dc0:	85 e0       	ldi	r24, 0x05	; 5
    4dc2:	90 e0       	ldi	r25, 0x00	; 0
    4dc4:	2c 85       	ldd	r18, Y+12	; 0x0c
    4dc6:	3d 85       	ldd	r19, Y+13	; 0x0d
    4dc8:	82 1b       	sub	r24, r18
    4dca:	93 0b       	sbc	r25, r19
    4dcc:	9a 83       	std	Y+2, r25	; 0x02
    4dce:	89 83       	std	Y+1, r24	; 0x01

	if(val<0) LCDData('-');
    4dd0:	8a 85       	ldd	r24, Y+10	; 0x0a
    4dd2:	9b 85       	ldd	r25, Y+11	; 0x0b
    4dd4:	99 23       	and	r25, r25
    4dd6:	24 f4       	brge	.+8      	; 0x4de0 <LCDWriteInt+0xcc>
    4dd8:	8d e2       	ldi	r24, 0x2D	; 45
    4dda:	61 e0       	ldi	r22, 0x01	; 1
    4ddc:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCDByte>
	for(i=j;i<5;i++)
    4de0:	89 81       	ldd	r24, Y+1	; 0x01
    4de2:	9a 81       	ldd	r25, Y+2	; 0x02
    4de4:	9c 83       	std	Y+4, r25	; 0x04
    4de6:	8b 83       	std	Y+3, r24	; 0x03
    4de8:	11 c0       	rjmp	.+34     	; 0x4e0c <LCDWriteInt+0xf8>
	{
	LCDData(48+str[i]);
    4dea:	2b 81       	ldd	r18, Y+3	; 0x03
    4dec:	3c 81       	ldd	r19, Y+4	; 0x04
    4dee:	ce 01       	movw	r24, r28
    4df0:	05 96       	adiw	r24, 0x05	; 5
    4df2:	fc 01       	movw	r30, r24
    4df4:	e2 0f       	add	r30, r18
    4df6:	f3 1f       	adc	r31, r19
    4df8:	80 81       	ld	r24, Z
    4dfa:	80 5d       	subi	r24, 0xD0	; 208
    4dfc:	61 e0       	ldi	r22, 0x01	; 1
    4dfe:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
    4e02:	8b 81       	ldd	r24, Y+3	; 0x03
    4e04:	9c 81       	ldd	r25, Y+4	; 0x04
    4e06:	01 96       	adiw	r24, 0x01	; 1
    4e08:	9c 83       	std	Y+4, r25	; 0x04
    4e0a:	8b 83       	std	Y+3, r24	; 0x03
    4e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    4e0e:	9c 81       	ldd	r25, Y+4	; 0x04
    4e10:	85 30       	cpi	r24, 0x05	; 5
    4e12:	91 05       	cpc	r25, r1
    4e14:	54 f3       	brlt	.-44     	; 0x4dea <LCDWriteInt+0xd6>
	{
	LCDData(48+str[i]);
	}
}
    4e16:	2d 96       	adiw	r28, 0x0d	; 13
    4e18:	0f b6       	in	r0, 0x3f	; 63
    4e1a:	f8 94       	cli
    4e1c:	de bf       	out	0x3e, r29	; 62
    4e1e:	0f be       	out	0x3f, r0	; 63
    4e20:	cd bf       	out	0x3d, r28	; 61
    4e22:	cf 91       	pop	r28
    4e24:	df 91       	pop	r29
    4e26:	08 95       	ret

00004e28 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
    4e28:	df 93       	push	r29
    4e2a:	cf 93       	push	r28
    4e2c:	00 d0       	rcall	.+0      	; 0x4e2e <LCDGotoXY+0x6>
    4e2e:	cd b7       	in	r28, 0x3d	; 61
    4e30:	de b7       	in	r29, 0x3e	; 62
    4e32:	89 83       	std	Y+1, r24	; 0x01
    4e34:	6a 83       	std	Y+2, r22	; 0x02
 if(x<40)
    4e36:	89 81       	ldd	r24, Y+1	; 0x01
    4e38:	88 32       	cpi	r24, 0x28	; 40
    4e3a:	68 f4       	brcc	.+26     	; 0x4e56 <LCDGotoXY+0x2e>
 {
  if(y) x|=0x40; //0b01000000
    4e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    4e3e:	88 23       	and	r24, r24
    4e40:	19 f0       	breq	.+6      	; 0x4e48 <LCDGotoXY+0x20>
    4e42:	89 81       	ldd	r24, Y+1	; 0x01
    4e44:	80 64       	ori	r24, 0x40	; 64
    4e46:	89 83       	std	Y+1, r24	; 0x01
  x|=0x80; //0b10000000
    4e48:	89 81       	ldd	r24, Y+1	; 0x01
    4e4a:	80 68       	ori	r24, 0x80	; 128
    4e4c:	89 83       	std	Y+1, r24	; 0x01
  LCDCmd(x);
    4e4e:	89 81       	ldd	r24, Y+1	; 0x01
    4e50:	60 e0       	ldi	r22, 0x00	; 0
    4e52:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCDByte>
  }
}
    4e56:	0f 90       	pop	r0
    4e58:	0f 90       	pop	r0
    4e5a:	cf 91       	pop	r28
    4e5c:	df 91       	pop	r29
    4e5e:	08 95       	ret

00004e60 <Stop>:

static char firstTime = 1;
static char ev_angleNotReached = 0;

void Stop(void)
{   
    4e60:	df 93       	push	r29
    4e62:	cf 93       	push	r28
    4e64:	cd b7       	in	r28, 0x3d	; 61
    4e66:	de b7       	in	r29, 0x3e	; 62
	UART0_Write('S');
    4e68:	83 e5       	ldi	r24, 0x53	; 83
    4e6a:	0e 94 62 39 	call	0x72c4	; 0x72c4 <UART0_Write>
    UART0_Read(); 
    4e6e:	0e 94 e5 39 	call	0x73ca	; 0x73ca <UART0_Read>
}
    4e72:	cf 91       	pop	r28
    4e74:	df 91       	pop	r29
    4e76:	08 95       	ret

00004e78 <setCommandInt>:

void setCommandInt(unsigned char komanda, int vrednost)
{
    4e78:	df 93       	push	r29
    4e7a:	cf 93       	push	r28
    4e7c:	00 d0       	rcall	.+0      	; 0x4e7e <setCommandInt+0x6>
    4e7e:	0f 92       	push	r0
    4e80:	cd b7       	in	r28, 0x3d	; 61
    4e82:	de b7       	in	r29, 0x3e	; 62
    4e84:	89 83       	std	Y+1, r24	; 0x01
    4e86:	7b 83       	std	Y+3, r23	; 0x03
    4e88:	6a 83       	std	Y+2, r22	; 0x02
    UART0_Write(komanda);
    4e8a:	89 81       	ldd	r24, Y+1	; 0x01
    4e8c:	0e 94 62 39 	call	0x72c4	; 0x72c4 <UART0_Write>
    UART0_Write((unsigned char)(vrednost >> 8));
    4e90:	8a 81       	ldd	r24, Y+2	; 0x02
    4e92:	9b 81       	ldd	r25, Y+3	; 0x03
    4e94:	89 2f       	mov	r24, r25
    4e96:	99 0f       	add	r25, r25
    4e98:	99 0b       	sbc	r25, r25
    4e9a:	0e 94 62 39 	call	0x72c4	; 0x72c4 <UART0_Write>
    UART0_Write((unsigned char) vrednost);
    4e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    4ea0:	0e 94 62 39 	call	0x72c4	; 0x72c4 <UART0_Write>
    UART0_Read();  
    4ea4:	0e 94 e5 39 	call	0x73ca	; 0x73ca <UART0_Read>
}
    4ea8:	0f 90       	pop	r0
    4eaa:	0f 90       	pop	r0
    4eac:	0f 90       	pop	r0
    4eae:	cf 91       	pop	r28
    4eb0:	df 91       	pop	r29
    4eb2:	08 95       	ret

00004eb4 <setCommandShort>:


void setCommandShort(unsigned char komanda, short vrednost)
{
    4eb4:	df 93       	push	r29
    4eb6:	cf 93       	push	r28
    4eb8:	00 d0       	rcall	.+0      	; 0x4eba <setCommandShort+0x6>
    4eba:	0f 92       	push	r0
    4ebc:	cd b7       	in	r28, 0x3d	; 61
    4ebe:	de b7       	in	r29, 0x3e	; 62
    4ec0:	89 83       	std	Y+1, r24	; 0x01
    4ec2:	7b 83       	std	Y+3, r23	; 0x03
    4ec4:	6a 83       	std	Y+2, r22	; 0x02
    UART0_Write(komanda);
    4ec6:	89 81       	ldd	r24, Y+1	; 0x01
    4ec8:	0e 94 62 39 	call	0x72c4	; 0x72c4 <UART0_Write>
    UART0_Write((unsigned char) vrednost);
    4ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    4ece:	0e 94 62 39 	call	0x72c4	; 0x72c4 <UART0_Write>
    UART0_Read();  
    4ed2:	0e 94 e5 39 	call	0x73ca	; 0x73ca <UART0_Read>
}
    4ed6:	0f 90       	pop	r0
    4ed8:	0f 90       	pop	r0
    4eda:	0f 90       	pop	r0
    4edc:	cf 91       	pop	r28
    4ede:	df 91       	pop	r29
    4ee0:	08 95       	ret

00004ee2 <readX>:

//citanje X koordinate
int readX(void)
{
    4ee2:	df 93       	push	r29
    4ee4:	cf 93       	push	r28
    4ee6:	cd b7       	in	r28, 0x3d	; 61
    4ee8:	de b7       	in	r29, 0x3e	; 62
    4eea:	29 97       	sbiw	r28, 0x09	; 9
    4eec:	0f b6       	in	r0, 0x3f	; 63
    4eee:	f8 94       	cli
    4ef0:	de bf       	out	0x3e, r29	; 62
    4ef2:	0f be       	out	0x3f, r0	; 63
    4ef4:	cd bf       	out	0x3d, r28	; 61
    signed int msb;
    signed int lsb;
    signed int xp;  //pomocni x 
    signed int x;   

    UART0_Write('X');
    4ef6:	88 e5       	ldi	r24, 0x58	; 88
    4ef8:	0e 94 62 39 	call	0x72c4	; 0x72c4 <UART0_Write>
    pom = UART0_Read();
    4efc:	0e 94 e5 39 	call	0x73ca	; 0x73ca <UART0_Read>
    4f00:	89 87       	std	Y+9, r24	; 0x09
    
    if(pom == 'X')
    4f02:	89 85       	ldd	r24, Y+9	; 0x09
    4f04:	88 35       	cpi	r24, 0x58	; 88
    4f06:	f1 f4       	brne	.+60     	; 0x4f44 <readX+0x62>
    {
        msb = UART0_Read();
    4f08:	0e 94 e5 39 	call	0x73ca	; 0x73ca <UART0_Read>
    4f0c:	88 2f       	mov	r24, r24
    4f0e:	90 e0       	ldi	r25, 0x00	; 0
    4f10:	98 87       	std	Y+8, r25	; 0x08
    4f12:	8f 83       	std	Y+7, r24	; 0x07
        lsb = UART0_Read();
    4f14:	0e 94 e5 39 	call	0x73ca	; 0x73ca <UART0_Read>
    4f18:	88 2f       	mov	r24, r24
    4f1a:	90 e0       	ldi	r25, 0x00	; 0
    4f1c:	9e 83       	std	Y+6, r25	; 0x06
    4f1e:	8d 83       	std	Y+5, r24	; 0x05
        
        xp = (signed int)msb;
    4f20:	8f 81       	ldd	r24, Y+7	; 0x07
    4f22:	98 85       	ldd	r25, Y+8	; 0x08
    4f24:	9c 83       	std	Y+4, r25	; 0x04
    4f26:	8b 83       	std	Y+3, r24	; 0x03
        xp = xp << 8;
    4f28:	8b 81       	ldd	r24, Y+3	; 0x03
    4f2a:	9c 81       	ldd	r25, Y+4	; 0x04
    4f2c:	98 2f       	mov	r25, r24
    4f2e:	88 27       	eor	r24, r24
    4f30:	9c 83       	std	Y+4, r25	; 0x04
    4f32:	8b 83       	std	Y+3, r24	; 0x03
        x = xp | (signed int)lsb;
    4f34:	2b 81       	ldd	r18, Y+3	; 0x03
    4f36:	3c 81       	ldd	r19, Y+4	; 0x04
    4f38:	8d 81       	ldd	r24, Y+5	; 0x05
    4f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    4f3c:	82 2b       	or	r24, r18
    4f3e:	93 2b       	or	r25, r19
    4f40:	9a 83       	std	Y+2, r25	; 0x02
    4f42:	89 83       	std	Y+1, r24	; 0x01
    } 
    
    return x;
    4f44:	89 81       	ldd	r24, Y+1	; 0x01
    4f46:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4f48:	29 96       	adiw	r28, 0x09	; 9
    4f4a:	0f b6       	in	r0, 0x3f	; 63
    4f4c:	f8 94       	cli
    4f4e:	de bf       	out	0x3e, r29	; 62
    4f50:	0f be       	out	0x3f, r0	; 63
    4f52:	cd bf       	out	0x3d, r28	; 61
    4f54:	cf 91       	pop	r28
    4f56:	df 91       	pop	r29
    4f58:	08 95       	ret

00004f5a <readY>:

//citanje Y koordinate
int readY(void)
{
    4f5a:	df 93       	push	r29
    4f5c:	cf 93       	push	r28
    4f5e:	cd b7       	in	r28, 0x3d	; 61
    4f60:	de b7       	in	r29, 0x3e	; 62
    4f62:	29 97       	sbiw	r28, 0x09	; 9
    4f64:	0f b6       	in	r0, 0x3f	; 63
    4f66:	f8 94       	cli
    4f68:	de bf       	out	0x3e, r29	; 62
    4f6a:	0f be       	out	0x3f, r0	; 63
    4f6c:	cd bf       	out	0x3d, r28	; 61
    signed int msb;
    signed int lsb;
    signed int yp;  //pomocni y 
    signed int y;   

    UART0_Write('Y');
    4f6e:	89 e5       	ldi	r24, 0x59	; 89
    4f70:	0e 94 62 39 	call	0x72c4	; 0x72c4 <UART0_Write>
    pom = UART0_Read();
    4f74:	0e 94 e5 39 	call	0x73ca	; 0x73ca <UART0_Read>
    4f78:	89 87       	std	Y+9, r24	; 0x09
    
    if(pom == 'Y')
    4f7a:	89 85       	ldd	r24, Y+9	; 0x09
    4f7c:	89 35       	cpi	r24, 0x59	; 89
    4f7e:	f1 f4       	brne	.+60     	; 0x4fbc <readY+0x62>
    {
        msb = UART0_Read();
    4f80:	0e 94 e5 39 	call	0x73ca	; 0x73ca <UART0_Read>
    4f84:	88 2f       	mov	r24, r24
    4f86:	90 e0       	ldi	r25, 0x00	; 0
    4f88:	98 87       	std	Y+8, r25	; 0x08
    4f8a:	8f 83       	std	Y+7, r24	; 0x07
        lsb = UART0_Read();
    4f8c:	0e 94 e5 39 	call	0x73ca	; 0x73ca <UART0_Read>
    4f90:	88 2f       	mov	r24, r24
    4f92:	90 e0       	ldi	r25, 0x00	; 0
    4f94:	9e 83       	std	Y+6, r25	; 0x06
    4f96:	8d 83       	std	Y+5, r24	; 0x05
        
        yp = (signed int)msb;
    4f98:	8f 81       	ldd	r24, Y+7	; 0x07
    4f9a:	98 85       	ldd	r25, Y+8	; 0x08
    4f9c:	9c 83       	std	Y+4, r25	; 0x04
    4f9e:	8b 83       	std	Y+3, r24	; 0x03
        yp = yp << 8;
    4fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    4fa2:	9c 81       	ldd	r25, Y+4	; 0x04
    4fa4:	98 2f       	mov	r25, r24
    4fa6:	88 27       	eor	r24, r24
    4fa8:	9c 83       	std	Y+4, r25	; 0x04
    4faa:	8b 83       	std	Y+3, r24	; 0x03
        y = yp | (signed int)lsb;
    4fac:	2b 81       	ldd	r18, Y+3	; 0x03
    4fae:	3c 81       	ldd	r19, Y+4	; 0x04
    4fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    4fb2:	9e 81       	ldd	r25, Y+6	; 0x06
    4fb4:	82 2b       	or	r24, r18
    4fb6:	93 2b       	or	r25, r19
    4fb8:	9a 83       	std	Y+2, r25	; 0x02
    4fba:	89 83       	std	Y+1, r24	; 0x01
    } 
    
    return y;
    4fbc:	89 81       	ldd	r24, Y+1	; 0x01
    4fbe:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4fc0:	29 96       	adiw	r28, 0x09	; 9
    4fc2:	0f b6       	in	r0, 0x3f	; 63
    4fc4:	f8 94       	cli
    4fc6:	de bf       	out	0x3e, r29	; 62
    4fc8:	0f be       	out	0x3f, r0	; 63
    4fca:	cd bf       	out	0x3d, r28	; 61
    4fcc:	cf 91       	pop	r28
    4fce:	df 91       	pop	r29
    4fd0:	08 95       	ret

00004fd2 <readUgaoInkrementi>:

//citanje ugla u inkrementima
long readUgaoInkrementi(void)
{
    4fd2:	df 93       	push	r29
    4fd4:	cf 93       	push	r28
    4fd6:	cd b7       	in	r28, 0x3d	; 61
    4fd8:	de b7       	in	r29, 0x3e	; 62
    4fda:	61 97       	sbiw	r28, 0x11	; 17
    4fdc:	0f b6       	in	r0, 0x3f	; 63
    4fde:	f8 94       	cli
    4fe0:	de bf       	out	0x3e, r29	; 62
    4fe2:	0f be       	out	0x3f, r0	; 63
    4fe4:	cd bf       	out	0x3d, r28	; 61
    signed int srednji_lsb;
    signed int lsb;
    long teta_pom;
    long teta;
    
    UART0_Write('O');
    4fe6:	8f e4       	ldi	r24, 0x4F	; 79
    4fe8:	0e 94 62 39 	call	0x72c4	; 0x72c4 <UART0_Write>
    //_delay_ms(1);
    pom = UART0_Read();
    4fec:	0e 94 e5 39 	call	0x73ca	; 0x73ca <UART0_Read>
    4ff0:	89 8b       	std	Y+17, r24	; 0x11
    if(pom == 'O')
    4ff2:	89 89       	ldd	r24, Y+17	; 0x11
    4ff4:	8f 34       	cpi	r24, 0x4F	; 79
    4ff6:	09 f0       	breq	.+2      	; 0x4ffa <readUgaoInkrementi+0x28>
    4ff8:	7f c0       	rjmp	.+254    	; 0x50f8 <readUgaoInkrementi+0x126>
    {
        msb = UART0_Read();
    4ffa:	0e 94 e5 39 	call	0x73ca	; 0x73ca <UART0_Read>
    4ffe:	88 2f       	mov	r24, r24
    5000:	90 e0       	ldi	r25, 0x00	; 0
    5002:	98 8b       	std	Y+16, r25	; 0x10
    5004:	8f 87       	std	Y+15, r24	; 0x0f
        srednji_msb = UART0_Read();
    5006:	0e 94 e5 39 	call	0x73ca	; 0x73ca <UART0_Read>
    500a:	88 2f       	mov	r24, r24
    500c:	90 e0       	ldi	r25, 0x00	; 0
    500e:	9e 87       	std	Y+14, r25	; 0x0e
    5010:	8d 87       	std	Y+13, r24	; 0x0d
        srednji_lsb = UART0_Read();
    5012:	0e 94 e5 39 	call	0x73ca	; 0x73ca <UART0_Read>
    5016:	88 2f       	mov	r24, r24
    5018:	90 e0       	ldi	r25, 0x00	; 0
    501a:	9c 87       	std	Y+12, r25	; 0x0c
    501c:	8b 87       	std	Y+11, r24	; 0x0b
        lsb = UART0_Read();
    501e:	0e 94 e5 39 	call	0x73ca	; 0x73ca <UART0_Read>
    5022:	88 2f       	mov	r24, r24
    5024:	90 e0       	ldi	r25, 0x00	; 0
    5026:	9a 87       	std	Y+10, r25	; 0x0a
    5028:	89 87       	std	Y+9, r24	; 0x09
        
        teta_pom = (signed int)msb;
    502a:	8f 85       	ldd	r24, Y+15	; 0x0f
    502c:	98 89       	ldd	r25, Y+16	; 0x10
    502e:	aa 27       	eor	r26, r26
    5030:	97 fd       	sbrc	r25, 7
    5032:	a0 95       	com	r26
    5034:	ba 2f       	mov	r27, r26
    5036:	8d 83       	std	Y+5, r24	; 0x05
    5038:	9e 83       	std	Y+6, r25	; 0x06
    503a:	af 83       	std	Y+7, r26	; 0x07
    503c:	b8 87       	std	Y+8, r27	; 0x08
        teta_pom = teta_pom << 8;
    503e:	8d 81       	ldd	r24, Y+5	; 0x05
    5040:	9e 81       	ldd	r25, Y+6	; 0x06
    5042:	af 81       	ldd	r26, Y+7	; 0x07
    5044:	b8 85       	ldd	r27, Y+8	; 0x08
    5046:	ba 2f       	mov	r27, r26
    5048:	a9 2f       	mov	r26, r25
    504a:	98 2f       	mov	r25, r24
    504c:	88 27       	eor	r24, r24
    504e:	8d 83       	std	Y+5, r24	; 0x05
    5050:	9e 83       	std	Y+6, r25	; 0x06
    5052:	af 83       	std	Y+7, r26	; 0x07
    5054:	b8 87       	std	Y+8, r27	; 0x08
        teta_pom |= (signed int)srednji_msb;
    5056:	8d 85       	ldd	r24, Y+13	; 0x0d
    5058:	9e 85       	ldd	r25, Y+14	; 0x0e
    505a:	9c 01       	movw	r18, r24
    505c:	44 27       	eor	r20, r20
    505e:	37 fd       	sbrc	r19, 7
    5060:	40 95       	com	r20
    5062:	54 2f       	mov	r21, r20
    5064:	8d 81       	ldd	r24, Y+5	; 0x05
    5066:	9e 81       	ldd	r25, Y+6	; 0x06
    5068:	af 81       	ldd	r26, Y+7	; 0x07
    506a:	b8 85       	ldd	r27, Y+8	; 0x08
    506c:	82 2b       	or	r24, r18
    506e:	93 2b       	or	r25, r19
    5070:	a4 2b       	or	r26, r20
    5072:	b5 2b       	or	r27, r21
    5074:	8d 83       	std	Y+5, r24	; 0x05
    5076:	9e 83       	std	Y+6, r25	; 0x06
    5078:	af 83       	std	Y+7, r26	; 0x07
    507a:	b8 87       	std	Y+8, r27	; 0x08
        teta_pom = teta_pom << 8; 
    507c:	8d 81       	ldd	r24, Y+5	; 0x05
    507e:	9e 81       	ldd	r25, Y+6	; 0x06
    5080:	af 81       	ldd	r26, Y+7	; 0x07
    5082:	b8 85       	ldd	r27, Y+8	; 0x08
    5084:	ba 2f       	mov	r27, r26
    5086:	a9 2f       	mov	r26, r25
    5088:	98 2f       	mov	r25, r24
    508a:	88 27       	eor	r24, r24
    508c:	8d 83       	std	Y+5, r24	; 0x05
    508e:	9e 83       	std	Y+6, r25	; 0x06
    5090:	af 83       	std	Y+7, r26	; 0x07
    5092:	b8 87       	std	Y+8, r27	; 0x08
        teta_pom |= (signed int)srednji_lsb;
    5094:	8b 85       	ldd	r24, Y+11	; 0x0b
    5096:	9c 85       	ldd	r25, Y+12	; 0x0c
    5098:	9c 01       	movw	r18, r24
    509a:	44 27       	eor	r20, r20
    509c:	37 fd       	sbrc	r19, 7
    509e:	40 95       	com	r20
    50a0:	54 2f       	mov	r21, r20
    50a2:	8d 81       	ldd	r24, Y+5	; 0x05
    50a4:	9e 81       	ldd	r25, Y+6	; 0x06
    50a6:	af 81       	ldd	r26, Y+7	; 0x07
    50a8:	b8 85       	ldd	r27, Y+8	; 0x08
    50aa:	82 2b       	or	r24, r18
    50ac:	93 2b       	or	r25, r19
    50ae:	a4 2b       	or	r26, r20
    50b0:	b5 2b       	or	r27, r21
    50b2:	8d 83       	std	Y+5, r24	; 0x05
    50b4:	9e 83       	std	Y+6, r25	; 0x06
    50b6:	af 83       	std	Y+7, r26	; 0x07
    50b8:	b8 87       	std	Y+8, r27	; 0x08
        teta_pom = teta_pom << 8;
    50ba:	8d 81       	ldd	r24, Y+5	; 0x05
    50bc:	9e 81       	ldd	r25, Y+6	; 0x06
    50be:	af 81       	ldd	r26, Y+7	; 0x07
    50c0:	b8 85       	ldd	r27, Y+8	; 0x08
    50c2:	ba 2f       	mov	r27, r26
    50c4:	a9 2f       	mov	r26, r25
    50c6:	98 2f       	mov	r25, r24
    50c8:	88 27       	eor	r24, r24
    50ca:	8d 83       	std	Y+5, r24	; 0x05
    50cc:	9e 83       	std	Y+6, r25	; 0x06
    50ce:	af 83       	std	Y+7, r26	; 0x07
    50d0:	b8 87       	std	Y+8, r27	; 0x08
         
        teta = teta_pom | (signed int)lsb;
    50d2:	89 85       	ldd	r24, Y+9	; 0x09
    50d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    50d6:	9c 01       	movw	r18, r24
    50d8:	44 27       	eor	r20, r20
    50da:	37 fd       	sbrc	r19, 7
    50dc:	40 95       	com	r20
    50de:	54 2f       	mov	r21, r20
    50e0:	8d 81       	ldd	r24, Y+5	; 0x05
    50e2:	9e 81       	ldd	r25, Y+6	; 0x06
    50e4:	af 81       	ldd	r26, Y+7	; 0x07
    50e6:	b8 85       	ldd	r27, Y+8	; 0x08
    50e8:	82 2b       	or	r24, r18
    50ea:	93 2b       	or	r25, r19
    50ec:	a4 2b       	or	r26, r20
    50ee:	b5 2b       	or	r27, r21
    50f0:	89 83       	std	Y+1, r24	; 0x01
    50f2:	9a 83       	std	Y+2, r25	; 0x02
    50f4:	ab 83       	std	Y+3, r26	; 0x03
    50f6:	bc 83       	std	Y+4, r27	; 0x04
    }

    return teta;
    50f8:	89 81       	ldd	r24, Y+1	; 0x01
    50fa:	9a 81       	ldd	r25, Y+2	; 0x02
    50fc:	ab 81       	ldd	r26, Y+3	; 0x03
    50fe:	bc 81       	ldd	r27, Y+4	; 0x04
}
    5100:	bc 01       	movw	r22, r24
    5102:	cd 01       	movw	r24, r26
    5104:	61 96       	adiw	r28, 0x11	; 17
    5106:	0f b6       	in	r0, 0x3f	; 63
    5108:	f8 94       	cli
    510a:	de bf       	out	0x3e, r29	; 62
    510c:	0f be       	out	0x3f, r0	; 63
    510e:	cd bf       	out	0x3d, r28	; 61
    5110:	cf 91       	pop	r28
    5112:	df 91       	pop	r29
    5114:	08 95       	ret

00005116 <readUgaoStepeni>:

//citanje ugla u stepenima
int readUgaoStepeni(void)
{
    5116:	df 93       	push	r29
    5118:	cf 93       	push	r28
    511a:	00 d0       	rcall	.+0      	; 0x511c <readUgaoStepeni+0x6>
    511c:	cd b7       	in	r28, 0x3d	; 61
    511e:	de b7       	in	r29, 0x3e	; 62
    int teta;
    
    teta = (int)((readUgaoInkrementi() * 360) / PUNKRUG);
    5120:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <readUgaoInkrementi>
    5124:	dc 01       	movw	r26, r24
    5126:	cb 01       	movw	r24, r22
    5128:	28 e6       	ldi	r18, 0x68	; 104
    512a:	31 e0       	ldi	r19, 0x01	; 1
    512c:	40 e0       	ldi	r20, 0x00	; 0
    512e:	50 e0       	ldi	r21, 0x00	; 0
    5130:	bc 01       	movw	r22, r24
    5132:	cd 01       	movw	r24, r26
    5134:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <__mulsi3>
    5138:	dc 01       	movw	r26, r24
    513a:	cb 01       	movw	r24, r22
    513c:	2c eb       	ldi	r18, 0xBC	; 188
    513e:	3e ed       	ldi	r19, 0xDE	; 222
    5140:	40 e0       	ldi	r20, 0x00	; 0
    5142:	50 e0       	ldi	r21, 0x00	; 0
    5144:	bc 01       	movw	r22, r24
    5146:	cd 01       	movw	r24, r26
    5148:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <__divmodsi4>
    514c:	da 01       	movw	r26, r20
    514e:	c9 01       	movw	r24, r18
    5150:	9a 83       	std	Y+2, r25	; 0x02
    5152:	89 83       	std	Y+1, r24	; 0x01
    
    return teta;
    5154:	89 81       	ldd	r24, Y+1	; 0x01
    5156:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5158:	0f 90       	pop	r0
    515a:	0f 90       	pop	r0
    515c:	cf 91       	pop	r28
    515e:	df 91       	pop	r29
    5160:	08 95       	ret

00005162 <readDistanca>:

//citanje preostale distance
int readDistanca(void)
{
    5162:	df 93       	push	r29
    5164:	cf 93       	push	r28
    5166:	cd b7       	in	r28, 0x3d	; 61
    5168:	de b7       	in	r29, 0x3e	; 62
    516a:	29 97       	sbiw	r28, 0x09	; 9
    516c:	0f b6       	in	r0, 0x3f	; 63
    516e:	f8 94       	cli
    5170:	de bf       	out	0x3e, r29	; 62
    5172:	0f be       	out	0x3f, r0	; 63
    5174:	cd bf       	out	0x3d, r28	; 61
    signed int msb;
    signed int lsb;
    signed int dist_pom;
    signed int dist;
    
    UART0_Write('G');
    5176:	87 e4       	ldi	r24, 0x47	; 71
    5178:	0e 94 62 39 	call	0x72c4	; 0x72c4 <UART0_Write>
    pom = UART0_Read();
    517c:	0e 94 e5 39 	call	0x73ca	; 0x73ca <UART0_Read>
    5180:	89 87       	std	Y+9, r24	; 0x09
    
    if(pom == 'G')
    5182:	89 85       	ldd	r24, Y+9	; 0x09
    5184:	87 34       	cpi	r24, 0x47	; 71
    5186:	f1 f4       	brne	.+60     	; 0x51c4 <readDistanca+0x62>
    {
        msb = UART0_Read();
    5188:	0e 94 e5 39 	call	0x73ca	; 0x73ca <UART0_Read>
    518c:	88 2f       	mov	r24, r24
    518e:	90 e0       	ldi	r25, 0x00	; 0
    5190:	98 87       	std	Y+8, r25	; 0x08
    5192:	8f 83       	std	Y+7, r24	; 0x07
        lsb = UART0_Read();
    5194:	0e 94 e5 39 	call	0x73ca	; 0x73ca <UART0_Read>
    5198:	88 2f       	mov	r24, r24
    519a:	90 e0       	ldi	r25, 0x00	; 0
    519c:	9e 83       	std	Y+6, r25	; 0x06
    519e:	8d 83       	std	Y+5, r24	; 0x05
        dist_pom = (signed int)msb;
    51a0:	8f 81       	ldd	r24, Y+7	; 0x07
    51a2:	98 85       	ldd	r25, Y+8	; 0x08
    51a4:	9c 83       	std	Y+4, r25	; 0x04
    51a6:	8b 83       	std	Y+3, r24	; 0x03
        dist_pom = dist_pom << 8;
    51a8:	8b 81       	ldd	r24, Y+3	; 0x03
    51aa:	9c 81       	ldd	r25, Y+4	; 0x04
    51ac:	98 2f       	mov	r25, r24
    51ae:	88 27       	eor	r24, r24
    51b0:	9c 83       	std	Y+4, r25	; 0x04
    51b2:	8b 83       	std	Y+3, r24	; 0x03
        dist = dist_pom | (signed int)lsb;       
    51b4:	2b 81       	ldd	r18, Y+3	; 0x03
    51b6:	3c 81       	ldd	r19, Y+4	; 0x04
    51b8:	8d 81       	ldd	r24, Y+5	; 0x05
    51ba:	9e 81       	ldd	r25, Y+6	; 0x06
    51bc:	82 2b       	or	r24, r18
    51be:	93 2b       	or	r25, r19
    51c0:	9a 83       	std	Y+2, r25	; 0x02
    51c2:	89 83       	std	Y+1, r24	; 0x01
        
    }
    
    return dist;
    51c4:	89 81       	ldd	r24, Y+1	; 0x01
    51c6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    51c8:	29 96       	adiw	r28, 0x09	; 9
    51ca:	0f b6       	in	r0, 0x3f	; 63
    51cc:	f8 94       	cli
    51ce:	de bf       	out	0x3e, r29	; 62
    51d0:	0f be       	out	0x3f, r0	; 63
    51d2:	cd bf       	out	0x3d, r28	; 61
    51d4:	cf 91       	pop	r28
    51d6:	df 91       	pop	r29
    51d8:	08 95       	ret

000051da <setStartPosition>:

//postavljanje pocetnih vrednosti koordinata i ugla
//na pocetku se ovo stavi i onda robot zna gde je i sta je :)
void setStartPosition(int x, int y, int ugao)
{
    51da:	df 93       	push	r29
    51dc:	cf 93       	push	r28
    51de:	cd b7       	in	r28, 0x3d	; 61
    51e0:	de b7       	in	r29, 0x3e	; 62
    51e2:	2e 97       	sbiw	r28, 0x0e	; 14
    51e4:	0f b6       	in	r0, 0x3f	; 63
    51e6:	f8 94       	cli
    51e8:	de bf       	out	0x3e, r29	; 62
    51ea:	0f be       	out	0x3f, r0	; 63
    51ec:	cd bf       	out	0x3d, r28	; 61
    51ee:	9a 87       	std	Y+10, r25	; 0x0a
    51f0:	89 87       	std	Y+9, r24	; 0x09
    51f2:	7c 87       	std	Y+12, r23	; 0x0c
    51f4:	6b 87       	std	Y+11, r22	; 0x0b
    51f6:	5e 87       	std	Y+14, r21	; 0x0e
    51f8:	4d 87       	std	Y+13, r20	; 0x0d
    long temp_ugao = (long)(((long)ugao * PUNKRUG) / 360L);
    51fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    51fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    51fe:	aa 27       	eor	r26, r26
    5200:	97 fd       	sbrc	r25, 7
    5202:	a0 95       	com	r26
    5204:	ba 2f       	mov	r27, r26
    5206:	2c eb       	ldi	r18, 0xBC	; 188
    5208:	3e ed       	ldi	r19, 0xDE	; 222
    520a:	40 e0       	ldi	r20, 0x00	; 0
    520c:	50 e0       	ldi	r21, 0x00	; 0
    520e:	bc 01       	movw	r22, r24
    5210:	cd 01       	movw	r24, r26
    5212:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <__mulsi3>
    5216:	dc 01       	movw	r26, r24
    5218:	cb 01       	movw	r24, r22
    521a:	28 e6       	ldi	r18, 0x68	; 104
    521c:	31 e0       	ldi	r19, 0x01	; 1
    521e:	40 e0       	ldi	r20, 0x00	; 0
    5220:	50 e0       	ldi	r21, 0x00	; 0
    5222:	bc 01       	movw	r22, r24
    5224:	cd 01       	movw	r24, r26
    5226:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <__divmodsi4>
    522a:	da 01       	movw	r26, r20
    522c:	c9 01       	movw	r24, r18
    522e:	8d 83       	std	Y+5, r24	; 0x05
    5230:	9e 83       	std	Y+6, r25	; 0x06
    5232:	af 83       	std	Y+7, r26	; 0x07
    5234:	b8 87       	std	Y+8, r27	; 0x08
    long i;
    
    do
    {
        setCommandInt('I', x);    //sa I se zadaje vrednost X koordinate   
    5236:	29 85       	ldd	r18, Y+9	; 0x09
    5238:	3a 85       	ldd	r19, Y+10	; 0x0a
    523a:	89 e4       	ldi	r24, 0x49	; 73
    523c:	b9 01       	movw	r22, r18
    523e:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <setCommandInt>
        i = readX();
    5242:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <readX>
    5246:	aa 27       	eor	r26, r26
    5248:	97 fd       	sbrc	r25, 7
    524a:	a0 95       	com	r26
    524c:	ba 2f       	mov	r27, r26
    524e:	89 83       	std	Y+1, r24	; 0x01
    5250:	9a 83       	std	Y+2, r25	; 0x02
    5252:	ab 83       	std	Y+3, r26	; 0x03
    5254:	bc 83       	std	Y+4, r27	; 0x04
           
    }while((i < (x-2))  ||  (i > (x+2)));  
    5256:	89 85       	ldd	r24, Y+9	; 0x09
    5258:	9a 85       	ldd	r25, Y+10	; 0x0a
    525a:	02 97       	sbiw	r24, 0x02	; 2
    525c:	9c 01       	movw	r18, r24
    525e:	44 27       	eor	r20, r20
    5260:	37 fd       	sbrc	r19, 7
    5262:	40 95       	com	r20
    5264:	54 2f       	mov	r21, r20
    5266:	89 81       	ldd	r24, Y+1	; 0x01
    5268:	9a 81       	ldd	r25, Y+2	; 0x02
    526a:	ab 81       	ldd	r26, Y+3	; 0x03
    526c:	bc 81       	ldd	r27, Y+4	; 0x04
    526e:	82 17       	cp	r24, r18
    5270:	93 07       	cpc	r25, r19
    5272:	a4 07       	cpc	r26, r20
    5274:	b5 07       	cpc	r27, r21
    5276:	fc f2       	brlt	.-66     	; 0x5236 <setStartPosition+0x5c>
    5278:	89 85       	ldd	r24, Y+9	; 0x09
    527a:	9a 85       	ldd	r25, Y+10	; 0x0a
    527c:	02 96       	adiw	r24, 0x02	; 2
    527e:	9c 01       	movw	r18, r24
    5280:	44 27       	eor	r20, r20
    5282:	37 fd       	sbrc	r19, 7
    5284:	40 95       	com	r20
    5286:	54 2f       	mov	r21, r20
    5288:	89 81       	ldd	r24, Y+1	; 0x01
    528a:	9a 81       	ldd	r25, Y+2	; 0x02
    528c:	ab 81       	ldd	r26, Y+3	; 0x03
    528e:	bc 81       	ldd	r27, Y+4	; 0x04
    5290:	28 17       	cp	r18, r24
    5292:	39 07       	cpc	r19, r25
    5294:	4a 07       	cpc	r20, r26
    5296:	5b 07       	cpc	r21, r27
    5298:	74 f2       	brlt	.-100    	; 0x5236 <setStartPosition+0x5c>
    
    do
    {
        setCommandInt('J', y);   // sa J se zadaje vrednost Y koordinate
    529a:	2b 85       	ldd	r18, Y+11	; 0x0b
    529c:	3c 85       	ldd	r19, Y+12	; 0x0c
    529e:	8a e4       	ldi	r24, 0x4A	; 74
    52a0:	b9 01       	movw	r22, r18
    52a2:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <setCommandInt>
        i = readY();
    52a6:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <readY>
    52aa:	aa 27       	eor	r26, r26
    52ac:	97 fd       	sbrc	r25, 7
    52ae:	a0 95       	com	r26
    52b0:	ba 2f       	mov	r27, r26
    52b2:	89 83       	std	Y+1, r24	; 0x01
    52b4:	9a 83       	std	Y+2, r25	; 0x02
    52b6:	ab 83       	std	Y+3, r26	; 0x03
    52b8:	bc 83       	std	Y+4, r27	; 0x04
        
    }while((i < (y-1))  ||  (i > (y+1)));
    52ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    52bc:	9c 85       	ldd	r25, Y+12	; 0x0c
    52be:	01 97       	sbiw	r24, 0x01	; 1
    52c0:	9c 01       	movw	r18, r24
    52c2:	44 27       	eor	r20, r20
    52c4:	37 fd       	sbrc	r19, 7
    52c6:	40 95       	com	r20
    52c8:	54 2f       	mov	r21, r20
    52ca:	89 81       	ldd	r24, Y+1	; 0x01
    52cc:	9a 81       	ldd	r25, Y+2	; 0x02
    52ce:	ab 81       	ldd	r26, Y+3	; 0x03
    52d0:	bc 81       	ldd	r27, Y+4	; 0x04
    52d2:	82 17       	cp	r24, r18
    52d4:	93 07       	cpc	r25, r19
    52d6:	a4 07       	cpc	r26, r20
    52d8:	b5 07       	cpc	r27, r21
    52da:	fc f2       	brlt	.-66     	; 0x529a <setStartPosition+0xc0>
    52dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    52de:	9c 85       	ldd	r25, Y+12	; 0x0c
    52e0:	01 96       	adiw	r24, 0x01	; 1
    52e2:	9c 01       	movw	r18, r24
    52e4:	44 27       	eor	r20, r20
    52e6:	37 fd       	sbrc	r19, 7
    52e8:	40 95       	com	r20
    52ea:	54 2f       	mov	r21, r20
    52ec:	89 81       	ldd	r24, Y+1	; 0x01
    52ee:	9a 81       	ldd	r25, Y+2	; 0x02
    52f0:	ab 81       	ldd	r26, Y+3	; 0x03
    52f2:	bc 81       	ldd	r27, Y+4	; 0x04
    52f4:	28 17       	cp	r18, r24
    52f6:	39 07       	cpc	r19, r25
    52f8:	4a 07       	cpc	r20, r26
    52fa:	5b 07       	cpc	r21, r27
    52fc:	74 f2       	brlt	.-100    	; 0x529a <setStartPosition+0xc0>
    
    do
    {
       setCommandInt('K', ugao);
    52fe:	2d 85       	ldd	r18, Y+13	; 0x0d
    5300:	3e 85       	ldd	r19, Y+14	; 0x0e
    5302:	8b e4       	ldi	r24, 0x4B	; 75
    5304:	b9 01       	movw	r22, r18
    5306:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <setCommandInt>
       i = readUgaoInkrementi();
    530a:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <readUgaoInkrementi>
    530e:	dc 01       	movw	r26, r24
    5310:	cb 01       	movw	r24, r22
    5312:	89 83       	std	Y+1, r24	; 0x01
    5314:	9a 83       	std	Y+2, r25	; 0x02
    5316:	ab 83       	std	Y+3, r26	; 0x03
    5318:	bc 83       	std	Y+4, r27	; 0x04
       
    }while((i < (temp_ugao-1))  ||  (i > (temp_ugao + 1)));
    531a:	8d 81       	ldd	r24, Y+5	; 0x05
    531c:	9e 81       	ldd	r25, Y+6	; 0x06
    531e:	af 81       	ldd	r26, Y+7	; 0x07
    5320:	b8 85       	ldd	r27, Y+8	; 0x08
    5322:	9c 01       	movw	r18, r24
    5324:	ad 01       	movw	r20, r26
    5326:	21 50       	subi	r18, 0x01	; 1
    5328:	30 40       	sbci	r19, 0x00	; 0
    532a:	40 40       	sbci	r20, 0x00	; 0
    532c:	50 40       	sbci	r21, 0x00	; 0
    532e:	89 81       	ldd	r24, Y+1	; 0x01
    5330:	9a 81       	ldd	r25, Y+2	; 0x02
    5332:	ab 81       	ldd	r26, Y+3	; 0x03
    5334:	bc 81       	ldd	r27, Y+4	; 0x04
    5336:	82 17       	cp	r24, r18
    5338:	93 07       	cpc	r25, r19
    533a:	a4 07       	cpc	r26, r20
    533c:	b5 07       	cpc	r27, r21
    533e:	fc f2       	brlt	.-66     	; 0x52fe <setStartPosition+0x124>
    5340:	8d 81       	ldd	r24, Y+5	; 0x05
    5342:	9e 81       	ldd	r25, Y+6	; 0x06
    5344:	af 81       	ldd	r26, Y+7	; 0x07
    5346:	b8 85       	ldd	r27, Y+8	; 0x08
    5348:	9c 01       	movw	r18, r24
    534a:	ad 01       	movw	r20, r26
    534c:	2f 5f       	subi	r18, 0xFF	; 255
    534e:	3f 4f       	sbci	r19, 0xFF	; 255
    5350:	4f 4f       	sbci	r20, 0xFF	; 255
    5352:	5f 4f       	sbci	r21, 0xFF	; 255
    5354:	89 81       	ldd	r24, Y+1	; 0x01
    5356:	9a 81       	ldd	r25, Y+2	; 0x02
    5358:	ab 81       	ldd	r26, Y+3	; 0x03
    535a:	bc 81       	ldd	r27, Y+4	; 0x04
    535c:	28 17       	cp	r18, r24
    535e:	39 07       	cpc	r19, r25
    5360:	4a 07       	cpc	r20, r26
    5362:	5b 07       	cpc	r21, r27
    5364:	64 f2       	brlt	.-104    	; 0x52fe <setStartPosition+0x124>
       
}
    5366:	2e 96       	adiw	r28, 0x0e	; 14
    5368:	0f b6       	in	r0, 0x3f	; 63
    536a:	f8 94       	cli
    536c:	de bf       	out	0x3e, r29	; 62
    536e:	0f be       	out	0x3f, r0	; 63
    5370:	cd bf       	out	0x3d, r28	; 61
    5372:	cf 91       	pop	r28
    5374:	df 91       	pop	r29
    5376:	08 95       	ret

00005378 <absolut>:

//racunanje apsolutne vrednosti
int absolut(int number)
{
    5378:	df 93       	push	r29
    537a:	cf 93       	push	r28
    537c:	00 d0       	rcall	.+0      	; 0x537e <absolut+0x6>
    537e:	cd b7       	in	r28, 0x3d	; 61
    5380:	de b7       	in	r29, 0x3e	; 62
    5382:	9a 83       	std	Y+2, r25	; 0x02
    5384:	89 83       	std	Y+1, r24	; 0x01
    if(number < 0) 
    5386:	89 81       	ldd	r24, Y+1	; 0x01
    5388:	9a 81       	ldd	r25, Y+2	; 0x02
    538a:	99 23       	and	r25, r25
    538c:	3c f4       	brge	.+14     	; 0x539c <absolut+0x24>
        number *= -1;
    538e:	89 81       	ldd	r24, Y+1	; 0x01
    5390:	9a 81       	ldd	r25, Y+2	; 0x02
    5392:	90 95       	com	r25
    5394:	81 95       	neg	r24
    5396:	9f 4f       	sbci	r25, 0xFF	; 255
    5398:	9a 83       	std	Y+2, r25	; 0x02
    539a:	89 83       	std	Y+1, r24	; 0x01
    else
        number = number;
        
    return number;
    539c:	89 81       	ldd	r24, Y+1	; 0x01
    539e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    53a0:	0f 90       	pop	r0
    53a2:	0f 90       	pop	r0
    53a4:	cf 91       	pop	r28
    53a6:	df 91       	pop	r29
    53a8:	08 95       	ret

000053aa <racunanjeUgla>:

//funkcija za racunanje ugla ka novoj poziciji
int racunanjeUgla(int x, int y)
{
    53aa:	ef 92       	push	r14
    53ac:	ff 92       	push	r15
    53ae:	0f 93       	push	r16
    53b0:	1f 93       	push	r17
    53b2:	df 93       	push	r29
    53b4:	cf 93       	push	r28
    53b6:	cd b7       	in	r28, 0x3d	; 61
    53b8:	de b7       	in	r29, 0x3e	; 62
    53ba:	2a 97       	sbiw	r28, 0x0a	; 10
    53bc:	0f b6       	in	r0, 0x3f	; 63
    53be:	f8 94       	cli
    53c0:	de bf       	out	0x3e, r29	; 62
    53c2:	0f be       	out	0x3f, r0	; 63
    53c4:	cd bf       	out	0x3d, r28	; 61
    53c6:	98 87       	std	Y+8, r25	; 0x08
    53c8:	8f 83       	std	Y+7, r24	; 0x07
    53ca:	7a 87       	std	Y+10, r23	; 0x0a
    53cc:	69 87       	std	Y+9, r22	; 0x09
    int ugao_temp = 0;
    53ce:	1e 82       	std	Y+6, r1	; 0x06
    53d0:	1d 82       	std	Y+5, r1	; 0x05
    int x_trenutno;
    int y_trenutno;
    
    x_trenutno = readX();
    53d2:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <readX>
    53d6:	9c 83       	std	Y+4, r25	; 0x04
    53d8:	8b 83       	std	Y+3, r24	; 0x03
    y_trenutno = readY();
    53da:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <readY>
    53de:	9a 83       	std	Y+2, r25	; 0x02
    53e0:	89 83       	std	Y+1, r24	; 0x01
	
	if((x-x_trenutno)==0 && (y-y_trenutno)==0)
    53e2:	2f 81       	ldd	r18, Y+7	; 0x07
    53e4:	38 85       	ldd	r19, Y+8	; 0x08
    53e6:	8b 81       	ldd	r24, Y+3	; 0x03
    53e8:	9c 81       	ldd	r25, Y+4	; 0x04
    53ea:	28 17       	cp	r18, r24
    53ec:	39 07       	cpc	r19, r25
    53ee:	b1 f4       	brne	.+44     	; 0x541c <racunanjeUgla+0x72>
    53f0:	29 85       	ldd	r18, Y+9	; 0x09
    53f2:	3a 85       	ldd	r19, Y+10	; 0x0a
    53f4:	89 81       	ldd	r24, Y+1	; 0x01
    53f6:	9a 81       	ldd	r25, Y+2	; 0x02
    53f8:	28 17       	cp	r18, r24
    53fa:	39 07       	cpc	r19, r25
    53fc:	79 f4       	brne	.+30     	; 0x541c <racunanjeUgla+0x72>
	{
		Stop();
    53fe:	0e 94 30 27 	call	0x4e60	; 0x4e60 <Stop>
		LCDClear();
    5402:	81 e0       	ldi	r24, 0x01	; 1
    5404:	60 e0       	ldi	r22, 0x00	; 0
    5406:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCDByte>
		LCDWriteStringXY(0,0,"Nedefinisan atan");
    540a:	80 e0       	ldi	r24, 0x00	; 0
    540c:	60 e0       	ldi	r22, 0x00	; 0
    540e:	0e 94 14 27 	call	0x4e28	; 0x4e28 <LCDGotoXY>
    5412:	82 e5       	ldi	r24, 0x52	; 82
    5414:	91 e0       	ldi	r25, 0x01	; 1
    5416:	0e 94 6d 26 	call	0x4cda	; 0x4cda <LCDWriteString>
    541a:	ff cf       	rjmp	.-2      	; 0x541a <racunanjeUgla+0x70>
		while(1);	
	}		
    
    ugao_temp = (int)(atan2((x - x_trenutno), (y - y_trenutno))/(2 * PI) * 360);
    541c:	2f 81       	ldd	r18, Y+7	; 0x07
    541e:	38 85       	ldd	r19, Y+8	; 0x08
    5420:	8b 81       	ldd	r24, Y+3	; 0x03
    5422:	9c 81       	ldd	r25, Y+4	; 0x04
    5424:	a9 01       	movw	r20, r18
    5426:	48 1b       	sub	r20, r24
    5428:	59 0b       	sbc	r21, r25
    542a:	ca 01       	movw	r24, r20
    542c:	aa 27       	eor	r26, r26
    542e:	97 fd       	sbrc	r25, 7
    5430:	a0 95       	com	r26
    5432:	ba 2f       	mov	r27, r26
    5434:	bc 01       	movw	r22, r24
    5436:	cd 01       	movw	r24, r26
    5438:	0e 94 3f 3c 	call	0x787e	; 0x787e <__floatsisf>
    543c:	7b 01       	movw	r14, r22
    543e:	8c 01       	movw	r16, r24
    5440:	29 85       	ldd	r18, Y+9	; 0x09
    5442:	3a 85       	ldd	r19, Y+10	; 0x0a
    5444:	89 81       	ldd	r24, Y+1	; 0x01
    5446:	9a 81       	ldd	r25, Y+2	; 0x02
    5448:	a9 01       	movw	r20, r18
    544a:	48 1b       	sub	r20, r24
    544c:	59 0b       	sbc	r21, r25
    544e:	ca 01       	movw	r24, r20
    5450:	aa 27       	eor	r26, r26
    5452:	97 fd       	sbrc	r25, 7
    5454:	a0 95       	com	r26
    5456:	ba 2f       	mov	r27, r26
    5458:	bc 01       	movw	r22, r24
    545a:	cd 01       	movw	r24, r26
    545c:	0e 94 3f 3c 	call	0x787e	; 0x787e <__floatsisf>
    5460:	9b 01       	movw	r18, r22
    5462:	ac 01       	movw	r20, r24
    5464:	c8 01       	movw	r24, r16
    5466:	b7 01       	movw	r22, r14
    5468:	0e 94 4a 3b 	call	0x7694	; 0x7694 <atan2>
    546c:	dc 01       	movw	r26, r24
    546e:	cb 01       	movw	r24, r22
    5470:	bc 01       	movw	r22, r24
    5472:	cd 01       	movw	r24, r26
    5474:	2b ed       	ldi	r18, 0xDB	; 219
    5476:	3f e0       	ldi	r19, 0x0F	; 15
    5478:	49 ec       	ldi	r20, 0xC9	; 201
    547a:	50 e4       	ldi	r21, 0x40	; 64
    547c:	0e 94 a4 3b 	call	0x7748	; 0x7748 <__divsf3>
    5480:	dc 01       	movw	r26, r24
    5482:	cb 01       	movw	r24, r22
    5484:	bc 01       	movw	r22, r24
    5486:	cd 01       	movw	r24, r26
    5488:	20 e0       	ldi	r18, 0x00	; 0
    548a:	30 e0       	ldi	r19, 0x00	; 0
    548c:	44 eb       	ldi	r20, 0xB4	; 180
    548e:	53 e4       	ldi	r21, 0x43	; 67
    5490:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    5494:	dc 01       	movw	r26, r24
    5496:	cb 01       	movw	r24, r22
    5498:	bc 01       	movw	r22, r24
    549a:	cd 01       	movw	r24, r26
    549c:	0e 94 0c 3c 	call	0x7818	; 0x7818 <__fixsfsi>
    54a0:	dc 01       	movw	r26, r24
    54a2:	cb 01       	movw	r24, r22
    54a4:	9e 83       	std	Y+6, r25	; 0x06
    54a6:	8d 83       	std	Y+5, r24	; 0x05
    
    return ugao_temp;
    54a8:	8d 81       	ldd	r24, Y+5	; 0x05
    54aa:	9e 81       	ldd	r25, Y+6	; 0x06
}
    54ac:	2a 96       	adiw	r28, 0x0a	; 10
    54ae:	0f b6       	in	r0, 0x3f	; 63
    54b0:	f8 94       	cli
    54b2:	de bf       	out	0x3e, r29	; 62
    54b4:	0f be       	out	0x3f, r0	; 63
    54b6:	cd bf       	out	0x3d, r28	; 61
    54b8:	cf 91       	pop	r28
    54ba:	df 91       	pop	r29
    54bc:	1f 91       	pop	r17
    54be:	0f 91       	pop	r16
    54c0:	ff 90       	pop	r15
    54c2:	ef 90       	pop	r14
    54c4:	08 95       	ret

000054c6 <setUgaoNula>:

//funkcija za postavljanje ugla na nula
void setUgaoNula(void)
{
    54c6:	df 93       	push	r29
    54c8:	cf 93       	push	r28
    54ca:	00 d0       	rcall	.+0      	; 0x54cc <setUgaoNula+0x6>
    54cc:	00 d0       	rcall	.+0      	; 0x54ce <setUgaoNula+0x8>
    54ce:	cd b7       	in	r28, 0x3d	; 61
    54d0:	de b7       	in	r29, 0x3e	; 62

	long tmpT;
	
	setCommandInt('V',NORMALSPEED);
    54d2:	86 e5       	ldi	r24, 0x56	; 86
    54d4:	64 ec       	ldi	r22, 0xC4	; 196
    54d6:	79 e0       	ldi	r23, 0x09	; 9
    54d8:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <setCommandInt>
    setCommandInt('T', 0);
    54dc:	84 e5       	ldi	r24, 0x54	; 84
    54de:	60 e0       	ldi	r22, 0x00	; 0
    54e0:	70 e0       	ldi	r23, 0x00	; 0
    54e2:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <setCommandInt>
    do
    {
        tmpT = readUgaoInkrementi();
    54e6:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <readUgaoInkrementi>
    54ea:	dc 01       	movw	r26, r24
    54ec:	cb 01       	movw	r24, r22
    54ee:	89 83       	std	Y+1, r24	; 0x01
    54f0:	9a 83       	std	Y+2, r25	; 0x02
    54f2:	ab 83       	std	Y+3, r26	; 0x03
    54f4:	bc 83       	std	Y+4, r27	; 0x04
        if(tmpT > 56400)     
    54f6:	89 81       	ldd	r24, Y+1	; 0x01
    54f8:	9a 81       	ldd	r25, Y+2	; 0x02
    54fa:	ab 81       	ldd	r26, Y+3	; 0x03
    54fc:	bc 81       	ldd	r27, Y+4	; 0x04
    54fe:	81 35       	cpi	r24, 0x51	; 81
    5500:	2c ed       	ldi	r18, 0xDC	; 220
    5502:	92 07       	cpc	r25, r18
    5504:	20 e0       	ldi	r18, 0x00	; 0
    5506:	a2 07       	cpc	r26, r18
    5508:	20 e0       	ldi	r18, 0x00	; 0
    550a:	b2 07       	cpc	r27, r18
    550c:	c4 f4       	brge	.+48     	; 0x553e <setUgaoNula+0x78>
            break; 
    }while((tmpT < (- 500)) || (tmpT > 500));  //bilo 450
    550e:	89 81       	ldd	r24, Y+1	; 0x01
    5510:	9a 81       	ldd	r25, Y+2	; 0x02
    5512:	ab 81       	ldd	r26, Y+3	; 0x03
    5514:	bc 81       	ldd	r27, Y+4	; 0x04
    5516:	8c 30       	cpi	r24, 0x0C	; 12
    5518:	2e ef       	ldi	r18, 0xFE	; 254
    551a:	92 07       	cpc	r25, r18
    551c:	2f ef       	ldi	r18, 0xFF	; 255
    551e:	a2 07       	cpc	r26, r18
    5520:	2f ef       	ldi	r18, 0xFF	; 255
    5522:	b2 07       	cpc	r27, r18
    5524:	04 f3       	brlt	.-64     	; 0x54e6 <setUgaoNula+0x20>
    5526:	89 81       	ldd	r24, Y+1	; 0x01
    5528:	9a 81       	ldd	r25, Y+2	; 0x02
    552a:	ab 81       	ldd	r26, Y+3	; 0x03
    552c:	bc 81       	ldd	r27, Y+4	; 0x04
    552e:	85 3f       	cpi	r24, 0xF5	; 245
    5530:	21 e0       	ldi	r18, 0x01	; 1
    5532:	92 07       	cpc	r25, r18
    5534:	20 e0       	ldi	r18, 0x00	; 0
    5536:	a2 07       	cpc	r26, r18
    5538:	20 e0       	ldi	r18, 0x00	; 0
    553a:	b2 07       	cpc	r27, r18
    553c:	a4 f6       	brge	.-88     	; 0x54e6 <setUgaoNula+0x20>

}
    553e:	0f 90       	pop	r0
    5540:	0f 90       	pop	r0
    5542:	0f 90       	pop	r0
    5544:	0f 90       	pop	r0
    5546:	cf 91       	pop	r28
    5548:	df 91       	pop	r29
    554a:	08 95       	ret

0000554c <setUgao>:

// funkcija za postavljanje ugla teta
char setUgao(int angle)
{
    554c:	df 93       	push	r29
    554e:	cf 93       	push	r28
    5550:	cd b7       	in	r28, 0x3d	; 61
    5552:	de b7       	in	r29, 0x3e	; 62
    5554:	e5 97       	sbiw	r28, 0x35	; 53
    5556:	0f b6       	in	r0, 0x3f	; 63
    5558:	f8 94       	cli
    555a:	de bf       	out	0x3e, r29	; 62
    555c:	0f be       	out	0x3f, r0	; 63
    555e:	cd bf       	out	0x3d, r28	; 61
    5560:	9c ab       	std	Y+52, r25	; 0x34
    5562:	8b ab       	std	Y+51, r24	; 0x33
    long angleInc;
    long prevAngle;
	long ugao;
	
    
	setCommandInt('V',NORMALSPEED);
    5564:	86 e5       	ldi	r24, 0x56	; 86
    5566:	64 ec       	ldi	r22, 0xC4	; 196
    5568:	79 e0       	ldi	r23, 0x09	; 9
    556a:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <setCommandInt>
    if(firstTime) prevAngle = angle;
    556e:	80 91 51 01 	lds	r24, 0x0151
    5572:	88 23       	and	r24, r24
    5574:	51 f0       	breq	.+20     	; 0x558a <setUgao+0x3e>
    5576:	8b a9       	ldd	r24, Y+51	; 0x33
    5578:	9c a9       	ldd	r25, Y+52	; 0x34
    557a:	aa 27       	eor	r26, r26
    557c:	97 fd       	sbrc	r25, 7
    557e:	a0 95       	com	r26
    5580:	ba 2f       	mov	r27, r26
    5582:	89 a3       	std	Y+33, r24	; 0x21
    5584:	9a a3       	std	Y+34, r25	; 0x22
    5586:	ab a3       	std	Y+35, r26	; 0x23
    5588:	bc a3       	std	Y+36, r27	; 0x24
  
    if(prevAngle > 0)
    558a:	89 a1       	ldd	r24, Y+33	; 0x21
    558c:	9a a1       	ldd	r25, Y+34	; 0x22
    558e:	ab a1       	ldd	r26, Y+35	; 0x23
    5590:	bc a1       	ldd	r27, Y+36	; 0x24
    5592:	18 16       	cp	r1, r24
    5594:	19 06       	cpc	r1, r25
    5596:	1a 06       	cpc	r1, r26
    5598:	1b 06       	cpc	r1, r27
    559a:	ac f4       	brge	.+42     	; 0x55c6 <setUgao+0x7a>
    {
          prevAngle = angle;
    559c:	8b a9       	ldd	r24, Y+51	; 0x33
    559e:	9c a9       	ldd	r25, Y+52	; 0x34
    55a0:	aa 27       	eor	r26, r26
    55a2:	97 fd       	sbrc	r25, 7
    55a4:	a0 95       	com	r26
    55a6:	ba 2f       	mov	r27, r26
    55a8:	89 a3       	std	Y+33, r24	; 0x21
    55aa:	9a a3       	std	Y+34, r25	; 0x22
    55ac:	ab a3       	std	Y+35, r26	; 0x23
    55ae:	bc a3       	std	Y+36, r27	; 0x24
        if (angle < 0 ) 
    55b0:	8b a9       	ldd	r24, Y+51	; 0x33
    55b2:	9c a9       	ldd	r25, Y+52	; 0x34
    55b4:	99 23       	and	r25, r25
    55b6:	e4 f4       	brge	.+56     	; 0x55f0 <setUgao+0xa4>
            angle += 360;
    55b8:	8b a9       	ldd	r24, Y+51	; 0x33
    55ba:	9c a9       	ldd	r25, Y+52	; 0x34
    55bc:	88 59       	subi	r24, 0x98	; 152
    55be:	9e 4f       	sbci	r25, 0xFE	; 254
    55c0:	9c ab       	std	Y+52, r25	; 0x34
    55c2:	8b ab       	std	Y+51, r24	; 0x33
    55c4:	15 c0       	rjmp	.+42     	; 0x55f0 <setUgao+0xa4>
    }
    else
    {
          prevAngle = angle;
    55c6:	8b a9       	ldd	r24, Y+51	; 0x33
    55c8:	9c a9       	ldd	r25, Y+52	; 0x34
    55ca:	aa 27       	eor	r26, r26
    55cc:	97 fd       	sbrc	r25, 7
    55ce:	a0 95       	com	r26
    55d0:	ba 2f       	mov	r27, r26
    55d2:	89 a3       	std	Y+33, r24	; 0x21
    55d4:	9a a3       	std	Y+34, r25	; 0x22
    55d6:	ab a3       	std	Y+35, r26	; 0x23
    55d8:	bc a3       	std	Y+36, r27	; 0x24
          if (angle <= 0) 
    55da:	8b a9       	ldd	r24, Y+51	; 0x33
    55dc:	9c a9       	ldd	r25, Y+52	; 0x34
    55de:	18 16       	cp	r1, r24
    55e0:	19 06       	cpc	r1, r25
    55e2:	34 f0       	brlt	.+12     	; 0x55f0 <setUgao+0xa4>
            angle += 360;
    55e4:	8b a9       	ldd	r24, Y+51	; 0x33
    55e6:	9c a9       	ldd	r25, Y+52	; 0x34
    55e8:	88 59       	subi	r24, 0x98	; 152
    55ea:	9e 4f       	sbci	r25, 0xFE	; 254
    55ec:	9c ab       	std	Y+52, r25	; 0x34
    55ee:	8b ab       	std	Y+51, r24	; 0x33
    }
	
	ugao = readUgaoStepeni();
    55f0:	0e 94 8b 28 	call	0x5116	; 0x5116 <readUgaoStepeni>
    55f4:	aa 27       	eor	r26, r26
    55f6:	97 fd       	sbrc	r25, 7
    55f8:	a0 95       	com	r26
    55fa:	ba 2f       	mov	r27, r26
    55fc:	8d 8f       	std	Y+29, r24	; 0x1d
    55fe:	9e 8f       	std	Y+30, r25	; 0x1e
    5600:	af 8f       	std	Y+31, r26	; 0x1f
    5602:	b8 a3       	std	Y+32, r27	; 0x20
    setCommandInt('T', angle);
    5604:	2b a9       	ldd	r18, Y+51	; 0x33
    5606:	3c a9       	ldd	r19, Y+52	; 0x34
    5608:	84 e5       	ldi	r24, 0x54	; 84
    560a:	b9 01       	movw	r22, r18
    560c:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <setCommandInt>
    angleInc = (long)(((long)angle * PUNKRUG) / 360L);
    5610:	8b a9       	ldd	r24, Y+51	; 0x33
    5612:	9c a9       	ldd	r25, Y+52	; 0x34
    5614:	aa 27       	eor	r26, r26
    5616:	97 fd       	sbrc	r25, 7
    5618:	a0 95       	com	r26
    561a:	ba 2f       	mov	r27, r26
    561c:	2c eb       	ldi	r18, 0xBC	; 188
    561e:	3e ed       	ldi	r19, 0xDE	; 222
    5620:	40 e0       	ldi	r20, 0x00	; 0
    5622:	50 e0       	ldi	r21, 0x00	; 0
    5624:	bc 01       	movw	r22, r24
    5626:	cd 01       	movw	r24, r26
    5628:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <__mulsi3>
    562c:	dc 01       	movw	r26, r24
    562e:	cb 01       	movw	r24, r22
    5630:	28 e6       	ldi	r18, 0x68	; 104
    5632:	31 e0       	ldi	r19, 0x01	; 1
    5634:	40 e0       	ldi	r20, 0x00	; 0
    5636:	50 e0       	ldi	r21, 0x00	; 0
    5638:	bc 01       	movw	r22, r24
    563a:	cd 01       	movw	r24, r26
    563c:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <__divmodsi4>
    5640:	da 01       	movw	r26, r20
    5642:	c9 01       	movw	r24, r18
    5644:	8d a3       	std	Y+37, r24	; 0x25
    5646:	9e a3       	std	Y+38, r25	; 0x26
    5648:	af a3       	std	Y+39, r26	; 0x27
    564a:	b8 a7       	std	Y+40, r27	; 0x28
    
    count = 0;
    564c:	1a aa       	std	Y+50, r1	; 0x32
    564e:	19 aa       	std	Y+49, r1	; 0x31
    5650:	80 e0       	ldi	r24, 0x00	; 0
    5652:	90 e0       	ldi	r25, 0x00	; 0
    5654:	a0 ea       	ldi	r26, 0xA0	; 160
    5656:	b0 e4       	ldi	r27, 0x40	; 64
    5658:	89 8f       	std	Y+25, r24	; 0x19
    565a:	9a 8f       	std	Y+26, r25	; 0x1a
    565c:	ab 8f       	std	Y+27, r26	; 0x1b
    565e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5660:	69 8d       	ldd	r22, Y+25	; 0x19
    5662:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5664:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5666:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5668:	2d ec       	ldi	r18, 0xCD	; 205
    566a:	3c ec       	ldi	r19, 0xCC	; 204
    566c:	4c e2       	ldi	r20, 0x2C	; 44
    566e:	55 e4       	ldi	r21, 0x45	; 69
    5670:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    5674:	dc 01       	movw	r26, r24
    5676:	cb 01       	movw	r24, r22
    5678:	8d 8b       	std	Y+21, r24	; 0x15
    567a:	9e 8b       	std	Y+22, r25	; 0x16
    567c:	af 8b       	std	Y+23, r26	; 0x17
    567e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5680:	6d 89       	ldd	r22, Y+21	; 0x15
    5682:	7e 89       	ldd	r23, Y+22	; 0x16
    5684:	8f 89       	ldd	r24, Y+23	; 0x17
    5686:	98 8d       	ldd	r25, Y+24	; 0x18
    5688:	20 e0       	ldi	r18, 0x00	; 0
    568a:	30 e0       	ldi	r19, 0x00	; 0
    568c:	40 e8       	ldi	r20, 0x80	; 128
    568e:	5f e3       	ldi	r21, 0x3F	; 63
    5690:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    5694:	88 23       	and	r24, r24
    5696:	2c f4       	brge	.+10     	; 0x56a2 <setUgao+0x156>
		__ticks = 1;
    5698:	81 e0       	ldi	r24, 0x01	; 1
    569a:	90 e0       	ldi	r25, 0x00	; 0
    569c:	9c 8b       	std	Y+20, r25	; 0x14
    569e:	8b 8b       	std	Y+19, r24	; 0x13
    56a0:	3f c0       	rjmp	.+126    	; 0x5720 <setUgao+0x1d4>
	else if (__tmp > 65535)
    56a2:	6d 89       	ldd	r22, Y+21	; 0x15
    56a4:	7e 89       	ldd	r23, Y+22	; 0x16
    56a6:	8f 89       	ldd	r24, Y+23	; 0x17
    56a8:	98 8d       	ldd	r25, Y+24	; 0x18
    56aa:	20 e0       	ldi	r18, 0x00	; 0
    56ac:	3f ef       	ldi	r19, 0xFF	; 255
    56ae:	4f e7       	ldi	r20, 0x7F	; 127
    56b0:	57 e4       	ldi	r21, 0x47	; 71
    56b2:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    56b6:	18 16       	cp	r1, r24
    56b8:	4c f5       	brge	.+82     	; 0x570c <setUgao+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56ba:	69 8d       	ldd	r22, Y+25	; 0x19
    56bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    56be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    56c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    56c2:	20 e0       	ldi	r18, 0x00	; 0
    56c4:	30 e0       	ldi	r19, 0x00	; 0
    56c6:	40 e2       	ldi	r20, 0x20	; 32
    56c8:	51 e4       	ldi	r21, 0x41	; 65
    56ca:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    56ce:	dc 01       	movw	r26, r24
    56d0:	cb 01       	movw	r24, r22
    56d2:	bc 01       	movw	r22, r24
    56d4:	cd 01       	movw	r24, r26
    56d6:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    56da:	dc 01       	movw	r26, r24
    56dc:	cb 01       	movw	r24, r22
    56de:	9c 8b       	std	Y+20, r25	; 0x14
    56e0:	8b 8b       	std	Y+19, r24	; 0x13
    56e2:	0f c0       	rjmp	.+30     	; 0x5702 <setUgao+0x1b6>
    56e4:	84 e1       	ldi	r24, 0x14	; 20
    56e6:	91 e0       	ldi	r25, 0x01	; 1
    56e8:	9a 8b       	std	Y+18, r25	; 0x12
    56ea:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    56ec:	89 89       	ldd	r24, Y+17	; 0x11
    56ee:	9a 89       	ldd	r25, Y+18	; 0x12
    56f0:	01 97       	sbiw	r24, 0x01	; 1
    56f2:	f1 f7       	brne	.-4      	; 0x56f0 <setUgao+0x1a4>
    56f4:	9a 8b       	std	Y+18, r25	; 0x12
    56f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56f8:	8b 89       	ldd	r24, Y+19	; 0x13
    56fa:	9c 89       	ldd	r25, Y+20	; 0x14
    56fc:	01 97       	sbiw	r24, 0x01	; 1
    56fe:	9c 8b       	std	Y+20, r25	; 0x14
    5700:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5702:	8b 89       	ldd	r24, Y+19	; 0x13
    5704:	9c 89       	ldd	r25, Y+20	; 0x14
    5706:	00 97       	sbiw	r24, 0x00	; 0
    5708:	69 f7       	brne	.-38     	; 0x56e4 <setUgao+0x198>
    570a:	14 c0       	rjmp	.+40     	; 0x5734 <setUgao+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    570c:	6d 89       	ldd	r22, Y+21	; 0x15
    570e:	7e 89       	ldd	r23, Y+22	; 0x16
    5710:	8f 89       	ldd	r24, Y+23	; 0x17
    5712:	98 8d       	ldd	r25, Y+24	; 0x18
    5714:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    5718:	dc 01       	movw	r26, r24
    571a:	cb 01       	movw	r24, r22
    571c:	9c 8b       	std	Y+20, r25	; 0x14
    571e:	8b 8b       	std	Y+19, r24	; 0x13
    5720:	8b 89       	ldd	r24, Y+19	; 0x13
    5722:	9c 89       	ldd	r25, Y+20	; 0x14
    5724:	98 8b       	std	Y+16, r25	; 0x10
    5726:	8f 87       	std	Y+15, r24	; 0x0f
    5728:	8f 85       	ldd	r24, Y+15	; 0x0f
    572a:	98 89       	ldd	r25, Y+16	; 0x10
    572c:	01 97       	sbiw	r24, 0x01	; 1
    572e:	f1 f7       	brne	.-4      	; 0x572c <setUgao+0x1e0>
    5730:	98 8b       	std	Y+16, r25	; 0x10
    5732:	8f 87       	std	Y+15, r24	; 0x0f
    do
    {
        _delay_ms(5);
		
		tmpT = readUgaoInkrementi();
    5734:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <readUgaoInkrementi>
    5738:	dc 01       	movw	r26, r24
    573a:	cb 01       	movw	r24, r22
    573c:	89 a7       	std	Y+41, r24	; 0x29
    573e:	9a a7       	std	Y+42, r25	; 0x2a
    5740:	ab a7       	std	Y+43, r26	; 0x2b
    5742:	bc a7       	std	Y+44, r27	; 0x2c
        if (tmpT < 0) 
    5744:	89 a5       	ldd	r24, Y+41	; 0x29
    5746:	9a a5       	ldd	r25, Y+42	; 0x2a
    5748:	ab a5       	ldd	r26, Y+43	; 0x2b
    574a:	bc a5       	ldd	r27, Y+44	; 0x2c
    574c:	bb 23       	and	r27, r27
    574e:	64 f4       	brge	.+24     	; 0x5768 <setUgao+0x21c>
            tmpT += PUNKRUG;
    5750:	89 a5       	ldd	r24, Y+41	; 0x29
    5752:	9a a5       	ldd	r25, Y+42	; 0x2a
    5754:	ab a5       	ldd	r26, Y+43	; 0x2b
    5756:	bc a5       	ldd	r27, Y+44	; 0x2c
    5758:	84 54       	subi	r24, 0x44	; 68
    575a:	91 42       	sbci	r25, 0x21	; 33
    575c:	af 4f       	sbci	r26, 0xFF	; 255
    575e:	bf 4f       	sbci	r27, 0xFF	; 255
    5760:	89 a7       	std	Y+41, r24	; 0x29
    5762:	9a a7       	std	Y+42, r25	; 0x2a
    5764:	ab a7       	std	Y+43, r26	; 0x2b
    5766:	bc a7       	std	Y+44, r27	; 0x2c
        //zastita ako ne moze da dostigne ugao - vrati se u prethodni i okrene za 180 i pokusa da dodje u tacku u rikverc
        if((tmpT < (prevAngleInc + 50)) && (tmpT >(prevAngleInc - 50)))
    5768:	8d a5       	ldd	r24, Y+45	; 0x2d
    576a:	9e a5       	ldd	r25, Y+46	; 0x2e
    576c:	af a5       	ldd	r26, Y+47	; 0x2f
    576e:	b8 a9       	ldd	r27, Y+48	; 0x30
    5770:	9c 01       	movw	r18, r24
    5772:	ad 01       	movw	r20, r26
    5774:	2e 5c       	subi	r18, 0xCE	; 206
    5776:	3f 4f       	sbci	r19, 0xFF	; 255
    5778:	4f 4f       	sbci	r20, 0xFF	; 255
    577a:	5f 4f       	sbci	r21, 0xFF	; 255
    577c:	89 a5       	ldd	r24, Y+41	; 0x29
    577e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5780:	ab a5       	ldd	r26, Y+43	; 0x2b
    5782:	bc a5       	ldd	r27, Y+44	; 0x2c
    5784:	82 17       	cp	r24, r18
    5786:	93 07       	cpc	r25, r19
    5788:	a4 07       	cpc	r26, r20
    578a:	b5 07       	cpc	r27, r21
    578c:	8c f5       	brge	.+98     	; 0x57f0 <setUgao+0x2a4>
    578e:	8d a5       	ldd	r24, Y+45	; 0x2d
    5790:	9e a5       	ldd	r25, Y+46	; 0x2e
    5792:	af a5       	ldd	r26, Y+47	; 0x2f
    5794:	b8 a9       	ldd	r27, Y+48	; 0x30
    5796:	9c 01       	movw	r18, r24
    5798:	ad 01       	movw	r20, r26
    579a:	22 53       	subi	r18, 0x32	; 50
    579c:	30 40       	sbci	r19, 0x00	; 0
    579e:	40 40       	sbci	r20, 0x00	; 0
    57a0:	50 40       	sbci	r21, 0x00	; 0
    57a2:	89 a5       	ldd	r24, Y+41	; 0x29
    57a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    57a6:	ab a5       	ldd	r26, Y+43	; 0x2b
    57a8:	bc a5       	ldd	r27, Y+44	; 0x2c
    57aa:	28 17       	cp	r18, r24
    57ac:	39 07       	cpc	r19, r25
    57ae:	4a 07       	cpc	r20, r26
    57b0:	5b 07       	cpc	r21, r27
    57b2:	f4 f4       	brge	.+60     	; 0x57f0 <setUgao+0x2a4>
        {
            if(++count == 77)   //zasto je 2500??
    57b4:	89 a9       	ldd	r24, Y+49	; 0x31
    57b6:	9a a9       	ldd	r25, Y+50	; 0x32
    57b8:	01 96       	adiw	r24, 0x01	; 1
    57ba:	9a ab       	std	Y+50, r25	; 0x32
    57bc:	89 ab       	std	Y+49, r24	; 0x31
    57be:	89 a9       	ldd	r24, Y+49	; 0x31
    57c0:	9a a9       	ldd	r25, Y+50	; 0x32
    57c2:	8d 34       	cpi	r24, 0x4D	; 77
    57c4:	91 05       	cpc	r25, r1
    57c6:	a1 f4       	brne	.+40     	; 0x57f0 <setUgao+0x2a4>
            {
				if(ugao == 0)
    57c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    57ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    57cc:	af 8d       	ldd	r26, Y+31	; 0x1f
    57ce:	b8 a1       	ldd	r27, Y+32	; 0x20
    57d0:	00 97       	sbiw	r24, 0x00	; 0
    57d2:	a1 05       	cpc	r26, r1
    57d4:	b1 05       	cpc	r27, r1
    57d6:	29 f4       	brne	.+10     	; 0x57e2 <setUgao+0x296>
				{ 
					 setUgaoNula();
    57d8:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <setUgaoNula>
					 return 1;
    57dc:	81 e0       	ldi	r24, 0x01	; 1
    57de:	8d ab       	std	Y+53, r24	; 0x35
    57e0:	c2 c0       	rjmp	.+388    	; 0x5966 <setUgao+0x41a>
				}				 
                else 
				{
                    setUgao(ugao);
    57e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    57e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    57e6:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
					return 1;
    57ea:	81 e0       	ldi	r24, 0x01	; 1
    57ec:	8d ab       	std	Y+53, r24	; 0x35
    57ee:	bb c0       	rjmp	.+374    	; 0x5966 <setUgao+0x41a>
				
              break;
            }
        }  
		  
        prevAngleInc = tmpT;
    57f0:	89 a5       	ldd	r24, Y+41	; 0x29
    57f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    57f4:	ab a5       	ldd	r26, Y+43	; 0x2b
    57f6:	bc a5       	ldd	r27, Y+44	; 0x2c
    57f8:	8d a7       	std	Y+45, r24	; 0x2d
    57fa:	9e a7       	std	Y+46, r25	; 0x2e
    57fc:	af a7       	std	Y+47, r26	; 0x2f
    57fe:	b8 ab       	std	Y+48, r27	; 0x30
            
        if(firstTime)
    5800:	80 91 51 01 	lds	r24, 0x0151
    5804:	88 23       	and	r24, r24
    5806:	51 f0       	breq	.+20     	; 0x581c <setUgao+0x2d0>
        {
            tmpT = PUNKRUG;
    5808:	8c eb       	ldi	r24, 0xBC	; 188
    580a:	9e ed       	ldi	r25, 0xDE	; 222
    580c:	a0 e0       	ldi	r26, 0x00	; 0
    580e:	b0 e0       	ldi	r27, 0x00	; 0
    5810:	89 a7       	std	Y+41, r24	; 0x29
    5812:	9a a7       	std	Y+42, r25	; 0x2a
    5814:	ab a7       	std	Y+43, r26	; 0x2b
    5816:	bc a7       	std	Y+44, r27	; 0x2c
            firstTime = 0;
    5818:	10 92 51 01 	sts	0x0151, r1
        }
        
        
    }while((tmpT < (angleInc - 450)) || (tmpT > (angleInc + 450)));  //bilo 450
    581c:	8d a1       	ldd	r24, Y+37	; 0x25
    581e:	9e a1       	ldd	r25, Y+38	; 0x26
    5820:	af a1       	ldd	r26, Y+39	; 0x27
    5822:	b8 a5       	ldd	r27, Y+40	; 0x28
    5824:	9c 01       	movw	r18, r24
    5826:	ad 01       	movw	r20, r26
    5828:	22 5c       	subi	r18, 0xC2	; 194
    582a:	31 40       	sbci	r19, 0x01	; 1
    582c:	40 40       	sbci	r20, 0x00	; 0
    582e:	50 40       	sbci	r21, 0x00	; 0
    5830:	89 a5       	ldd	r24, Y+41	; 0x29
    5832:	9a a5       	ldd	r25, Y+42	; 0x2a
    5834:	ab a5       	ldd	r26, Y+43	; 0x2b
    5836:	bc a5       	ldd	r27, Y+44	; 0x2c
    5838:	82 17       	cp	r24, r18
    583a:	93 07       	cpc	r25, r19
    583c:	a4 07       	cpc	r26, r20
    583e:	b5 07       	cpc	r27, r21
    5840:	0c f4       	brge	.+2      	; 0x5844 <setUgao+0x2f8>
    5842:	06 cf       	rjmp	.-500    	; 0x5650 <setUgao+0x104>
    5844:	8d a1       	ldd	r24, Y+37	; 0x25
    5846:	9e a1       	ldd	r25, Y+38	; 0x26
    5848:	af a1       	ldd	r26, Y+39	; 0x27
    584a:	b8 a5       	ldd	r27, Y+40	; 0x28
    584c:	9c 01       	movw	r18, r24
    584e:	ad 01       	movw	r20, r26
    5850:	2e 53       	subi	r18, 0x3E	; 62
    5852:	3e 4f       	sbci	r19, 0xFE	; 254
    5854:	4f 4f       	sbci	r20, 0xFF	; 255
    5856:	5f 4f       	sbci	r21, 0xFF	; 255
    5858:	89 a5       	ldd	r24, Y+41	; 0x29
    585a:	9a a5       	ldd	r25, Y+42	; 0x2a
    585c:	ab a5       	ldd	r26, Y+43	; 0x2b
    585e:	bc a5       	ldd	r27, Y+44	; 0x2c
    5860:	28 17       	cp	r18, r24
    5862:	39 07       	cpc	r19, r25
    5864:	4a 07       	cpc	r20, r26
    5866:	5b 07       	cpc	r21, r27
    5868:	0c f4       	brge	.+2      	; 0x586c <setUgao+0x320>
    586a:	f2 ce       	rjmp	.-540    	; 0x5650 <setUgao+0x104>
    
    // za zastitu potrebno cuvati prethodni ugao
    if(!ev_angleNotReached) previousAngle = angle;
    586c:	80 91 6e 01 	lds	r24, 0x016E
    5870:	88 23       	and	r24, r24
    5872:	31 f4       	brne	.+12     	; 0x5880 <setUgao+0x334>
    5874:	8b a9       	ldd	r24, Y+51	; 0x33
    5876:	9c a9       	ldd	r25, Y+52	; 0x34
    5878:	90 93 70 01 	sts	0x0170, r25
    587c:	80 93 6f 01 	sts	0x016F, r24
    5880:	80 e0       	ldi	r24, 0x00	; 0
    5882:	90 e0       	ldi	r25, 0x00	; 0
    5884:	a8 ec       	ldi	r26, 0xC8	; 200
    5886:	b2 e4       	ldi	r27, 0x42	; 66
    5888:	8b 87       	std	Y+11, r24	; 0x0b
    588a:	9c 87       	std	Y+12, r25	; 0x0c
    588c:	ad 87       	std	Y+13, r26	; 0x0d
    588e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5890:	6b 85       	ldd	r22, Y+11	; 0x0b
    5892:	7c 85       	ldd	r23, Y+12	; 0x0c
    5894:	8d 85       	ldd	r24, Y+13	; 0x0d
    5896:	9e 85       	ldd	r25, Y+14	; 0x0e
    5898:	2d ec       	ldi	r18, 0xCD	; 205
    589a:	3c ec       	ldi	r19, 0xCC	; 204
    589c:	4c e2       	ldi	r20, 0x2C	; 44
    589e:	55 e4       	ldi	r21, 0x45	; 69
    58a0:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    58a4:	dc 01       	movw	r26, r24
    58a6:	cb 01       	movw	r24, r22
    58a8:	8f 83       	std	Y+7, r24	; 0x07
    58aa:	98 87       	std	Y+8, r25	; 0x08
    58ac:	a9 87       	std	Y+9, r26	; 0x09
    58ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    58b0:	6f 81       	ldd	r22, Y+7	; 0x07
    58b2:	78 85       	ldd	r23, Y+8	; 0x08
    58b4:	89 85       	ldd	r24, Y+9	; 0x09
    58b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    58b8:	20 e0       	ldi	r18, 0x00	; 0
    58ba:	30 e0       	ldi	r19, 0x00	; 0
    58bc:	40 e8       	ldi	r20, 0x80	; 128
    58be:	5f e3       	ldi	r21, 0x3F	; 63
    58c0:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    58c4:	88 23       	and	r24, r24
    58c6:	2c f4       	brge	.+10     	; 0x58d2 <setUgao+0x386>
		__ticks = 1;
    58c8:	81 e0       	ldi	r24, 0x01	; 1
    58ca:	90 e0       	ldi	r25, 0x00	; 0
    58cc:	9e 83       	std	Y+6, r25	; 0x06
    58ce:	8d 83       	std	Y+5, r24	; 0x05
    58d0:	3f c0       	rjmp	.+126    	; 0x5950 <setUgao+0x404>
	else if (__tmp > 65535)
    58d2:	6f 81       	ldd	r22, Y+7	; 0x07
    58d4:	78 85       	ldd	r23, Y+8	; 0x08
    58d6:	89 85       	ldd	r24, Y+9	; 0x09
    58d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    58da:	20 e0       	ldi	r18, 0x00	; 0
    58dc:	3f ef       	ldi	r19, 0xFF	; 255
    58de:	4f e7       	ldi	r20, 0x7F	; 127
    58e0:	57 e4       	ldi	r21, 0x47	; 71
    58e2:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    58e6:	18 16       	cp	r1, r24
    58e8:	4c f5       	brge	.+82     	; 0x593c <setUgao+0x3f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    58ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    58ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    58f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    58f2:	20 e0       	ldi	r18, 0x00	; 0
    58f4:	30 e0       	ldi	r19, 0x00	; 0
    58f6:	40 e2       	ldi	r20, 0x20	; 32
    58f8:	51 e4       	ldi	r21, 0x41	; 65
    58fa:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    58fe:	dc 01       	movw	r26, r24
    5900:	cb 01       	movw	r24, r22
    5902:	bc 01       	movw	r22, r24
    5904:	cd 01       	movw	r24, r26
    5906:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    590a:	dc 01       	movw	r26, r24
    590c:	cb 01       	movw	r24, r22
    590e:	9e 83       	std	Y+6, r25	; 0x06
    5910:	8d 83       	std	Y+5, r24	; 0x05
    5912:	0f c0       	rjmp	.+30     	; 0x5932 <setUgao+0x3e6>
    5914:	84 e1       	ldi	r24, 0x14	; 20
    5916:	91 e0       	ldi	r25, 0x01	; 1
    5918:	9c 83       	std	Y+4, r25	; 0x04
    591a:	8b 83       	std	Y+3, r24	; 0x03
    591c:	8b 81       	ldd	r24, Y+3	; 0x03
    591e:	9c 81       	ldd	r25, Y+4	; 0x04
    5920:	01 97       	sbiw	r24, 0x01	; 1
    5922:	f1 f7       	brne	.-4      	; 0x5920 <setUgao+0x3d4>
    5924:	9c 83       	std	Y+4, r25	; 0x04
    5926:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5928:	8d 81       	ldd	r24, Y+5	; 0x05
    592a:	9e 81       	ldd	r25, Y+6	; 0x06
    592c:	01 97       	sbiw	r24, 0x01	; 1
    592e:	9e 83       	std	Y+6, r25	; 0x06
    5930:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5932:	8d 81       	ldd	r24, Y+5	; 0x05
    5934:	9e 81       	ldd	r25, Y+6	; 0x06
    5936:	00 97       	sbiw	r24, 0x00	; 0
    5938:	69 f7       	brne	.-38     	; 0x5914 <setUgao+0x3c8>
    593a:	14 c0       	rjmp	.+40     	; 0x5964 <setUgao+0x418>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    593c:	6f 81       	ldd	r22, Y+7	; 0x07
    593e:	78 85       	ldd	r23, Y+8	; 0x08
    5940:	89 85       	ldd	r24, Y+9	; 0x09
    5942:	9a 85       	ldd	r25, Y+10	; 0x0a
    5944:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    5948:	dc 01       	movw	r26, r24
    594a:	cb 01       	movw	r24, r22
    594c:	9e 83       	std	Y+6, r25	; 0x06
    594e:	8d 83       	std	Y+5, r24	; 0x05
    5950:	8d 81       	ldd	r24, Y+5	; 0x05
    5952:	9e 81       	ldd	r25, Y+6	; 0x06
    5954:	9a 83       	std	Y+2, r25	; 0x02
    5956:	89 83       	std	Y+1, r24	; 0x01
    5958:	89 81       	ldd	r24, Y+1	; 0x01
    595a:	9a 81       	ldd	r25, Y+2	; 0x02
    595c:	01 97       	sbiw	r24, 0x01	; 1
    595e:	f1 f7       	brne	.-4      	; 0x595c <setUgao+0x410>
    5960:	9a 83       	std	Y+2, r25	; 0x02
    5962:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);
    return 0;
    5964:	1d aa       	std	Y+53, r1	; 0x35
    5966:	8d a9       	ldd	r24, Y+53	; 0x35
}
    5968:	e5 96       	adiw	r28, 0x35	; 53
    596a:	0f b6       	in	r0, 0x3f	; 63
    596c:	f8 94       	cli
    596e:	de bf       	out	0x3e, r29	; 62
    5970:	0f be       	out	0x3f, r0	; 63
    5972:	cd bf       	out	0x3d, r28	; 61
    5974:	cf 91       	pop	r28
    5976:	df 91       	pop	r29
    5978:	08 95       	ret

0000597a <gotoXY>:
extern unsigned char counting;	
extern unsigned char countingZwei;	
				
// funkcija koja postavlja robota u zeljenju poziciju x, y, prvo se racuna ugao pa se okrene u taj ugao a onda se racuna distanca pa ide tamo
char gotoXY(int X_zeljeno, int Y_zeljeno, signed char direction, int speed, int precision, char detection)
{
    597a:	ef 92       	push	r14
    597c:	ff 92       	push	r15
    597e:	0f 93       	push	r16
    5980:	1f 93       	push	r17
    5982:	df 93       	push	r29
    5984:	cf 93       	push	r28
    5986:	cd b7       	in	r28, 0x3d	; 61
    5988:	de b7       	in	r29, 0x3e	; 62
    598a:	e7 97       	sbiw	r28, 0x37	; 55
    598c:	0f b6       	in	r0, 0x3f	; 63
    598e:	f8 94       	cli
    5990:	de bf       	out	0x3e, r29	; 62
    5992:	0f be       	out	0x3f, r0	; 63
    5994:	cd bf       	out	0x3d, r28	; 61
    5996:	9e a7       	std	Y+46, r25	; 0x2e
    5998:	8d a7       	std	Y+45, r24	; 0x2d
    599a:	78 ab       	std	Y+48, r23	; 0x30
    599c:	6f a7       	std	Y+47, r22	; 0x2f
    599e:	49 ab       	std	Y+49, r20	; 0x31
    59a0:	3b ab       	std	Y+51, r19	; 0x33
    59a2:	2a ab       	std	Y+50, r18	; 0x32
    59a4:	1d ab       	std	Y+53, r17	; 0x35
    59a6:	0c ab       	std	Y+52, r16	; 0x34
    59a8:	ee aa       	std	Y+54, r14	; 0x36
    signed int x, previousX=0,zastita_X = 0;
    59aa:	1a a6       	std	Y+42, r1	; 0x2a
    59ac:	19 a6       	std	Y+41, r1	; 0x29
    59ae:	18 a6       	std	Y+40, r1	; 0x28
    59b0:	1f a2       	std	Y+39, r1	; 0x27
    signed int y, previousY=0,zastita_Y = 0;
    59b2:	1c a2       	std	Y+36, r1	; 0x24
    59b4:	1b a2       	std	Y+35, r1	; 0x23
    59b6:	1a a2       	std	Y+34, r1	; 0x22
    59b8:	19 a2       	std	Y+33, r1	; 0x21
    int angle;
    long xl;
    long yl;
    int teta_zeljen;
    long d_zeljena_mm;
    short accel = 40;
    59ba:	88 e2       	ldi	r24, 0x28	; 40
    59bc:	90 e0       	ldi	r25, 0x00	; 0
    59be:	98 8b       	std	Y+16, r25	; 0x10
    59c0:	8f 87       	std	Y+15, r24	; 0x0f
	
    countingZwei = 0;    
    59c2:	10 92 72 01 	sts	0x0172, r1
    //racunanje i podesavanje ugla
    if( direction == 1 )
    59c6:	89 a9       	ldd	r24, Y+49	; 0x31
    59c8:	81 30       	cpi	r24, 0x01	; 1
    59ca:	c9 f4       	brne	.+50     	; 0x59fe <gotoXY+0x84>
    {
        angle = racunanjeUgla(X_zeljeno, Y_zeljeno);
    59cc:	8d a5       	ldd	r24, Y+45	; 0x2d
    59ce:	9e a5       	ldd	r25, Y+46	; 0x2e
    59d0:	2f a5       	ldd	r18, Y+47	; 0x2f
    59d2:	38 a9       	ldd	r19, Y+48	; 0x30
    59d4:	b9 01       	movw	r22, r18
    59d6:	0e 94 d5 29 	call	0x53aa	; 0x53aa <racunanjeUgla>
    59da:	98 a3       	std	Y+32, r25	; 0x20
    59dc:	8f 8f       	std	Y+31, r24	; 0x1f
		/************************************************************************/
		/*	ako ne uspe da dostigne ugao, vrati se u prethodni i vraca da nije zavrsio kretnju, kao za sudar	                                                                   */
		/************************************************************************/
        if(angle == 0)		
    59de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    59e0:	98 a1       	ldd	r25, Y+32	; 0x20
    59e2:	00 97       	sbiw	r24, 0x00	; 0
    59e4:	19 f4       	brne	.+6      	; 0x59ec <gotoXY+0x72>
        {    
			setUgaoNula();
    59e6:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <setUgaoNula>
    59ea:	25 c0       	rjmp	.+74     	; 0x5a36 <gotoXY+0xbc>
		}		
        else 
		{
            if(setUgao(angle))
    59ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    59ee:	98 a1       	ldd	r25, Y+32	; 0x20
    59f0:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
    59f4:	88 23       	and	r24, r24
    59f6:	f9 f0       	breq	.+62     	; 0x5a36 <gotoXY+0xbc>
				return 1;			
    59f8:	21 e0       	ldi	r18, 0x01	; 1
    59fa:	2f ab       	std	Y+55, r18	; 0x37
    59fc:	ec c2       	rjmp	.+1496   	; 0x5fd6 <gotoXY+0x65c>
            ev_angleNotReached = 0; 
         }  */                         
    }
    else
    {
        angle = racunanjeUgla(X_zeljeno, Y_zeljeno);
    59fe:	8d a5       	ldd	r24, Y+45	; 0x2d
    5a00:	9e a5       	ldd	r25, Y+46	; 0x2e
    5a02:	2f a5       	ldd	r18, Y+47	; 0x2f
    5a04:	38 a9       	ldd	r19, Y+48	; 0x30
    5a06:	b9 01       	movw	r22, r18
    5a08:	0e 94 d5 29 	call	0x53aa	; 0x53aa <racunanjeUgla>
    5a0c:	98 a3       	std	Y+32, r25	; 0x20
    5a0e:	8f 8f       	std	Y+31, r24	; 0x1f
        if (angle == 180) 
    5a10:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5a12:	98 a1       	ldd	r25, Y+32	; 0x20
    5a14:	84 3b       	cpi	r24, 0xB4	; 180
    5a16:	91 05       	cpc	r25, r1
    5a18:	19 f4       	brne	.+6      	; 0x5a20 <gotoXY+0xa6>
            setUgaoNula();
    5a1a:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <setUgaoNula>
    5a1e:	0b c0       	rjmp	.+22     	; 0x5a36 <gotoXY+0xbc>
        else
		{ 
            if(setUgao(angle+180))
    5a20:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5a22:	98 a1       	ldd	r25, Y+32	; 0x20
    5a24:	8c 54       	subi	r24, 0x4C	; 76
    5a26:	9f 4f       	sbci	r25, 0xFF	; 255
    5a28:	0e 94 a6 2a 	call	0x554c	; 0x554c <setUgao>
    5a2c:	88 23       	and	r24, r24
    5a2e:	19 f0       	breq	.+6      	; 0x5a36 <gotoXY+0xbc>
				return 1;			
    5a30:	41 e0       	ldi	r20, 0x01	; 1
    5a32:	4f ab       	std	Y+55, r20	; 0x37
    5a34:	d0 c2       	rjmp	.+1440   	; 0x5fd6 <gotoXY+0x65c>
    5a36:	80 e0       	ldi	r24, 0x00	; 0
    5a38:	90 e0       	ldi	r25, 0x00	; 0
    5a3a:	a0 ea       	ldi	r26, 0xA0	; 160
    5a3c:	b0 e4       	ldi	r27, 0x40	; 64
    5a3e:	8b 87       	std	Y+11, r24	; 0x0b
    5a40:	9c 87       	std	Y+12, r25	; 0x0c
    5a42:	ad 87       	std	Y+13, r26	; 0x0d
    5a44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a46:	6b 85       	ldd	r22, Y+11	; 0x0b
    5a48:	7c 85       	ldd	r23, Y+12	; 0x0c
    5a4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a4e:	2d ec       	ldi	r18, 0xCD	; 205
    5a50:	3c ec       	ldi	r19, 0xCC	; 204
    5a52:	4c e2       	ldi	r20, 0x2C	; 44
    5a54:	55 e4       	ldi	r21, 0x45	; 69
    5a56:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    5a5a:	dc 01       	movw	r26, r24
    5a5c:	cb 01       	movw	r24, r22
    5a5e:	8f 83       	std	Y+7, r24	; 0x07
    5a60:	98 87       	std	Y+8, r25	; 0x08
    5a62:	a9 87       	std	Y+9, r26	; 0x09
    5a64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5a66:	6f 81       	ldd	r22, Y+7	; 0x07
    5a68:	78 85       	ldd	r23, Y+8	; 0x08
    5a6a:	89 85       	ldd	r24, Y+9	; 0x09
    5a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a6e:	20 e0       	ldi	r18, 0x00	; 0
    5a70:	30 e0       	ldi	r19, 0x00	; 0
    5a72:	40 e8       	ldi	r20, 0x80	; 128
    5a74:	5f e3       	ldi	r21, 0x3F	; 63
    5a76:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    5a7a:	88 23       	and	r24, r24
    5a7c:	2c f4       	brge	.+10     	; 0x5a88 <gotoXY+0x10e>
		__ticks = 1;
    5a7e:	81 e0       	ldi	r24, 0x01	; 1
    5a80:	90 e0       	ldi	r25, 0x00	; 0
    5a82:	9e 83       	std	Y+6, r25	; 0x06
    5a84:	8d 83       	std	Y+5, r24	; 0x05
    5a86:	3f c0       	rjmp	.+126    	; 0x5b06 <gotoXY+0x18c>
	else if (__tmp > 65535)
    5a88:	6f 81       	ldd	r22, Y+7	; 0x07
    5a8a:	78 85       	ldd	r23, Y+8	; 0x08
    5a8c:	89 85       	ldd	r24, Y+9	; 0x09
    5a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a90:	20 e0       	ldi	r18, 0x00	; 0
    5a92:	3f ef       	ldi	r19, 0xFF	; 255
    5a94:	4f e7       	ldi	r20, 0x7F	; 127
    5a96:	57 e4       	ldi	r21, 0x47	; 71
    5a98:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    5a9c:	18 16       	cp	r1, r24
    5a9e:	4c f5       	brge	.+82     	; 0x5af2 <gotoXY+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5aa0:	6b 85       	ldd	r22, Y+11	; 0x0b
    5aa2:	7c 85       	ldd	r23, Y+12	; 0x0c
    5aa4:	8d 85       	ldd	r24, Y+13	; 0x0d
    5aa6:	9e 85       	ldd	r25, Y+14	; 0x0e
    5aa8:	20 e0       	ldi	r18, 0x00	; 0
    5aaa:	30 e0       	ldi	r19, 0x00	; 0
    5aac:	40 e2       	ldi	r20, 0x20	; 32
    5aae:	51 e4       	ldi	r21, 0x41	; 65
    5ab0:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    5ab4:	dc 01       	movw	r26, r24
    5ab6:	cb 01       	movw	r24, r22
    5ab8:	bc 01       	movw	r22, r24
    5aba:	cd 01       	movw	r24, r26
    5abc:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    5ac0:	dc 01       	movw	r26, r24
    5ac2:	cb 01       	movw	r24, r22
    5ac4:	9e 83       	std	Y+6, r25	; 0x06
    5ac6:	8d 83       	std	Y+5, r24	; 0x05
    5ac8:	0f c0       	rjmp	.+30     	; 0x5ae8 <gotoXY+0x16e>
    5aca:	84 e1       	ldi	r24, 0x14	; 20
    5acc:	91 e0       	ldi	r25, 0x01	; 1
    5ace:	9c 83       	std	Y+4, r25	; 0x04
    5ad0:	8b 83       	std	Y+3, r24	; 0x03
    5ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    5ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    5ad6:	01 97       	sbiw	r24, 0x01	; 1
    5ad8:	f1 f7       	brne	.-4      	; 0x5ad6 <gotoXY+0x15c>
    5ada:	9c 83       	std	Y+4, r25	; 0x04
    5adc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ade:	8d 81       	ldd	r24, Y+5	; 0x05
    5ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    5ae2:	01 97       	sbiw	r24, 0x01	; 1
    5ae4:	9e 83       	std	Y+6, r25	; 0x06
    5ae6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    5aea:	9e 81       	ldd	r25, Y+6	; 0x06
    5aec:	00 97       	sbiw	r24, 0x00	; 0
    5aee:	69 f7       	brne	.-38     	; 0x5aca <gotoXY+0x150>
    5af0:	14 c0       	rjmp	.+40     	; 0x5b1a <gotoXY+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5af2:	6f 81       	ldd	r22, Y+7	; 0x07
    5af4:	78 85       	ldd	r23, Y+8	; 0x08
    5af6:	89 85       	ldd	r24, Y+9	; 0x09
    5af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    5afa:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    5afe:	dc 01       	movw	r26, r24
    5b00:	cb 01       	movw	r24, r22
    5b02:	9e 83       	std	Y+6, r25	; 0x06
    5b04:	8d 83       	std	Y+5, r24	; 0x05
    5b06:	8d 81       	ldd	r24, Y+5	; 0x05
    5b08:	9e 81       	ldd	r25, Y+6	; 0x06
    5b0a:	9a 83       	std	Y+2, r25	; 0x02
    5b0c:	89 83       	std	Y+1, r24	; 0x01
    5b0e:	89 81       	ldd	r24, Y+1	; 0x01
    5b10:	9a 81       	ldd	r25, Y+2	; 0x02
    5b12:	01 97       	sbiw	r24, 0x01	; 1
    5b14:	f1 f7       	brne	.-4      	; 0x5b12 <gotoXY+0x198>
    5b16:	9a 83       	std	Y+2, r25	; 0x02
    5b18:	89 83       	std	Y+1, r24	; 0x01
    
    do
    {
        _delay_ms(5);
		
        x = readX();
    5b1a:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <readX>
    5b1e:	9c a7       	std	Y+44, r25	; 0x2c
    5b20:	8b a7       	std	Y+43, r24	; 0x2b
        y = readY();
    5b22:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <readY>
    5b26:	9e a3       	std	Y+38, r25	; 0x26
    5b28:	8d a3       	std	Y+37, r24	; 0x25
		
        xl = X_zeljeno - x;
    5b2a:	2d a5       	ldd	r18, Y+45	; 0x2d
    5b2c:	3e a5       	ldd	r19, Y+46	; 0x2e
    5b2e:	8b a5       	ldd	r24, Y+43	; 0x2b
    5b30:	9c a5       	ldd	r25, Y+44	; 0x2c
    5b32:	a9 01       	movw	r20, r18
    5b34:	48 1b       	sub	r20, r24
    5b36:	59 0b       	sbc	r21, r25
    5b38:	ca 01       	movw	r24, r20
    5b3a:	aa 27       	eor	r26, r26
    5b3c:	97 fd       	sbrc	r25, 7
    5b3e:	a0 95       	com	r26
    5b40:	ba 2f       	mov	r27, r26
    5b42:	8b 8f       	std	Y+27, r24	; 0x1b
    5b44:	9c 8f       	std	Y+28, r25	; 0x1c
    5b46:	ad 8f       	std	Y+29, r26	; 0x1d
    5b48:	be 8f       	std	Y+30, r27	; 0x1e
        yl = Y_zeljeno - y;
    5b4a:	2f a5       	ldd	r18, Y+47	; 0x2f
    5b4c:	38 a9       	ldd	r19, Y+48	; 0x30
    5b4e:	8d a1       	ldd	r24, Y+37	; 0x25
    5b50:	9e a1       	ldd	r25, Y+38	; 0x26
    5b52:	a9 01       	movw	r20, r18
    5b54:	48 1b       	sub	r20, r24
    5b56:	59 0b       	sbc	r21, r25
    5b58:	ca 01       	movw	r24, r20
    5b5a:	aa 27       	eor	r26, r26
    5b5c:	97 fd       	sbrc	r25, 7
    5b5e:	a0 95       	com	r26
    5b60:	ba 2f       	mov	r27, r26
    5b62:	8f 8b       	std	Y+23, r24	; 0x17
    5b64:	98 8f       	std	Y+24, r25	; 0x18
    5b66:	a9 8f       	std	Y+25, r26	; 0x19
    5b68:	ba 8f       	std	Y+26, r27	; 0x1a
    
        d_zeljena_mm = (long)( sqrt(( xl * xl ) + ( yl * yl )));
    5b6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5b6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5b6e:	ad 8d       	ldd	r26, Y+29	; 0x1d
    5b70:	be 8d       	ldd	r27, Y+30	; 0x1e
    5b72:	2b 8d       	ldd	r18, Y+27	; 0x1b
    5b74:	3c 8d       	ldd	r19, Y+28	; 0x1c
    5b76:	4d 8d       	ldd	r20, Y+29	; 0x1d
    5b78:	5e 8d       	ldd	r21, Y+30	; 0x1e
    5b7a:	bc 01       	movw	r22, r24
    5b7c:	cd 01       	movw	r24, r26
    5b7e:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <__mulsi3>
    5b82:	7b 01       	movw	r14, r22
    5b84:	8c 01       	movw	r16, r24
    5b86:	8f 89       	ldd	r24, Y+23	; 0x17
    5b88:	98 8d       	ldd	r25, Y+24	; 0x18
    5b8a:	a9 8d       	ldd	r26, Y+25	; 0x19
    5b8c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    5b8e:	2f 89       	ldd	r18, Y+23	; 0x17
    5b90:	38 8d       	ldd	r19, Y+24	; 0x18
    5b92:	49 8d       	ldd	r20, Y+25	; 0x19
    5b94:	5a 8d       	ldd	r21, Y+26	; 0x1a
    5b96:	bc 01       	movw	r22, r24
    5b98:	cd 01       	movw	r24, r26
    5b9a:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <__mulsi3>
    5b9e:	dc 01       	movw	r26, r24
    5ba0:	cb 01       	movw	r24, r22
    5ba2:	8e 0d       	add	r24, r14
    5ba4:	9f 1d       	adc	r25, r15
    5ba6:	a0 1f       	adc	r26, r16
    5ba8:	b1 1f       	adc	r27, r17
    5baa:	bc 01       	movw	r22, r24
    5bac:	cd 01       	movw	r24, r26
    5bae:	0e 94 3f 3c 	call	0x787e	; 0x787e <__floatsisf>
    5bb2:	dc 01       	movw	r26, r24
    5bb4:	cb 01       	movw	r24, r22
    5bb6:	bc 01       	movw	r22, r24
    5bb8:	cd 01       	movw	r24, r26
    5bba:	0e 94 c5 3d 	call	0x7b8a	; 0x7b8a <sqrt>
    5bbe:	dc 01       	movw	r26, r24
    5bc0:	cb 01       	movw	r24, r22
    5bc2:	bc 01       	movw	r22, r24
    5bc4:	cd 01       	movw	r24, r26
    5bc6:	0e 94 0c 3c 	call	0x7818	; 0x7818 <__fixsfsi>
    5bca:	dc 01       	movw	r26, r24
    5bcc:	cb 01       	movw	r24, r22
    5bce:	89 8b       	std	Y+17, r24	; 0x11
    5bd0:	9a 8b       	std	Y+18, r25	; 0x12
    5bd2:	ab 8b       	std	Y+19, r26	; 0x13
    5bd4:	bc 8b       	std	Y+20, r27	; 0x14
        d_zeljena_mm *= direction;
    5bd6:	89 a9       	ldd	r24, Y+49	; 0x31
    5bd8:	28 2f       	mov	r18, r24
    5bda:	33 27       	eor	r19, r19
    5bdc:	27 fd       	sbrc	r18, 7
    5bde:	30 95       	com	r19
    5be0:	43 2f       	mov	r20, r19
    5be2:	53 2f       	mov	r21, r19
    5be4:	89 89       	ldd	r24, Y+17	; 0x11
    5be6:	9a 89       	ldd	r25, Y+18	; 0x12
    5be8:	ab 89       	ldd	r26, Y+19	; 0x13
    5bea:	bc 89       	ldd	r27, Y+20	; 0x14
    5bec:	bc 01       	movw	r22, r24
    5bee:	cd 01       	movw	r24, r26
    5bf0:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <__mulsi3>
    5bf4:	dc 01       	movw	r26, r24
    5bf6:	cb 01       	movw	r24, r22
    5bf8:	89 8b       	std	Y+17, r24	; 0x11
    5bfa:	9a 8b       	std	Y+18, r25	; 0x12
    5bfc:	ab 8b       	std	Y+19, r26	; 0x13
    5bfe:	bc 8b       	std	Y+20, r27	; 0x14
    
        if(absolut(d_zeljena_mm) < precision) 
    5c00:	89 89       	ldd	r24, Y+17	; 0x11
    5c02:	9a 89       	ldd	r25, Y+18	; 0x12
    5c04:	0e 94 bc 29 	call	0x5378	; 0x5378 <absolut>
    5c08:	9c 01       	movw	r18, r24
    5c0a:	8c a9       	ldd	r24, Y+52	; 0x34
    5c0c:	9d a9       	ldd	r25, Y+53	; 0x35
    5c0e:	28 17       	cp	r18, r24
    5c10:	39 07       	cpc	r19, r25
    5c12:	0c f4       	brge	.+2      	; 0x5c16 <gotoXY+0x29c>
    5c14:	dd c1       	rjmp	.+954    	; 0x5fd0 <gotoXY+0x656>
            break; 
     
        setCommandInt('V', speed);
    5c16:	2a a9       	ldd	r18, Y+50	; 0x32
    5c18:	3b a9       	ldd	r19, Y+51	; 0x33
    5c1a:	86 e5       	ldi	r24, 0x56	; 86
    5c1c:	b9 01       	movw	r22, r18
    5c1e:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <setCommandInt>
    
        //podesavanje ubrzanja
        setCommandShort('A', accel);
    5c22:	2f 85       	ldd	r18, Y+15	; 0x0f
    5c24:	38 89       	ldd	r19, Y+16	; 0x10
    5c26:	81 e4       	ldi	r24, 0x41	; 65
    5c28:	b9 01       	movw	r22, r18
    5c2a:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <setCommandShort>
    
        // postavljanje distance
        setCommandInt('D', d_zeljena_mm);
    5c2e:	29 89       	ldd	r18, Y+17	; 0x11
    5c30:	3a 89       	ldd	r19, Y+18	; 0x12
    5c32:	84 e4       	ldi	r24, 0x44	; 68
    5c34:	b9 01       	movw	r22, r18
    5c36:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <setCommandInt>
		
		/************************************************************************/
		/*			TESTIRATI!!!                                                */
		/************************************************************************/
		
		if(protocniDelayZwei(1000))
    5c3a:	68 ee       	ldi	r22, 0xE8	; 232
    5c3c:	73 e0       	ldi	r23, 0x03	; 3
    5c3e:	80 e0       	ldi	r24, 0x00	; 0
    5c40:	90 e0       	ldi	r25, 0x00	; 0
    5c42:	0e 94 5a 35 	call	0x6ab4	; 0x6ab4 <protocniDelayZwei>
    5c46:	88 23       	and	r24, r24
    5c48:	09 f4       	brne	.+2      	; 0x5c4c <gotoXY+0x2d2>
    5c4a:	5a c0       	rjmp	.+180    	; 0x5d00 <gotoXY+0x386>
		{
			
			if(((x < zastita_X + 2) && (x > zastita_X - 2)) && (y < zastita_Y + 2) && (y > zastita_Y - 2))
    5c4c:	8f a1       	ldd	r24, Y+39	; 0x27
    5c4e:	98 a5       	ldd	r25, Y+40	; 0x28
    5c50:	9c 01       	movw	r18, r24
    5c52:	2e 5f       	subi	r18, 0xFE	; 254
    5c54:	3f 4f       	sbci	r19, 0xFF	; 255
    5c56:	8b a5       	ldd	r24, Y+43	; 0x2b
    5c58:	9c a5       	ldd	r25, Y+44	; 0x2c
    5c5a:	82 17       	cp	r24, r18
    5c5c:	93 07       	cpc	r25, r19
    5c5e:	0c f0       	brlt	.+2      	; 0x5c62 <gotoXY+0x2e8>
    5c60:	45 c0       	rjmp	.+138    	; 0x5cec <gotoXY+0x372>
    5c62:	8f a1       	ldd	r24, Y+39	; 0x27
    5c64:	98 a5       	ldd	r25, Y+40	; 0x28
    5c66:	9c 01       	movw	r18, r24
    5c68:	22 50       	subi	r18, 0x02	; 2
    5c6a:	30 40       	sbci	r19, 0x00	; 0
    5c6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    5c6e:	9c a5       	ldd	r25, Y+44	; 0x2c
    5c70:	28 17       	cp	r18, r24
    5c72:	39 07       	cpc	r19, r25
    5c74:	dc f5       	brge	.+118    	; 0x5cec <gotoXY+0x372>
    5c76:	89 a1       	ldd	r24, Y+33	; 0x21
    5c78:	9a a1       	ldd	r25, Y+34	; 0x22
    5c7a:	9c 01       	movw	r18, r24
    5c7c:	2e 5f       	subi	r18, 0xFE	; 254
    5c7e:	3f 4f       	sbci	r19, 0xFF	; 255
    5c80:	8d a1       	ldd	r24, Y+37	; 0x25
    5c82:	9e a1       	ldd	r25, Y+38	; 0x26
    5c84:	82 17       	cp	r24, r18
    5c86:	93 07       	cpc	r25, r19
    5c88:	8c f5       	brge	.+98     	; 0x5cec <gotoXY+0x372>
    5c8a:	89 a1       	ldd	r24, Y+33	; 0x21
    5c8c:	9a a1       	ldd	r25, Y+34	; 0x22
    5c8e:	9c 01       	movw	r18, r24
    5c90:	22 50       	subi	r18, 0x02	; 2
    5c92:	30 40       	sbci	r19, 0x00	; 0
    5c94:	8d a1       	ldd	r24, Y+37	; 0x25
    5c96:	9e a1       	ldd	r25, Y+38	; 0x26
    5c98:	28 17       	cp	r18, r24
    5c9a:	39 07       	cpc	r19, r25
    5c9c:	3c f5       	brge	.+78     	; 0x5cec <gotoXY+0x372>
			{
				 Stop();
    5c9e:	0e 94 30 27 	call	0x4e60	; 0x4e60 <Stop>
				 LCDClear();
    5ca2:	81 e0       	ldi	r24, 0x01	; 1
    5ca4:	60 e0       	ldi	r22, 0x00	; 0
    5ca6:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCDByte>
				 LCDWriteStringXY(0,0,"COORD FAIL");
    5caa:	80 e0       	ldi	r24, 0x00	; 0
    5cac:	60 e0       	ldi	r22, 0x00	; 0
    5cae:	0e 94 14 27 	call	0x4e28	; 0x4e28 <LCDGotoXY>
    5cb2:	83 e6       	ldi	r24, 0x63	; 99
    5cb4:	91 e0       	ldi	r25, 0x01	; 1
    5cb6:	0e 94 6d 26 	call	0x4cda	; 0x4cda <LCDWriteString>
				 pauza_ms(50);
    5cba:	62 e3       	ldi	r22, 0x32	; 50
    5cbc:	70 e0       	ldi	r23, 0x00	; 0
    5cbe:	80 e0       	ldi	r24, 0x00	; 0
    5cc0:	90 e0       	ldi	r25, 0x00	; 0
    5cc2:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
				 
				 moveOnDirection(120,direction*(-1),NORMALSPEED,ALL_DETECTIONS_OFF,0);
    5cc6:	89 a9       	ldd	r24, Y+49	; 0x31
    5cc8:	99 27       	eor	r25, r25
    5cca:	87 fd       	sbrc	r24, 7
    5ccc:	90 95       	com	r25
    5cce:	22 27       	eor	r18, r18
    5cd0:	33 27       	eor	r19, r19
    5cd2:	28 1b       	sub	r18, r24
    5cd4:	39 0b       	sbc	r19, r25
    5cd6:	88 e7       	ldi	r24, 0x78	; 120
    5cd8:	90 e0       	ldi	r25, 0x00	; 0
    5cda:	b9 01       	movw	r22, r18
    5cdc:	44 ec       	ldi	r20, 0xC4	; 196
    5cde:	59 e0       	ldi	r21, 0x09	; 9
    5ce0:	23 e0       	ldi	r18, 0x03	; 3
    5ce2:	00 e0       	ldi	r16, 0x00	; 0
    5ce4:	10 e0       	ldi	r17, 0x00	; 0
    5ce6:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
    5cea:	ff cf       	rjmp	.-2      	; 0x5cea <gotoXY+0x370>
				 while(1);
				 return 1;
			}
			
			zastita_X = x;
    5cec:	8b a5       	ldd	r24, Y+43	; 0x2b
    5cee:	9c a5       	ldd	r25, Y+44	; 0x2c
    5cf0:	98 a7       	std	Y+40, r25	; 0x28
    5cf2:	8f a3       	std	Y+39, r24	; 0x27
			zastita_Y = y;	
    5cf4:	8d a1       	ldd	r24, Y+37	; 0x25
    5cf6:	9e a1       	ldd	r25, Y+38	; 0x26
    5cf8:	9a a3       	std	Y+34, r25	; 0x22
    5cfa:	89 a3       	std	Y+33, r24	; 0x21
			
			writeTime();
    5cfc:	0e 94 68 04 	call	0x8d0	; 0x8d0 <writeTime>
                break;
            }
        }
        */
        // korekcija ugla samo ako je robot na vecoj udaljenosti od 10 cm od zeljene tacke, ako je blize ne vrsi se korekcija ugla
        if( direction == 1)
    5d00:	89 a9       	ldd	r24, Y+49	; 0x31
    5d02:	81 30       	cpi	r24, 0x01	; 1
    5d04:	09 f0       	breq	.+2      	; 0x5d08 <gotoXY+0x38e>
    5d06:	61 c0       	rjmp	.+194    	; 0x5dca <gotoXY+0x450>
        {
            if( d_zeljena_mm > 100 )
    5d08:	89 89       	ldd	r24, Y+17	; 0x11
    5d0a:	9a 89       	ldd	r25, Y+18	; 0x12
    5d0c:	ab 89       	ldd	r26, Y+19	; 0x13
    5d0e:	bc 89       	ldd	r27, Y+20	; 0x14
    5d10:	85 36       	cpi	r24, 0x65	; 101
    5d12:	91 05       	cpc	r25, r1
    5d14:	a1 05       	cpc	r26, r1
    5d16:	b1 05       	cpc	r27, r1
    5d18:	0c f4       	brge	.+2      	; 0x5d1c <gotoXY+0x3a2>
    5d1a:	57 c0       	rjmp	.+174    	; 0x5dca <gotoXY+0x450>
            {
                /************************************************************************/
				/*	DOBRO TESTIRATI!!!                                                  */
				/************************************************************************/
				
				if((xl)==0 && (yl)==0)
    5d1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5d1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5d20:	ad 8d       	ldd	r26, Y+29	; 0x1d
    5d22:	be 8d       	ldd	r27, Y+30	; 0x1e
    5d24:	00 97       	sbiw	r24, 0x00	; 0
    5d26:	a1 05       	cpc	r26, r1
    5d28:	b1 05       	cpc	r27, r1
    5d2a:	b9 f4       	brne	.+46     	; 0x5d5a <gotoXY+0x3e0>
    5d2c:	8f 89       	ldd	r24, Y+23	; 0x17
    5d2e:	98 8d       	ldd	r25, Y+24	; 0x18
    5d30:	a9 8d       	ldd	r26, Y+25	; 0x19
    5d32:	ba 8d       	ldd	r27, Y+26	; 0x1a
    5d34:	00 97       	sbiw	r24, 0x00	; 0
    5d36:	a1 05       	cpc	r26, r1
    5d38:	b1 05       	cpc	r27, r1
    5d3a:	79 f4       	brne	.+30     	; 0x5d5a <gotoXY+0x3e0>
				{
					Stop();
    5d3c:	0e 94 30 27 	call	0x4e60	; 0x4e60 <Stop>
					LCDClear();
    5d40:	81 e0       	ldi	r24, 0x01	; 1
    5d42:	60 e0       	ldi	r22, 0x00	; 0
    5d44:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCDByte>
					LCDWriteStringXY(0,0,"Nedefinisan atan");	
    5d48:	80 e0       	ldi	r24, 0x00	; 0
    5d4a:	60 e0       	ldi	r22, 0x00	; 0
    5d4c:	0e 94 14 27 	call	0x4e28	; 0x4e28 <LCDGotoXY>
    5d50:	82 e5       	ldi	r24, 0x52	; 82
    5d52:	91 e0       	ldi	r25, 0x01	; 1
    5d54:	0e 94 6d 26 	call	0x4cda	; 0x4cda <LCDWriteString>
    5d58:	ff cf       	rjmp	.-2      	; 0x5d58 <gotoXY+0x3de>
					while(1);
				}				
				
				teta_zeljen = (int)(atan2(xl, yl) / (2 * PI) * 360);
    5d5a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    5d5c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    5d5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5d60:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5d62:	0e 94 3f 3c 	call	0x787e	; 0x787e <__floatsisf>
    5d66:	7b 01       	movw	r14, r22
    5d68:	8c 01       	movw	r16, r24
    5d6a:	6f 89       	ldd	r22, Y+23	; 0x17
    5d6c:	78 8d       	ldd	r23, Y+24	; 0x18
    5d6e:	89 8d       	ldd	r24, Y+25	; 0x19
    5d70:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5d72:	0e 94 3f 3c 	call	0x787e	; 0x787e <__floatsisf>
    5d76:	9b 01       	movw	r18, r22
    5d78:	ac 01       	movw	r20, r24
    5d7a:	c8 01       	movw	r24, r16
    5d7c:	b7 01       	movw	r22, r14
    5d7e:	0e 94 4a 3b 	call	0x7694	; 0x7694 <atan2>
    5d82:	dc 01       	movw	r26, r24
    5d84:	cb 01       	movw	r24, r22
    5d86:	bc 01       	movw	r22, r24
    5d88:	cd 01       	movw	r24, r26
    5d8a:	2b ed       	ldi	r18, 0xDB	; 219
    5d8c:	3f e0       	ldi	r19, 0x0F	; 15
    5d8e:	49 ec       	ldi	r20, 0xC9	; 201
    5d90:	50 e4       	ldi	r21, 0x40	; 64
    5d92:	0e 94 a4 3b 	call	0x7748	; 0x7748 <__divsf3>
    5d96:	dc 01       	movw	r26, r24
    5d98:	cb 01       	movw	r24, r22
    5d9a:	bc 01       	movw	r22, r24
    5d9c:	cd 01       	movw	r24, r26
    5d9e:	20 e0       	ldi	r18, 0x00	; 0
    5da0:	30 e0       	ldi	r19, 0x00	; 0
    5da2:	44 eb       	ldi	r20, 0xB4	; 180
    5da4:	53 e4       	ldi	r21, 0x43	; 67
    5da6:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    5daa:	dc 01       	movw	r26, r24
    5dac:	cb 01       	movw	r24, r22
    5dae:	bc 01       	movw	r22, r24
    5db0:	cd 01       	movw	r24, r26
    5db2:	0e 94 0c 3c 	call	0x7818	; 0x7818 <__fixsfsi>
    5db6:	dc 01       	movw	r26, r24
    5db8:	cb 01       	movw	r24, r22
    5dba:	9e 8b       	std	Y+22, r25	; 0x16
    5dbc:	8d 8b       	std	Y+21, r24	; 0x15
                setCommandInt('T', teta_zeljen);
    5dbe:	2d 89       	ldd	r18, Y+21	; 0x15
    5dc0:	3e 89       	ldd	r19, Y+22	; 0x16
    5dc2:	84 e5       	ldi	r24, 0x54	; 84
    5dc4:	b9 01       	movw	r22, r18
    5dc6:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <setCommandInt>
            }
        }

        if( direction == -1)
    5dca:	89 a9       	ldd	r24, Y+49	; 0x31
    5dcc:	8f 3f       	cpi	r24, 0xFF	; 255
    5dce:	09 f0       	breq	.+2      	; 0x5dd2 <gotoXY+0x458>
    5dd0:	6a c0       	rjmp	.+212    	; 0x5ea6 <gotoXY+0x52c>
        {
            if( d_zeljena_mm < -100)
    5dd2:	89 89       	ldd	r24, Y+17	; 0x11
    5dd4:	9a 89       	ldd	r25, Y+18	; 0x12
    5dd6:	ab 89       	ldd	r26, Y+19	; 0x13
    5dd8:	bc 89       	ldd	r27, Y+20	; 0x14
    5dda:	8c 39       	cpi	r24, 0x9C	; 156
    5ddc:	5f ef       	ldi	r21, 0xFF	; 255
    5dde:	95 07       	cpc	r25, r21
    5de0:	5f ef       	ldi	r21, 0xFF	; 255
    5de2:	a5 07       	cpc	r26, r21
    5de4:	5f ef       	ldi	r21, 0xFF	; 255
    5de6:	b5 07       	cpc	r27, r21
    5de8:	0c f0       	brlt	.+2      	; 0x5dec <gotoXY+0x472>
    5dea:	5d c0       	rjmp	.+186    	; 0x5ea6 <gotoXY+0x52c>
            {
				/************************************************************************/
				/*	DOBRO TESTIRATI!!!                                                  */
				/************************************************************************/
				
				if((xl)==0 && (yl)==0)
    5dec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5dee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5df0:	ad 8d       	ldd	r26, Y+29	; 0x1d
    5df2:	be 8d       	ldd	r27, Y+30	; 0x1e
    5df4:	00 97       	sbiw	r24, 0x00	; 0
    5df6:	a1 05       	cpc	r26, r1
    5df8:	b1 05       	cpc	r27, r1
    5dfa:	b9 f4       	brne	.+46     	; 0x5e2a <gotoXY+0x4b0>
    5dfc:	8f 89       	ldd	r24, Y+23	; 0x17
    5dfe:	98 8d       	ldd	r25, Y+24	; 0x18
    5e00:	a9 8d       	ldd	r26, Y+25	; 0x19
    5e02:	ba 8d       	ldd	r27, Y+26	; 0x1a
    5e04:	00 97       	sbiw	r24, 0x00	; 0
    5e06:	a1 05       	cpc	r26, r1
    5e08:	b1 05       	cpc	r27, r1
    5e0a:	79 f4       	brne	.+30     	; 0x5e2a <gotoXY+0x4b0>
				{
					Stop();
    5e0c:	0e 94 30 27 	call	0x4e60	; 0x4e60 <Stop>
					LCDClear();
    5e10:	81 e0       	ldi	r24, 0x01	; 1
    5e12:	60 e0       	ldi	r22, 0x00	; 0
    5e14:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCDByte>
					LCDWriteStringXY(0,0,"Nedefinisan atan");	
    5e18:	80 e0       	ldi	r24, 0x00	; 0
    5e1a:	60 e0       	ldi	r22, 0x00	; 0
    5e1c:	0e 94 14 27 	call	0x4e28	; 0x4e28 <LCDGotoXY>
    5e20:	82 e5       	ldi	r24, 0x52	; 82
    5e22:	91 e0       	ldi	r25, 0x01	; 1
    5e24:	0e 94 6d 26 	call	0x4cda	; 0x4cda <LCDWriteString>
    5e28:	ff cf       	rjmp	.-2      	; 0x5e28 <gotoXY+0x4ae>
					while(1);
				}	
				
				teta_zeljen = (int)(atan2(xl, yl) / (2 * PI) * 360);
    5e2a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    5e2c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    5e2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5e30:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5e32:	0e 94 3f 3c 	call	0x787e	; 0x787e <__floatsisf>
    5e36:	7b 01       	movw	r14, r22
    5e38:	8c 01       	movw	r16, r24
    5e3a:	6f 89       	ldd	r22, Y+23	; 0x17
    5e3c:	78 8d       	ldd	r23, Y+24	; 0x18
    5e3e:	89 8d       	ldd	r24, Y+25	; 0x19
    5e40:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5e42:	0e 94 3f 3c 	call	0x787e	; 0x787e <__floatsisf>
    5e46:	9b 01       	movw	r18, r22
    5e48:	ac 01       	movw	r20, r24
    5e4a:	c8 01       	movw	r24, r16
    5e4c:	b7 01       	movw	r22, r14
    5e4e:	0e 94 4a 3b 	call	0x7694	; 0x7694 <atan2>
    5e52:	dc 01       	movw	r26, r24
    5e54:	cb 01       	movw	r24, r22
    5e56:	bc 01       	movw	r22, r24
    5e58:	cd 01       	movw	r24, r26
    5e5a:	2b ed       	ldi	r18, 0xDB	; 219
    5e5c:	3f e0       	ldi	r19, 0x0F	; 15
    5e5e:	49 ec       	ldi	r20, 0xC9	; 201
    5e60:	50 e4       	ldi	r21, 0x40	; 64
    5e62:	0e 94 a4 3b 	call	0x7748	; 0x7748 <__divsf3>
    5e66:	dc 01       	movw	r26, r24
    5e68:	cb 01       	movw	r24, r22
    5e6a:	bc 01       	movw	r22, r24
    5e6c:	cd 01       	movw	r24, r26
    5e6e:	20 e0       	ldi	r18, 0x00	; 0
    5e70:	30 e0       	ldi	r19, 0x00	; 0
    5e72:	44 eb       	ldi	r20, 0xB4	; 180
    5e74:	53 e4       	ldi	r21, 0x43	; 67
    5e76:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    5e7a:	dc 01       	movw	r26, r24
    5e7c:	cb 01       	movw	r24, r22
    5e7e:	bc 01       	movw	r22, r24
    5e80:	cd 01       	movw	r24, r26
    5e82:	0e 94 0c 3c 	call	0x7818	; 0x7818 <__fixsfsi>
    5e86:	dc 01       	movw	r26, r24
    5e88:	cb 01       	movw	r24, r22
    5e8a:	9e 8b       	std	Y+22, r25	; 0x16
    5e8c:	8d 8b       	std	Y+21, r24	; 0x15
				teta_zeljen += 180;
    5e8e:	8d 89       	ldd	r24, Y+21	; 0x15
    5e90:	9e 89       	ldd	r25, Y+22	; 0x16
    5e92:	8c 54       	subi	r24, 0x4C	; 76
    5e94:	9f 4f       	sbci	r25, 0xFF	; 255
    5e96:	9e 8b       	std	Y+22, r25	; 0x16
    5e98:	8d 8b       	std	Y+21, r24	; 0x15
				setCommandInt('T', teta_zeljen);
    5e9a:	2d 89       	ldd	r18, Y+21	; 0x15
    5e9c:	3e 89       	ldd	r19, Y+22	; 0x16
    5e9e:	84 e5       	ldi	r24, 0x54	; 84
    5ea0:	b9 01       	movw	r22, r18
    5ea2:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <setCommandInt>
            }
        }
	
        if(getDetections(detection,direction))
    5ea6:	8e a9       	ldd	r24, Y+54	; 0x36
    5ea8:	69 a9       	ldd	r22, Y+49	; 0x31
    5eaa:	0e 94 a6 04 	call	0x94c	; 0x94c <getDetections>
    5eae:	88 23       	and	r24, r24
    5eb0:	39 f0       	breq	.+14     	; 0x5ec0 <gotoXY+0x546>
		{
			countingZwei = 0;
    5eb2:	10 92 72 01 	sts	0x0172, r1
			Stop();
    5eb6:	0e 94 30 27 	call	0x4e60	; 0x4e60 <Stop>
					
			return 1;
    5eba:	81 e0       	ldi	r24, 0x01	; 1
    5ebc:	8f ab       	std	Y+55, r24	; 0x37
    5ebe:	8b c0       	rjmp	.+278    	; 0x5fd6 <gotoXY+0x65c>
		}	
		
        previousX = x;
    5ec0:	8b a5       	ldd	r24, Y+43	; 0x2b
    5ec2:	9c a5       	ldd	r25, Y+44	; 0x2c
    5ec4:	9a a7       	std	Y+42, r25	; 0x2a
    5ec6:	89 a7       	std	Y+41, r24	; 0x29
        previousY = y;
    5ec8:	8d a1       	ldd	r24, Y+37	; 0x25
    5eca:	9e a1       	ldd	r25, Y+38	; 0x26
    5ecc:	9c a3       	std	Y+36, r25	; 0x24
    5ece:	8b a3       	std	Y+35, r24	; 0x23
    
        x = readX();
    5ed0:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <readX>
    5ed4:	9c a7       	std	Y+44, r25	; 0x2c
    5ed6:	8b a7       	std	Y+43, r24	; 0x2b
        y = readY();
    5ed8:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <readY>
    5edc:	9e a3       	std	Y+38, r25	; 0x26
    5ede:	8d a3       	std	Y+37, r24	; 0x25
    
        xl = X_zeljeno - x;
    5ee0:	2d a5       	ldd	r18, Y+45	; 0x2d
    5ee2:	3e a5       	ldd	r19, Y+46	; 0x2e
    5ee4:	8b a5       	ldd	r24, Y+43	; 0x2b
    5ee6:	9c a5       	ldd	r25, Y+44	; 0x2c
    5ee8:	a9 01       	movw	r20, r18
    5eea:	48 1b       	sub	r20, r24
    5eec:	59 0b       	sbc	r21, r25
    5eee:	ca 01       	movw	r24, r20
    5ef0:	aa 27       	eor	r26, r26
    5ef2:	97 fd       	sbrc	r25, 7
    5ef4:	a0 95       	com	r26
    5ef6:	ba 2f       	mov	r27, r26
    5ef8:	8b 8f       	std	Y+27, r24	; 0x1b
    5efa:	9c 8f       	std	Y+28, r25	; 0x1c
    5efc:	ad 8f       	std	Y+29, r26	; 0x1d
    5efe:	be 8f       	std	Y+30, r27	; 0x1e
        yl = Y_zeljeno - y;
    5f00:	2f a5       	ldd	r18, Y+47	; 0x2f
    5f02:	38 a9       	ldd	r19, Y+48	; 0x30
    5f04:	8d a1       	ldd	r24, Y+37	; 0x25
    5f06:	9e a1       	ldd	r25, Y+38	; 0x26
    5f08:	a9 01       	movw	r20, r18
    5f0a:	48 1b       	sub	r20, r24
    5f0c:	59 0b       	sbc	r21, r25
    5f0e:	ca 01       	movw	r24, r20
    5f10:	aa 27       	eor	r26, r26
    5f12:	97 fd       	sbrc	r25, 7
    5f14:	a0 95       	com	r26
    5f16:	ba 2f       	mov	r27, r26
    5f18:	8f 8b       	std	Y+23, r24	; 0x17
    5f1a:	98 8f       	std	Y+24, r25	; 0x18
    5f1c:	a9 8f       	std	Y+25, r26	; 0x19
    5f1e:	ba 8f       	std	Y+26, r27	; 0x1a
    
        d_zeljena_mm = sqrt(( xl * xl ) + ( yl * yl ));
    5f20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5f22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5f24:	ad 8d       	ldd	r26, Y+29	; 0x1d
    5f26:	be 8d       	ldd	r27, Y+30	; 0x1e
    5f28:	2b 8d       	ldd	r18, Y+27	; 0x1b
    5f2a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    5f2c:	4d 8d       	ldd	r20, Y+29	; 0x1d
    5f2e:	5e 8d       	ldd	r21, Y+30	; 0x1e
    5f30:	bc 01       	movw	r22, r24
    5f32:	cd 01       	movw	r24, r26
    5f34:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <__mulsi3>
    5f38:	7b 01       	movw	r14, r22
    5f3a:	8c 01       	movw	r16, r24
    5f3c:	8f 89       	ldd	r24, Y+23	; 0x17
    5f3e:	98 8d       	ldd	r25, Y+24	; 0x18
    5f40:	a9 8d       	ldd	r26, Y+25	; 0x19
    5f42:	ba 8d       	ldd	r27, Y+26	; 0x1a
    5f44:	2f 89       	ldd	r18, Y+23	; 0x17
    5f46:	38 8d       	ldd	r19, Y+24	; 0x18
    5f48:	49 8d       	ldd	r20, Y+25	; 0x19
    5f4a:	5a 8d       	ldd	r21, Y+26	; 0x1a
    5f4c:	bc 01       	movw	r22, r24
    5f4e:	cd 01       	movw	r24, r26
    5f50:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <__mulsi3>
    5f54:	dc 01       	movw	r26, r24
    5f56:	cb 01       	movw	r24, r22
    5f58:	8e 0d       	add	r24, r14
    5f5a:	9f 1d       	adc	r25, r15
    5f5c:	a0 1f       	adc	r26, r16
    5f5e:	b1 1f       	adc	r27, r17
    5f60:	bc 01       	movw	r22, r24
    5f62:	cd 01       	movw	r24, r26
    5f64:	0e 94 3f 3c 	call	0x787e	; 0x787e <__floatsisf>
    5f68:	dc 01       	movw	r26, r24
    5f6a:	cb 01       	movw	r24, r22
    5f6c:	bc 01       	movw	r22, r24
    5f6e:	cd 01       	movw	r24, r26
    5f70:	0e 94 c5 3d 	call	0x7b8a	; 0x7b8a <sqrt>
    5f74:	dc 01       	movw	r26, r24
    5f76:	cb 01       	movw	r24, r22
    5f78:	bc 01       	movw	r22, r24
    5f7a:	cd 01       	movw	r24, r26
    5f7c:	0e 94 0c 3c 	call	0x7818	; 0x7818 <__fixsfsi>
    5f80:	dc 01       	movw	r26, r24
    5f82:	cb 01       	movw	r24, r22
    5f84:	89 8b       	std	Y+17, r24	; 0x11
    5f86:	9a 8b       	std	Y+18, r25	; 0x12
    5f88:	ab 8b       	std	Y+19, r26	; 0x13
    5f8a:	bc 8b       	std	Y+20, r27	; 0x14
        d_zeljena_mm = d_zeljena_mm * direction;  
    5f8c:	89 a9       	ldd	r24, Y+49	; 0x31
    5f8e:	28 2f       	mov	r18, r24
    5f90:	33 27       	eor	r19, r19
    5f92:	27 fd       	sbrc	r18, 7
    5f94:	30 95       	com	r19
    5f96:	43 2f       	mov	r20, r19
    5f98:	53 2f       	mov	r21, r19
    5f9a:	89 89       	ldd	r24, Y+17	; 0x11
    5f9c:	9a 89       	ldd	r25, Y+18	; 0x12
    5f9e:	ab 89       	ldd	r26, Y+19	; 0x13
    5fa0:	bc 89       	ldd	r27, Y+20	; 0x14
    5fa2:	bc 01       	movw	r22, r24
    5fa4:	cd 01       	movw	r24, r26
    5fa6:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <__mulsi3>
    5faa:	dc 01       	movw	r26, r24
    5fac:	cb 01       	movw	r24, r22
    5fae:	89 8b       	std	Y+17, r24	; 0x11
    5fb0:	9a 8b       	std	Y+18, r25	; 0x12
    5fb2:	ab 8b       	std	Y+19, r26	; 0x13
    5fb4:	bc 8b       	std	Y+20, r27	; 0x14
      writeTime();  
    5fb6:	0e 94 68 04 	call	0x8d0	; 0x8d0 <writeTime>
    }while( absolut(d_zeljena_mm) >  precision );
    5fba:	89 89       	ldd	r24, Y+17	; 0x11
    5fbc:	9a 89       	ldd	r25, Y+18	; 0x12
    5fbe:	0e 94 bc 29 	call	0x5378	; 0x5378 <absolut>
    5fc2:	9c 01       	movw	r18, r24
    5fc4:	8c a9       	ldd	r24, Y+52	; 0x34
    5fc6:	9d a9       	ldd	r25, Y+53	; 0x35
    5fc8:	82 17       	cp	r24, r18
    5fca:	93 07       	cpc	r25, r19
    5fcc:	0c f4       	brge	.+2      	; 0x5fd0 <gotoXY+0x656>
    5fce:	33 cd       	rjmp	.-1434   	; 0x5a36 <gotoXY+0xbc>
	
	countingZwei = 0;
    5fd0:	10 92 72 01 	sts	0x0172, r1
	
    //kretnja odradjena do kraja - funkcija vraca 0
	return 0;
    5fd4:	1f aa       	std	Y+55, r1	; 0x37
    5fd6:	8f a9       	ldd	r24, Y+55	; 0x37
}
    5fd8:	e7 96       	adiw	r28, 0x37	; 55
    5fda:	0f b6       	in	r0, 0x3f	; 63
    5fdc:	f8 94       	cli
    5fde:	de bf       	out	0x3e, r29	; 62
    5fe0:	0f be       	out	0x3f, r0	; 63
    5fe2:	cd bf       	out	0x3d, r28	; 61
    5fe4:	cf 91       	pop	r28
    5fe6:	df 91       	pop	r29
    5fe8:	1f 91       	pop	r17
    5fea:	0f 91       	pop	r16
    5fec:	ff 90       	pop	r15
    5fee:	ef 90       	pop	r14
    5ff0:	08 95       	ret

00005ff2 <moveOnDirectionReal>:

// fukcija za pomeranje po trenutnom pravcu, u zavisnosti od smera pomera se napred ili nazad za value


static char moveOnDirectionReal(int value, short direction,int speed, char detection, int breakTime)
{
    5ff2:	6f 92       	push	r6
    5ff4:	7f 92       	push	r7
    5ff6:	8f 92       	push	r8
    5ff8:	9f 92       	push	r9
    5ffa:	af 92       	push	r10
    5ffc:	bf 92       	push	r11
    5ffe:	cf 92       	push	r12
    6000:	df 92       	push	r13
    6002:	ef 92       	push	r14
    6004:	ff 92       	push	r15
    6006:	0f 93       	push	r16
    6008:	1f 93       	push	r17
    600a:	df 93       	push	r29
    600c:	cf 93       	push	r28
    600e:	cd b7       	in	r28, 0x3d	; 61
    6010:	de b7       	in	r29, 0x3e	; 62
    6012:	e2 97       	sbiw	r28, 0x32	; 50
    6014:	0f b6       	in	r0, 0x3f	; 63
    6016:	f8 94       	cli
    6018:	de bf       	out	0x3e, r29	; 62
    601a:	0f be       	out	0x3f, r0	; 63
    601c:	cd bf       	out	0x3d, r28	; 61
    601e:	9a a7       	std	Y+42, r25	; 0x2a
    6020:	89 a7       	std	Y+41, r24	; 0x29
    6022:	7c a7       	std	Y+44, r23	; 0x2c
    6024:	6b a7       	std	Y+43, r22	; 0x2b
    6026:	5e a7       	std	Y+46, r21	; 0x2e
    6028:	4d a7       	std	Y+45, r20	; 0x2d
    602a:	2f a7       	std	Y+47, r18	; 0x2f
    602c:	19 ab       	std	Y+49, r17	; 0x31
    602e:	08 ab       	std	Y+48, r16	; 0x30
    long d_zeljena_mm;
    long xl;
    long yl;

    // racunanje nove tacke
    x = readX();
    6030:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <readX>
    6034:	98 a7       	std	Y+40, r25	; 0x28
    6036:	8f a3       	std	Y+39, r24	; 0x27
    y = readY();
    6038:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <readY>
    603c:	9e a3       	std	Y+38, r25	; 0x26
    603e:	8d a3       	std	Y+37, r24	; 0x25
    
    X_zeljeno = x + (direction)*(sin(readUgaoStepeni()* PI / 180) * value);
    6040:	8f a1       	ldd	r24, Y+39	; 0x27
    6042:	98 a5       	ldd	r25, Y+40	; 0x28
    6044:	aa 27       	eor	r26, r26
    6046:	97 fd       	sbrc	r25, 7
    6048:	a0 95       	com	r26
    604a:	ba 2f       	mov	r27, r26
    604c:	bc 01       	movw	r22, r24
    604e:	cd 01       	movw	r24, r26
    6050:	0e 94 3f 3c 	call	0x787e	; 0x787e <__floatsisf>
    6054:	5b 01       	movw	r10, r22
    6056:	6c 01       	movw	r12, r24
    6058:	8b a5       	ldd	r24, Y+43	; 0x2b
    605a:	9c a5       	ldd	r25, Y+44	; 0x2c
    605c:	aa 27       	eor	r26, r26
    605e:	97 fd       	sbrc	r25, 7
    6060:	a0 95       	com	r26
    6062:	ba 2f       	mov	r27, r26
    6064:	bc 01       	movw	r22, r24
    6066:	cd 01       	movw	r24, r26
    6068:	0e 94 3f 3c 	call	0x787e	; 0x787e <__floatsisf>
    606c:	3b 01       	movw	r6, r22
    606e:	4c 01       	movw	r8, r24
    6070:	0e 94 8b 28 	call	0x5116	; 0x5116 <readUgaoStepeni>
    6074:	aa 27       	eor	r26, r26
    6076:	97 fd       	sbrc	r25, 7
    6078:	a0 95       	com	r26
    607a:	ba 2f       	mov	r27, r26
    607c:	bc 01       	movw	r22, r24
    607e:	cd 01       	movw	r24, r26
    6080:	0e 94 3f 3c 	call	0x787e	; 0x787e <__floatsisf>
    6084:	dc 01       	movw	r26, r24
    6086:	cb 01       	movw	r24, r22
    6088:	bc 01       	movw	r22, r24
    608a:	cd 01       	movw	r24, r26
    608c:	2b ed       	ldi	r18, 0xDB	; 219
    608e:	3f e0       	ldi	r19, 0x0F	; 15
    6090:	49 e4       	ldi	r20, 0x49	; 73
    6092:	50 e4       	ldi	r21, 0x40	; 64
    6094:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    6098:	dc 01       	movw	r26, r24
    609a:	cb 01       	movw	r24, r22
    609c:	bc 01       	movw	r22, r24
    609e:	cd 01       	movw	r24, r26
    60a0:	20 e0       	ldi	r18, 0x00	; 0
    60a2:	30 e0       	ldi	r19, 0x00	; 0
    60a4:	44 e3       	ldi	r20, 0x34	; 52
    60a6:	53 e4       	ldi	r21, 0x43	; 67
    60a8:	0e 94 a4 3b 	call	0x7748	; 0x7748 <__divsf3>
    60ac:	dc 01       	movw	r26, r24
    60ae:	cb 01       	movw	r24, r22
    60b0:	bc 01       	movw	r22, r24
    60b2:	cd 01       	movw	r24, r26
    60b4:	0e 94 bb 3d 	call	0x7b76	; 0x7b76 <sin>
    60b8:	7b 01       	movw	r14, r22
    60ba:	8c 01       	movw	r16, r24
    60bc:	89 a5       	ldd	r24, Y+41	; 0x29
    60be:	9a a5       	ldd	r25, Y+42	; 0x2a
    60c0:	aa 27       	eor	r26, r26
    60c2:	97 fd       	sbrc	r25, 7
    60c4:	a0 95       	com	r26
    60c6:	ba 2f       	mov	r27, r26
    60c8:	bc 01       	movw	r22, r24
    60ca:	cd 01       	movw	r24, r26
    60cc:	0e 94 3f 3c 	call	0x787e	; 0x787e <__floatsisf>
    60d0:	9b 01       	movw	r18, r22
    60d2:	ac 01       	movw	r20, r24
    60d4:	c8 01       	movw	r24, r16
    60d6:	b7 01       	movw	r22, r14
    60d8:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    60dc:	dc 01       	movw	r26, r24
    60de:	cb 01       	movw	r24, r22
    60e0:	9c 01       	movw	r18, r24
    60e2:	ad 01       	movw	r20, r26
    60e4:	c4 01       	movw	r24, r8
    60e6:	b3 01       	movw	r22, r6
    60e8:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    60ec:	dc 01       	movw	r26, r24
    60ee:	cb 01       	movw	r24, r22
    60f0:	9c 01       	movw	r18, r24
    60f2:	ad 01       	movw	r20, r26
    60f4:	c6 01       	movw	r24, r12
    60f6:	b5 01       	movw	r22, r10
    60f8:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <__addsf3>
    60fc:	dc 01       	movw	r26, r24
    60fe:	cb 01       	movw	r24, r22
    6100:	bc 01       	movw	r22, r24
    6102:	cd 01       	movw	r24, r26
    6104:	0e 94 0c 3c 	call	0x7818	; 0x7818 <__fixsfsi>
    6108:	dc 01       	movw	r26, r24
    610a:	cb 01       	movw	r24, r22
    610c:	9c a3       	std	Y+36, r25	; 0x24
    610e:	8b a3       	std	Y+35, r24	; 0x23
    Y_zeljeno = y + (direction)*(cos(readUgaoStepeni()* PI / 180) * value);
    6110:	8d a1       	ldd	r24, Y+37	; 0x25
    6112:	9e a1       	ldd	r25, Y+38	; 0x26
    6114:	aa 27       	eor	r26, r26
    6116:	97 fd       	sbrc	r25, 7
    6118:	a0 95       	com	r26
    611a:	ba 2f       	mov	r27, r26
    611c:	bc 01       	movw	r22, r24
    611e:	cd 01       	movw	r24, r26
    6120:	0e 94 3f 3c 	call	0x787e	; 0x787e <__floatsisf>
    6124:	5b 01       	movw	r10, r22
    6126:	6c 01       	movw	r12, r24
    6128:	8b a5       	ldd	r24, Y+43	; 0x2b
    612a:	9c a5       	ldd	r25, Y+44	; 0x2c
    612c:	aa 27       	eor	r26, r26
    612e:	97 fd       	sbrc	r25, 7
    6130:	a0 95       	com	r26
    6132:	ba 2f       	mov	r27, r26
    6134:	bc 01       	movw	r22, r24
    6136:	cd 01       	movw	r24, r26
    6138:	0e 94 3f 3c 	call	0x787e	; 0x787e <__floatsisf>
    613c:	3b 01       	movw	r6, r22
    613e:	4c 01       	movw	r8, r24
    6140:	0e 94 8b 28 	call	0x5116	; 0x5116 <readUgaoStepeni>
    6144:	aa 27       	eor	r26, r26
    6146:	97 fd       	sbrc	r25, 7
    6148:	a0 95       	com	r26
    614a:	ba 2f       	mov	r27, r26
    614c:	bc 01       	movw	r22, r24
    614e:	cd 01       	movw	r24, r26
    6150:	0e 94 3f 3c 	call	0x787e	; 0x787e <__floatsisf>
    6154:	dc 01       	movw	r26, r24
    6156:	cb 01       	movw	r24, r22
    6158:	bc 01       	movw	r22, r24
    615a:	cd 01       	movw	r24, r26
    615c:	2b ed       	ldi	r18, 0xDB	; 219
    615e:	3f e0       	ldi	r19, 0x0F	; 15
    6160:	49 e4       	ldi	r20, 0x49	; 73
    6162:	50 e4       	ldi	r21, 0x40	; 64
    6164:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    6168:	dc 01       	movw	r26, r24
    616a:	cb 01       	movw	r24, r22
    616c:	bc 01       	movw	r22, r24
    616e:	cd 01       	movw	r24, r26
    6170:	20 e0       	ldi	r18, 0x00	; 0
    6172:	30 e0       	ldi	r19, 0x00	; 0
    6174:	44 e3       	ldi	r20, 0x34	; 52
    6176:	53 e4       	ldi	r21, 0x43	; 67
    6178:	0e 94 a4 3b 	call	0x7748	; 0x7748 <__divsf3>
    617c:	dc 01       	movw	r26, r24
    617e:	cb 01       	movw	r24, r22
    6180:	bc 01       	movw	r22, r24
    6182:	cd 01       	movw	r24, r26
    6184:	0e 94 a1 3b 	call	0x7742	; 0x7742 <cos>
    6188:	7b 01       	movw	r14, r22
    618a:	8c 01       	movw	r16, r24
    618c:	89 a5       	ldd	r24, Y+41	; 0x29
    618e:	9a a5       	ldd	r25, Y+42	; 0x2a
    6190:	aa 27       	eor	r26, r26
    6192:	97 fd       	sbrc	r25, 7
    6194:	a0 95       	com	r26
    6196:	ba 2f       	mov	r27, r26
    6198:	bc 01       	movw	r22, r24
    619a:	cd 01       	movw	r24, r26
    619c:	0e 94 3f 3c 	call	0x787e	; 0x787e <__floatsisf>
    61a0:	9b 01       	movw	r18, r22
    61a2:	ac 01       	movw	r20, r24
    61a4:	c8 01       	movw	r24, r16
    61a6:	b7 01       	movw	r22, r14
    61a8:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    61ac:	dc 01       	movw	r26, r24
    61ae:	cb 01       	movw	r24, r22
    61b0:	9c 01       	movw	r18, r24
    61b2:	ad 01       	movw	r20, r26
    61b4:	c4 01       	movw	r24, r8
    61b6:	b3 01       	movw	r22, r6
    61b8:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    61bc:	dc 01       	movw	r26, r24
    61be:	cb 01       	movw	r24, r22
    61c0:	9c 01       	movw	r18, r24
    61c2:	ad 01       	movw	r20, r26
    61c4:	c6 01       	movw	r24, r12
    61c6:	b5 01       	movw	r22, r10
    61c8:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <__addsf3>
    61cc:	dc 01       	movw	r26, r24
    61ce:	cb 01       	movw	r24, r22
    61d0:	bc 01       	movw	r22, r24
    61d2:	cd 01       	movw	r24, r26
    61d4:	0e 94 0c 3c 	call	0x7818	; 0x7818 <__fixsfsi>
    61d8:	dc 01       	movw	r26, r24
    61da:	cb 01       	movw	r24, r22
    61dc:	9a a3       	std	Y+34, r25	; 0x22
    61de:	89 a3       	std	Y+33, r24	; 0x21
	
    counting = 0;
    61e0:	10 92 71 01 	sts	0x0171, r1
	countingZwei = 0;
    61e4:	10 92 72 01 	sts	0x0172, r1
	
    do
    {
        x = readX();
    61e8:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <readX>
    61ec:	98 a7       	std	Y+40, r25	; 0x28
    61ee:	8f a3       	std	Y+39, r24	; 0x27
        y = readY();
    61f0:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <readY>
    61f4:	9e a3       	std	Y+38, r25	; 0x26
    61f6:	8d a3       	std	Y+37, r24	; 0x25
        
        xl = X_zeljeno - x;
    61f8:	2b a1       	ldd	r18, Y+35	; 0x23
    61fa:	3c a1       	ldd	r19, Y+36	; 0x24
    61fc:	8f a1       	ldd	r24, Y+39	; 0x27
    61fe:	98 a5       	ldd	r25, Y+40	; 0x28
    6200:	a9 01       	movw	r20, r18
    6202:	48 1b       	sub	r20, r24
    6204:	59 0b       	sbc	r21, r25
    6206:	ca 01       	movw	r24, r20
    6208:	aa 27       	eor	r26, r26
    620a:	97 fd       	sbrc	r25, 7
    620c:	a0 95       	com	r26
    620e:	ba 2f       	mov	r27, r26
    6210:	8b 8b       	std	Y+19, r24	; 0x13
    6212:	9c 8b       	std	Y+20, r25	; 0x14
    6214:	ad 8b       	std	Y+21, r26	; 0x15
    6216:	be 8b       	std	Y+22, r27	; 0x16
        yl = Y_zeljeno - y;
    6218:	29 a1       	ldd	r18, Y+33	; 0x21
    621a:	3a a1       	ldd	r19, Y+34	; 0x22
    621c:	8d a1       	ldd	r24, Y+37	; 0x25
    621e:	9e a1       	ldd	r25, Y+38	; 0x26
    6220:	a9 01       	movw	r20, r18
    6222:	48 1b       	sub	r20, r24
    6224:	59 0b       	sbc	r21, r25
    6226:	ca 01       	movw	r24, r20
    6228:	aa 27       	eor	r26, r26
    622a:	97 fd       	sbrc	r25, 7
    622c:	a0 95       	com	r26
    622e:	ba 2f       	mov	r27, r26
    6230:	8f 87       	std	Y+15, r24	; 0x0f
    6232:	98 8b       	std	Y+16, r25	; 0x10
    6234:	a9 8b       	std	Y+17, r26	; 0x11
    6236:	ba 8b       	std	Y+18, r27	; 0x12
        
        d_zeljena_mm = sqrt(( xl * xl ) + ( yl * yl ));
    6238:	8b 89       	ldd	r24, Y+19	; 0x13
    623a:	9c 89       	ldd	r25, Y+20	; 0x14
    623c:	ad 89       	ldd	r26, Y+21	; 0x15
    623e:	be 89       	ldd	r27, Y+22	; 0x16
    6240:	2b 89       	ldd	r18, Y+19	; 0x13
    6242:	3c 89       	ldd	r19, Y+20	; 0x14
    6244:	4d 89       	ldd	r20, Y+21	; 0x15
    6246:	5e 89       	ldd	r21, Y+22	; 0x16
    6248:	bc 01       	movw	r22, r24
    624a:	cd 01       	movw	r24, r26
    624c:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <__mulsi3>
    6250:	7b 01       	movw	r14, r22
    6252:	8c 01       	movw	r16, r24
    6254:	8f 85       	ldd	r24, Y+15	; 0x0f
    6256:	98 89       	ldd	r25, Y+16	; 0x10
    6258:	a9 89       	ldd	r26, Y+17	; 0x11
    625a:	ba 89       	ldd	r27, Y+18	; 0x12
    625c:	2f 85       	ldd	r18, Y+15	; 0x0f
    625e:	38 89       	ldd	r19, Y+16	; 0x10
    6260:	49 89       	ldd	r20, Y+17	; 0x11
    6262:	5a 89       	ldd	r21, Y+18	; 0x12
    6264:	bc 01       	movw	r22, r24
    6266:	cd 01       	movw	r24, r26
    6268:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <__mulsi3>
    626c:	dc 01       	movw	r26, r24
    626e:	cb 01       	movw	r24, r22
    6270:	8e 0d       	add	r24, r14
    6272:	9f 1d       	adc	r25, r15
    6274:	a0 1f       	adc	r26, r16
    6276:	b1 1f       	adc	r27, r17
    6278:	bc 01       	movw	r22, r24
    627a:	cd 01       	movw	r24, r26
    627c:	0e 94 3f 3c 	call	0x787e	; 0x787e <__floatsisf>
    6280:	dc 01       	movw	r26, r24
    6282:	cb 01       	movw	r24, r22
    6284:	bc 01       	movw	r22, r24
    6286:	cd 01       	movw	r24, r26
    6288:	0e 94 c5 3d 	call	0x7b8a	; 0x7b8a <sqrt>
    628c:	dc 01       	movw	r26, r24
    628e:	cb 01       	movw	r24, r22
    6290:	bc 01       	movw	r22, r24
    6292:	cd 01       	movw	r24, r26
    6294:	0e 94 0c 3c 	call	0x7818	; 0x7818 <__fixsfsi>
    6298:	dc 01       	movw	r26, r24
    629a:	cb 01       	movw	r24, r22
    629c:	8f 8b       	std	Y+23, r24	; 0x17
    629e:	98 8f       	std	Y+24, r25	; 0x18
    62a0:	a9 8f       	std	Y+25, r26	; 0x19
    62a2:	ba 8f       	std	Y+26, r27	; 0x1a
        d_zeljena_mm *= direction;
    62a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    62a6:	9c a5       	ldd	r25, Y+44	; 0x2c
    62a8:	9c 01       	movw	r18, r24
    62aa:	44 27       	eor	r20, r20
    62ac:	37 fd       	sbrc	r19, 7
    62ae:	40 95       	com	r20
    62b0:	54 2f       	mov	r21, r20
    62b2:	8f 89       	ldd	r24, Y+23	; 0x17
    62b4:	98 8d       	ldd	r25, Y+24	; 0x18
    62b6:	a9 8d       	ldd	r26, Y+25	; 0x19
    62b8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    62ba:	bc 01       	movw	r22, r24
    62bc:	cd 01       	movw	r24, r26
    62be:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <__mulsi3>
    62c2:	dc 01       	movw	r26, r24
    62c4:	cb 01       	movw	r24, r22
    62c6:	8f 8b       	std	Y+23, r24	; 0x17
    62c8:	98 8f       	std	Y+24, r25	; 0x18
    62ca:	a9 8f       	std	Y+25, r26	; 0x19
    62cc:	ba 8f       	std	Y+26, r27	; 0x1a
    62ce:	80 e0       	ldi	r24, 0x00	; 0
    62d0:	90 e0       	ldi	r25, 0x00	; 0
    62d2:	a0 ea       	ldi	r26, 0xA0	; 160
    62d4:	b0 e4       	ldi	r27, 0x40	; 64
    62d6:	8b 87       	std	Y+11, r24	; 0x0b
    62d8:	9c 87       	std	Y+12, r25	; 0x0c
    62da:	ad 87       	std	Y+13, r26	; 0x0d
    62dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    62de:	6b 85       	ldd	r22, Y+11	; 0x0b
    62e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    62e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    62e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    62e6:	2d ec       	ldi	r18, 0xCD	; 205
    62e8:	3c ec       	ldi	r19, 0xCC	; 204
    62ea:	4c e2       	ldi	r20, 0x2C	; 44
    62ec:	55 e4       	ldi	r21, 0x45	; 69
    62ee:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    62f2:	dc 01       	movw	r26, r24
    62f4:	cb 01       	movw	r24, r22
    62f6:	8f 83       	std	Y+7, r24	; 0x07
    62f8:	98 87       	std	Y+8, r25	; 0x08
    62fa:	a9 87       	std	Y+9, r26	; 0x09
    62fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    62fe:	6f 81       	ldd	r22, Y+7	; 0x07
    6300:	78 85       	ldd	r23, Y+8	; 0x08
    6302:	89 85       	ldd	r24, Y+9	; 0x09
    6304:	9a 85       	ldd	r25, Y+10	; 0x0a
    6306:	20 e0       	ldi	r18, 0x00	; 0
    6308:	30 e0       	ldi	r19, 0x00	; 0
    630a:	40 e8       	ldi	r20, 0x80	; 128
    630c:	5f e3       	ldi	r21, 0x3F	; 63
    630e:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    6312:	88 23       	and	r24, r24
    6314:	2c f4       	brge	.+10     	; 0x6320 <moveOnDirectionReal+0x32e>
		__ticks = 1;
    6316:	81 e0       	ldi	r24, 0x01	; 1
    6318:	90 e0       	ldi	r25, 0x00	; 0
    631a:	9e 83       	std	Y+6, r25	; 0x06
    631c:	8d 83       	std	Y+5, r24	; 0x05
    631e:	3f c0       	rjmp	.+126    	; 0x639e <moveOnDirectionReal+0x3ac>
	else if (__tmp > 65535)
    6320:	6f 81       	ldd	r22, Y+7	; 0x07
    6322:	78 85       	ldd	r23, Y+8	; 0x08
    6324:	89 85       	ldd	r24, Y+9	; 0x09
    6326:	9a 85       	ldd	r25, Y+10	; 0x0a
    6328:	20 e0       	ldi	r18, 0x00	; 0
    632a:	3f ef       	ldi	r19, 0xFF	; 255
    632c:	4f e7       	ldi	r20, 0x7F	; 127
    632e:	57 e4       	ldi	r21, 0x47	; 71
    6330:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    6334:	18 16       	cp	r1, r24
    6336:	4c f5       	brge	.+82     	; 0x638a <moveOnDirectionReal+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6338:	6b 85       	ldd	r22, Y+11	; 0x0b
    633a:	7c 85       	ldd	r23, Y+12	; 0x0c
    633c:	8d 85       	ldd	r24, Y+13	; 0x0d
    633e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6340:	20 e0       	ldi	r18, 0x00	; 0
    6342:	30 e0       	ldi	r19, 0x00	; 0
    6344:	40 e2       	ldi	r20, 0x20	; 32
    6346:	51 e4       	ldi	r21, 0x41	; 65
    6348:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    634c:	dc 01       	movw	r26, r24
    634e:	cb 01       	movw	r24, r22
    6350:	bc 01       	movw	r22, r24
    6352:	cd 01       	movw	r24, r26
    6354:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    6358:	dc 01       	movw	r26, r24
    635a:	cb 01       	movw	r24, r22
    635c:	9e 83       	std	Y+6, r25	; 0x06
    635e:	8d 83       	std	Y+5, r24	; 0x05
    6360:	0f c0       	rjmp	.+30     	; 0x6380 <moveOnDirectionReal+0x38e>
    6362:	84 e1       	ldi	r24, 0x14	; 20
    6364:	91 e0       	ldi	r25, 0x01	; 1
    6366:	9c 83       	std	Y+4, r25	; 0x04
    6368:	8b 83       	std	Y+3, r24	; 0x03
    636a:	8b 81       	ldd	r24, Y+3	; 0x03
    636c:	9c 81       	ldd	r25, Y+4	; 0x04
    636e:	01 97       	sbiw	r24, 0x01	; 1
    6370:	f1 f7       	brne	.-4      	; 0x636e <moveOnDirectionReal+0x37c>
    6372:	9c 83       	std	Y+4, r25	; 0x04
    6374:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6376:	8d 81       	ldd	r24, Y+5	; 0x05
    6378:	9e 81       	ldd	r25, Y+6	; 0x06
    637a:	01 97       	sbiw	r24, 0x01	; 1
    637c:	9e 83       	std	Y+6, r25	; 0x06
    637e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6380:	8d 81       	ldd	r24, Y+5	; 0x05
    6382:	9e 81       	ldd	r25, Y+6	; 0x06
    6384:	00 97       	sbiw	r24, 0x00	; 0
    6386:	69 f7       	brne	.-38     	; 0x6362 <moveOnDirectionReal+0x370>
    6388:	14 c0       	rjmp	.+40     	; 0x63b2 <moveOnDirectionReal+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    638a:	6f 81       	ldd	r22, Y+7	; 0x07
    638c:	78 85       	ldd	r23, Y+8	; 0x08
    638e:	89 85       	ldd	r24, Y+9	; 0x09
    6390:	9a 85       	ldd	r25, Y+10	; 0x0a
    6392:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    6396:	dc 01       	movw	r26, r24
    6398:	cb 01       	movw	r24, r22
    639a:	9e 83       	std	Y+6, r25	; 0x06
    639c:	8d 83       	std	Y+5, r24	; 0x05
    639e:	8d 81       	ldd	r24, Y+5	; 0x05
    63a0:	9e 81       	ldd	r25, Y+6	; 0x06
    63a2:	9a 83       	std	Y+2, r25	; 0x02
    63a4:	89 83       	std	Y+1, r24	; 0x01
    63a6:	89 81       	ldd	r24, Y+1	; 0x01
    63a8:	9a 81       	ldd	r25, Y+2	; 0x02
    63aa:	01 97       	sbiw	r24, 0x01	; 1
    63ac:	f1 f7       	brne	.-4      	; 0x63aa <moveOnDirectionReal+0x3b8>
    63ae:	9a 83       	std	Y+2, r25	; 0x02
    63b0:	89 83       	std	Y+1, r24	; 0x01

        _delay_ms(5); //proveriti ovo!!!
        
        //podesavanje brzine 
		setCommandInt('V', speed);		
    63b2:	2d a5       	ldd	r18, Y+45	; 0x2d
    63b4:	3e a5       	ldd	r19, Y+46	; 0x2e
    63b6:	86 e5       	ldi	r24, 0x56	; 86
    63b8:	b9 01       	movw	r22, r18
    63ba:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <setCommandInt>
					
        // postavljanje distance
        setCommandInt('D', d_zeljena_mm);
    63be:	2f 89       	ldd	r18, Y+23	; 0x17
    63c0:	38 8d       	ldd	r19, Y+24	; 0x18
    63c2:	84 e4       	ldi	r24, 0x44	; 68
    63c4:	b9 01       	movw	r22, r18
    63c6:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <setCommandInt>
        
        // korekcija ugla samo ako je robot na vecoj udaljenosti od 10 cm od zeljene tacke, ako je blize ne vrsi se korekcija ugla
        if(direction == 1)
    63ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    63cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    63ce:	81 30       	cpi	r24, 0x01	; 1
    63d0:	91 05       	cpc	r25, r1
    63d2:	09 f0       	breq	.+2      	; 0x63d6 <moveOnDirectionReal+0x3e4>
    63d4:	61 c0       	rjmp	.+194    	; 0x6498 <moveOnDirectionReal+0x4a6>
        {
            if(d_zeljena_mm > 50)  //bilo 100
    63d6:	8f 89       	ldd	r24, Y+23	; 0x17
    63d8:	98 8d       	ldd	r25, Y+24	; 0x18
    63da:	a9 8d       	ldd	r26, Y+25	; 0x19
    63dc:	ba 8d       	ldd	r27, Y+26	; 0x1a
    63de:	83 33       	cpi	r24, 0x33	; 51
    63e0:	91 05       	cpc	r25, r1
    63e2:	a1 05       	cpc	r26, r1
    63e4:	b1 05       	cpc	r27, r1
    63e6:	0c f4       	brge	.+2      	; 0x63ea <moveOnDirectionReal+0x3f8>
    63e8:	57 c0       	rjmp	.+174    	; 0x6498 <moveOnDirectionReal+0x4a6>
            {
                /************************************************************************/
				/*	DOBRO TESTIRATI!!!                                                  */
				/************************************************************************/
				
				if((xl)==0 && (yl)==0)
    63ea:	8b 89       	ldd	r24, Y+19	; 0x13
    63ec:	9c 89       	ldd	r25, Y+20	; 0x14
    63ee:	ad 89       	ldd	r26, Y+21	; 0x15
    63f0:	be 89       	ldd	r27, Y+22	; 0x16
    63f2:	00 97       	sbiw	r24, 0x00	; 0
    63f4:	a1 05       	cpc	r26, r1
    63f6:	b1 05       	cpc	r27, r1
    63f8:	b9 f4       	brne	.+46     	; 0x6428 <moveOnDirectionReal+0x436>
    63fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    63fc:	98 89       	ldd	r25, Y+16	; 0x10
    63fe:	a9 89       	ldd	r26, Y+17	; 0x11
    6400:	ba 89       	ldd	r27, Y+18	; 0x12
    6402:	00 97       	sbiw	r24, 0x00	; 0
    6404:	a1 05       	cpc	r26, r1
    6406:	b1 05       	cpc	r27, r1
    6408:	79 f4       	brne	.+30     	; 0x6428 <moveOnDirectionReal+0x436>
				{
					Stop();
    640a:	0e 94 30 27 	call	0x4e60	; 0x4e60 <Stop>
					LCDClear();
    640e:	81 e0       	ldi	r24, 0x01	; 1
    6410:	60 e0       	ldi	r22, 0x00	; 0
    6412:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCDByte>
					LCDWriteStringXY(0,0,"Nedefinisan atan");	
    6416:	80 e0       	ldi	r24, 0x00	; 0
    6418:	60 e0       	ldi	r22, 0x00	; 0
    641a:	0e 94 14 27 	call	0x4e28	; 0x4e28 <LCDGotoXY>
    641e:	82 e5       	ldi	r24, 0x52	; 82
    6420:	91 e0       	ldi	r25, 0x01	; 1
    6422:	0e 94 6d 26 	call	0x4cda	; 0x4cda <LCDWriteString>
    6426:	ff cf       	rjmp	.-2      	; 0x6426 <moveOnDirectionReal+0x434>
					while(1);
				}	
				
				teta_zeljen = (int)(atan2(xl, yl) / (2 * PI) * 360);
    6428:	6b 89       	ldd	r22, Y+19	; 0x13
    642a:	7c 89       	ldd	r23, Y+20	; 0x14
    642c:	8d 89       	ldd	r24, Y+21	; 0x15
    642e:	9e 89       	ldd	r25, Y+22	; 0x16
    6430:	0e 94 3f 3c 	call	0x787e	; 0x787e <__floatsisf>
    6434:	7b 01       	movw	r14, r22
    6436:	8c 01       	movw	r16, r24
    6438:	6f 85       	ldd	r22, Y+15	; 0x0f
    643a:	78 89       	ldd	r23, Y+16	; 0x10
    643c:	89 89       	ldd	r24, Y+17	; 0x11
    643e:	9a 89       	ldd	r25, Y+18	; 0x12
    6440:	0e 94 3f 3c 	call	0x787e	; 0x787e <__floatsisf>
    6444:	9b 01       	movw	r18, r22
    6446:	ac 01       	movw	r20, r24
    6448:	c8 01       	movw	r24, r16
    644a:	b7 01       	movw	r22, r14
    644c:	0e 94 4a 3b 	call	0x7694	; 0x7694 <atan2>
    6450:	dc 01       	movw	r26, r24
    6452:	cb 01       	movw	r24, r22
    6454:	bc 01       	movw	r22, r24
    6456:	cd 01       	movw	r24, r26
    6458:	2b ed       	ldi	r18, 0xDB	; 219
    645a:	3f e0       	ldi	r19, 0x0F	; 15
    645c:	49 ec       	ldi	r20, 0xC9	; 201
    645e:	50 e4       	ldi	r21, 0x40	; 64
    6460:	0e 94 a4 3b 	call	0x7748	; 0x7748 <__divsf3>
    6464:	dc 01       	movw	r26, r24
    6466:	cb 01       	movw	r24, r22
    6468:	bc 01       	movw	r22, r24
    646a:	cd 01       	movw	r24, r26
    646c:	20 e0       	ldi	r18, 0x00	; 0
    646e:	30 e0       	ldi	r19, 0x00	; 0
    6470:	44 eb       	ldi	r20, 0xB4	; 180
    6472:	53 e4       	ldi	r21, 0x43	; 67
    6474:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    6478:	dc 01       	movw	r26, r24
    647a:	cb 01       	movw	r24, r22
    647c:	bc 01       	movw	r22, r24
    647e:	cd 01       	movw	r24, r26
    6480:	0e 94 0c 3c 	call	0x7818	; 0x7818 <__fixsfsi>
    6484:	dc 01       	movw	r26, r24
    6486:	cb 01       	movw	r24, r22
    6488:	98 a3       	std	Y+32, r25	; 0x20
    648a:	8f 8f       	std	Y+31, r24	; 0x1f
                setCommandInt('T', teta_zeljen);
    648c:	2f 8d       	ldd	r18, Y+31	; 0x1f
    648e:	38 a1       	ldd	r19, Y+32	; 0x20
    6490:	84 e5       	ldi	r24, 0x54	; 84
    6492:	b9 01       	movw	r22, r18
    6494:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <setCommandInt>
            }
        }

        if( direction == -1)
    6498:	8b a5       	ldd	r24, Y+43	; 0x2b
    649a:	9c a5       	ldd	r25, Y+44	; 0x2c
    649c:	5f ef       	ldi	r21, 0xFF	; 255
    649e:	8f 3f       	cpi	r24, 0xFF	; 255
    64a0:	95 07       	cpc	r25, r21
    64a2:	09 f0       	breq	.+2      	; 0x64a6 <moveOnDirectionReal+0x4b4>
    64a4:	6a c0       	rjmp	.+212    	; 0x657a <moveOnDirectionReal+0x588>
        {
            if( d_zeljena_mm < -50) //200
    64a6:	8f 89       	ldd	r24, Y+23	; 0x17
    64a8:	98 8d       	ldd	r25, Y+24	; 0x18
    64aa:	a9 8d       	ldd	r26, Y+25	; 0x19
    64ac:	ba 8d       	ldd	r27, Y+26	; 0x1a
    64ae:	8e 3c       	cpi	r24, 0xCE	; 206
    64b0:	2f ef       	ldi	r18, 0xFF	; 255
    64b2:	92 07       	cpc	r25, r18
    64b4:	2f ef       	ldi	r18, 0xFF	; 255
    64b6:	a2 07       	cpc	r26, r18
    64b8:	2f ef       	ldi	r18, 0xFF	; 255
    64ba:	b2 07       	cpc	r27, r18
    64bc:	0c f0       	brlt	.+2      	; 0x64c0 <moveOnDirectionReal+0x4ce>
    64be:	5d c0       	rjmp	.+186    	; 0x657a <moveOnDirectionReal+0x588>
            {
                /************************************************************************/
				/*	DOBRO TESTIRATI!!!                                                  */
				/************************************************************************/
				
				if((xl)==0 && (yl)==0)
    64c0:	8b 89       	ldd	r24, Y+19	; 0x13
    64c2:	9c 89       	ldd	r25, Y+20	; 0x14
    64c4:	ad 89       	ldd	r26, Y+21	; 0x15
    64c6:	be 89       	ldd	r27, Y+22	; 0x16
    64c8:	00 97       	sbiw	r24, 0x00	; 0
    64ca:	a1 05       	cpc	r26, r1
    64cc:	b1 05       	cpc	r27, r1
    64ce:	b9 f4       	brne	.+46     	; 0x64fe <moveOnDirectionReal+0x50c>
    64d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    64d2:	98 89       	ldd	r25, Y+16	; 0x10
    64d4:	a9 89       	ldd	r26, Y+17	; 0x11
    64d6:	ba 89       	ldd	r27, Y+18	; 0x12
    64d8:	00 97       	sbiw	r24, 0x00	; 0
    64da:	a1 05       	cpc	r26, r1
    64dc:	b1 05       	cpc	r27, r1
    64de:	79 f4       	brne	.+30     	; 0x64fe <moveOnDirectionReal+0x50c>
				{
					Stop();
    64e0:	0e 94 30 27 	call	0x4e60	; 0x4e60 <Stop>
					LCDClear();
    64e4:	81 e0       	ldi	r24, 0x01	; 1
    64e6:	60 e0       	ldi	r22, 0x00	; 0
    64e8:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <LCDByte>
					LCDWriteStringXY(0,0,"Nedefinisan atan");
    64ec:	80 e0       	ldi	r24, 0x00	; 0
    64ee:	60 e0       	ldi	r22, 0x00	; 0
    64f0:	0e 94 14 27 	call	0x4e28	; 0x4e28 <LCDGotoXY>
    64f4:	82 e5       	ldi	r24, 0x52	; 82
    64f6:	91 e0       	ldi	r25, 0x01	; 1
    64f8:	0e 94 6d 26 	call	0x4cda	; 0x4cda <LCDWriteString>
    64fc:	ff cf       	rjmp	.-2      	; 0x64fc <moveOnDirectionReal+0x50a>
					while(1);	
				}	
				
				teta_zeljen = (int)(atan2(xl, yl) / (2 * PI) * 360);
    64fe:	6b 89       	ldd	r22, Y+19	; 0x13
    6500:	7c 89       	ldd	r23, Y+20	; 0x14
    6502:	8d 89       	ldd	r24, Y+21	; 0x15
    6504:	9e 89       	ldd	r25, Y+22	; 0x16
    6506:	0e 94 3f 3c 	call	0x787e	; 0x787e <__floatsisf>
    650a:	7b 01       	movw	r14, r22
    650c:	8c 01       	movw	r16, r24
    650e:	6f 85       	ldd	r22, Y+15	; 0x0f
    6510:	78 89       	ldd	r23, Y+16	; 0x10
    6512:	89 89       	ldd	r24, Y+17	; 0x11
    6514:	9a 89       	ldd	r25, Y+18	; 0x12
    6516:	0e 94 3f 3c 	call	0x787e	; 0x787e <__floatsisf>
    651a:	9b 01       	movw	r18, r22
    651c:	ac 01       	movw	r20, r24
    651e:	c8 01       	movw	r24, r16
    6520:	b7 01       	movw	r22, r14
    6522:	0e 94 4a 3b 	call	0x7694	; 0x7694 <atan2>
    6526:	dc 01       	movw	r26, r24
    6528:	cb 01       	movw	r24, r22
    652a:	bc 01       	movw	r22, r24
    652c:	cd 01       	movw	r24, r26
    652e:	2b ed       	ldi	r18, 0xDB	; 219
    6530:	3f e0       	ldi	r19, 0x0F	; 15
    6532:	49 ec       	ldi	r20, 0xC9	; 201
    6534:	50 e4       	ldi	r21, 0x40	; 64
    6536:	0e 94 a4 3b 	call	0x7748	; 0x7748 <__divsf3>
    653a:	dc 01       	movw	r26, r24
    653c:	cb 01       	movw	r24, r22
    653e:	bc 01       	movw	r22, r24
    6540:	cd 01       	movw	r24, r26
    6542:	20 e0       	ldi	r18, 0x00	; 0
    6544:	30 e0       	ldi	r19, 0x00	; 0
    6546:	44 eb       	ldi	r20, 0xB4	; 180
    6548:	53 e4       	ldi	r21, 0x43	; 67
    654a:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    654e:	dc 01       	movw	r26, r24
    6550:	cb 01       	movw	r24, r22
    6552:	bc 01       	movw	r22, r24
    6554:	cd 01       	movw	r24, r26
    6556:	0e 94 0c 3c 	call	0x7818	; 0x7818 <__fixsfsi>
    655a:	dc 01       	movw	r26, r24
    655c:	cb 01       	movw	r24, r22
    655e:	98 a3       	std	Y+32, r25	; 0x20
    6560:	8f 8f       	std	Y+31, r24	; 0x1f
                teta_zeljen += 180;
    6562:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6564:	98 a1       	ldd	r25, Y+32	; 0x20
    6566:	8c 54       	subi	r24, 0x4C	; 76
    6568:	9f 4f       	sbci	r25, 0xFF	; 255
    656a:	98 a3       	std	Y+32, r25	; 0x20
    656c:	8f 8f       	std	Y+31, r24	; 0x1f
                setCommandInt('T', teta_zeljen);
    656e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    6570:	38 a1       	ldd	r19, Y+32	; 0x20
    6572:	84 e5       	ldi	r24, 0x54	; 84
    6574:	b9 01       	movw	r22, r18
    6576:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <setCommandInt>
            }
        }
	
		if(breakTime>0)
    657a:	88 a9       	ldd	r24, Y+48	; 0x30
    657c:	99 a9       	ldd	r25, Y+49	; 0x31
    657e:	18 16       	cp	r1, r24
    6580:	19 06       	cpc	r1, r25
    6582:	84 f4       	brge	.+32     	; 0x65a4 <moveOnDirectionReal+0x5b2>
		{
			if(protocniDelay(breakTime))
    6584:	88 a9       	ldd	r24, Y+48	; 0x30
    6586:	99 a9       	ldd	r25, Y+49	; 0x31
    6588:	aa 27       	eor	r26, r26
    658a:	97 fd       	sbrc	r25, 7
    658c:	a0 95       	com	r26
    658e:	ba 2f       	mov	r27, r26
    6590:	bc 01       	movw	r22, r24
    6592:	cd 01       	movw	r24, r26
    6594:	0e 94 0a 35 	call	0x6a14	; 0x6a14 <protocniDelay>
    6598:	88 23       	and	r24, r24
    659a:	21 f0       	breq	.+8      	; 0x65a4 <moveOnDirectionReal+0x5b2>
			{
				Stop();
    659c:	0e 94 30 27 	call	0x4e60	; 0x4e60 <Stop>
				
				return 0;
    65a0:	1a aa       	std	Y+50, r1	; 0x32
    65a2:	6f c0       	rjmp	.+222    	; 0x6682 <moveOnDirectionReal+0x690>
			}			
		}
		
		if(getDetections(detection,direction))
    65a4:	9b a5       	ldd	r25, Y+43	; 0x2b
    65a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    65a8:	69 2f       	mov	r22, r25
    65aa:	0e 94 a6 04 	call	0x94c	; 0x94c <getDetections>
    65ae:	88 23       	and	r24, r24
    65b0:	39 f0       	breq	.+14     	; 0x65c0 <moveOnDirectionReal+0x5ce>
		{
			Stop();
    65b2:	0e 94 30 27 	call	0x4e60	; 0x4e60 <Stop>
			
			counting = 0;
    65b6:	10 92 71 01 	sts	0x0171, r1
			
			return 1;
    65ba:	41 e0       	ldi	r20, 0x01	; 1
    65bc:	4a ab       	std	Y+50, r20	; 0x32
    65be:	61 c0       	rjmp	.+194    	; 0x6682 <moveOnDirectionReal+0x690>
		}
		
		if(protocniDelayZwei(2500))
    65c0:	64 ec       	ldi	r22, 0xC4	; 196
    65c2:	79 e0       	ldi	r23, 0x09	; 9
    65c4:	80 e0       	ldi	r24, 0x00	; 0
    65c6:	90 e0       	ldi	r25, 0x00	; 0
    65c8:	0e 94 5a 35 	call	0x6ab4	; 0x6ab4 <protocniDelayZwei>
    65cc:	88 23       	and	r24, r24
    65ce:	09 f4       	brne	.+2      	; 0x65d2 <moveOnDirectionReal+0x5e0>
    65d0:	49 c0       	rjmp	.+146    	; 0x6664 <moveOnDirectionReal+0x672>
		{
			
			if(((x < zastita_X + 2) && (x > zastita_X - 2)) && (y < zastita_Y + 2) && (y > zastita_Y - 2))
    65d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    65d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    65d6:	9c 01       	movw	r18, r24
    65d8:	2e 5f       	subi	r18, 0xFE	; 254
    65da:	3f 4f       	sbci	r19, 0xFF	; 255
    65dc:	8f a1       	ldd	r24, Y+39	; 0x27
    65de:	98 a5       	ldd	r25, Y+40	; 0x28
    65e0:	82 17       	cp	r24, r18
    65e2:	93 07       	cpc	r25, r19
    65e4:	bc f5       	brge	.+110    	; 0x6654 <moveOnDirectionReal+0x662>
    65e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    65e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    65ea:	9c 01       	movw	r18, r24
    65ec:	22 50       	subi	r18, 0x02	; 2
    65ee:	30 40       	sbci	r19, 0x00	; 0
    65f0:	8f a1       	ldd	r24, Y+39	; 0x27
    65f2:	98 a5       	ldd	r25, Y+40	; 0x28
    65f4:	28 17       	cp	r18, r24
    65f6:	39 07       	cpc	r19, r25
    65f8:	6c f5       	brge	.+90     	; 0x6654 <moveOnDirectionReal+0x662>
    65fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    65fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    65fe:	9c 01       	movw	r18, r24
    6600:	2e 5f       	subi	r18, 0xFE	; 254
    6602:	3f 4f       	sbci	r19, 0xFF	; 255
    6604:	8d a1       	ldd	r24, Y+37	; 0x25
    6606:	9e a1       	ldd	r25, Y+38	; 0x26
    6608:	82 17       	cp	r24, r18
    660a:	93 07       	cpc	r25, r19
    660c:	1c f5       	brge	.+70     	; 0x6654 <moveOnDirectionReal+0x662>
    660e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6610:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6612:	9c 01       	movw	r18, r24
    6614:	22 50       	subi	r18, 0x02	; 2
    6616:	30 40       	sbci	r19, 0x00	; 0
    6618:	8d a1       	ldd	r24, Y+37	; 0x25
    661a:	9e a1       	ldd	r25, Y+38	; 0x26
    661c:	28 17       	cp	r18, r24
    661e:	39 07       	cpc	r19, r25
    6620:	cc f4       	brge	.+50     	; 0x6654 <moveOnDirectionReal+0x662>
			{
				 Stop();
    6622:	0e 94 30 27 	call	0x4e60	; 0x4e60 <Stop>
				 
				 pauza_ms(50);
    6626:	62 e3       	ldi	r22, 0x32	; 50
    6628:	70 e0       	ldi	r23, 0x00	; 0
    662a:	80 e0       	ldi	r24, 0x00	; 0
    662c:	90 e0       	ldi	r25, 0x00	; 0
    662e:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
				 
				 moveOnDirection(200,-direction,NORMALSPEED,ALL_DETECTIONS_OFF,0);
    6632:	8b a5       	ldd	r24, Y+43	; 0x2b
    6634:	9c a5       	ldd	r25, Y+44	; 0x2c
    6636:	22 27       	eor	r18, r18
    6638:	33 27       	eor	r19, r19
    663a:	28 1b       	sub	r18, r24
    663c:	39 0b       	sbc	r19, r25
    663e:	88 ec       	ldi	r24, 0xC8	; 200
    6640:	90 e0       	ldi	r25, 0x00	; 0
    6642:	b9 01       	movw	r22, r18
    6644:	44 ec       	ldi	r20, 0xC4	; 196
    6646:	59 e0       	ldi	r21, 0x09	; 9
    6648:	23 e0       	ldi	r18, 0x03	; 3
    664a:	00 e0       	ldi	r16, 0x00	; 0
    664c:	10 e0       	ldi	r17, 0x00	; 0
    664e:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
    6652:	ff cf       	rjmp	.-2      	; 0x6652 <moveOnDirectionReal+0x660>
				
				return 1;
			}
			
			
			zastita_X = x;
    6654:	8f a1       	ldd	r24, Y+39	; 0x27
    6656:	98 a5       	ldd	r25, Y+40	; 0x28
    6658:	9e 8f       	std	Y+30, r25	; 0x1e
    665a:	8d 8f       	std	Y+29, r24	; 0x1d
			zastita_Y = y;	
    665c:	8d a1       	ldd	r24, Y+37	; 0x25
    665e:	9e a1       	ldd	r25, Y+38	; 0x26
    6660:	9c 8f       	std	Y+28, r25	; 0x1c
    6662:	8b 8f       	std	Y+27, r24	; 0x1b
		}
				
	writeTime();
    6664:	0e 94 68 04 	call	0x8d0	; 0x8d0 <writeTime>
    }while(absolut(d_zeljena_mm) >  NORMALPRECISION );
    6668:	8f 89       	ldd	r24, Y+23	; 0x17
    666a:	98 8d       	ldd	r25, Y+24	; 0x18
    666c:	0e 94 bc 29 	call	0x5378	; 0x5378 <absolut>
    6670:	86 30       	cpi	r24, 0x06	; 6
    6672:	91 05       	cpc	r25, r1
    6674:	0c f0       	brlt	.+2      	; 0x6678 <moveOnDirectionReal+0x686>
    6676:	b8 cd       	rjmp	.-1168   	; 0x61e8 <moveOnDirectionReal+0x1f6>
	
	counting = 0;
    6678:	10 92 71 01 	sts	0x0171, r1
	countingZwei = 0;
    667c:	10 92 72 01 	sts	0x0172, r1

	return 0;
    6680:	1a aa       	std	Y+50, r1	; 0x32
    6682:	8a a9       	ldd	r24, Y+50	; 0x32
}
    6684:	e2 96       	adiw	r28, 0x32	; 50
    6686:	0f b6       	in	r0, 0x3f	; 63
    6688:	f8 94       	cli
    668a:	de bf       	out	0x3e, r29	; 62
    668c:	0f be       	out	0x3f, r0	; 63
    668e:	cd bf       	out	0x3d, r28	; 61
    6690:	cf 91       	pop	r28
    6692:	df 91       	pop	r29
    6694:	1f 91       	pop	r17
    6696:	0f 91       	pop	r16
    6698:	ff 90       	pop	r15
    669a:	ef 90       	pop	r14
    669c:	df 90       	pop	r13
    669e:	cf 90       	pop	r12
    66a0:	bf 90       	pop	r11
    66a2:	af 90       	pop	r10
    66a4:	9f 90       	pop	r9
    66a6:	8f 90       	pop	r8
    66a8:	7f 90       	pop	r7
    66aa:	6f 90       	pop	r6
    66ac:	08 95       	ret

000066ae <moveOnDirection>:

char moveOnDirection(int value,short direction,int speed,char detection,int breakTime)
{
    66ae:	ef 92       	push	r14
    66b0:	ff 92       	push	r15
    66b2:	0f 93       	push	r16
    66b4:	1f 93       	push	r17
    66b6:	df 93       	push	r29
    66b8:	cf 93       	push	r28
    66ba:	cd b7       	in	r28, 0x3d	; 61
    66bc:	de b7       	in	r29, 0x3e	; 62
    66be:	e1 97       	sbiw	r28, 0x31	; 49
    66c0:	0f b6       	in	r0, 0x3f	; 63
    66c2:	f8 94       	cli
    66c4:	de bf       	out	0x3e, r29	; 62
    66c6:	0f be       	out	0x3f, r0	; 63
    66c8:	cd bf       	out	0x3d, r28	; 61
    66ca:	99 a7       	std	Y+41, r25	; 0x29
    66cc:	88 a7       	std	Y+40, r24	; 0x28
    66ce:	7b a7       	std	Y+43, r23	; 0x2b
    66d0:	6a a7       	std	Y+42, r22	; 0x2a
    66d2:	5d a7       	std	Y+45, r21	; 0x2d
    66d4:	4c a7       	std	Y+44, r20	; 0x2c
    66d6:	2e a7       	std	Y+46, r18	; 0x2e
    66d8:	18 ab       	std	Y+48, r17	; 0x30
    66da:	0f a7       	std	Y+47, r16	; 0x2f
	int X_pocetno,Y_pocetno,x,y,predjeni_put=0;
    66dc:	1f 8e       	std	Y+31, r1	; 0x1f
    66de:	1e 8e       	std	Y+30, r1	; 0x1e
	char collisionCounter = 0;
    66e0:	1d 8e       	std	Y+29, r1	; 0x1d
	
	X_pocetno = readX();
    66e2:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <readX>
    66e6:	9f a3       	std	Y+39, r25	; 0x27
    66e8:	8e a3       	std	Y+38, r24	; 0x26
	Y_pocetno = readY();
    66ea:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <readY>
    66ee:	9d a3       	std	Y+37, r25	; 0x25
    66f0:	8c a3       	std	Y+36, r24	; 0x24
    66f2:	5f c1       	rjmp	.+702    	; 0x69b2 <moveOnDirection+0x304>
	
	while(moveOnDirectionReal(value,direction,speed,detection,breakTime))
    66f4:	80 e0       	ldi	r24, 0x00	; 0
    66f6:	90 e0       	ldi	r25, 0x00	; 0
    66f8:	a0 ea       	ldi	r26, 0xA0	; 160
    66fa:	b1 e4       	ldi	r27, 0x41	; 65
    66fc:	89 8f       	std	Y+25, r24	; 0x19
    66fe:	9a 8f       	std	Y+26, r25	; 0x1a
    6700:	ab 8f       	std	Y+27, r26	; 0x1b
    6702:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6704:	69 8d       	ldd	r22, Y+25	; 0x19
    6706:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6708:	8b 8d       	ldd	r24, Y+27	; 0x1b
    670a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    670c:	2d ec       	ldi	r18, 0xCD	; 205
    670e:	3c ec       	ldi	r19, 0xCC	; 204
    6710:	4c e2       	ldi	r20, 0x2C	; 44
    6712:	55 e4       	ldi	r21, 0x45	; 69
    6714:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    6718:	dc 01       	movw	r26, r24
    671a:	cb 01       	movw	r24, r22
    671c:	8d 8b       	std	Y+21, r24	; 0x15
    671e:	9e 8b       	std	Y+22, r25	; 0x16
    6720:	af 8b       	std	Y+23, r26	; 0x17
    6722:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6724:	6d 89       	ldd	r22, Y+21	; 0x15
    6726:	7e 89       	ldd	r23, Y+22	; 0x16
    6728:	8f 89       	ldd	r24, Y+23	; 0x17
    672a:	98 8d       	ldd	r25, Y+24	; 0x18
    672c:	20 e0       	ldi	r18, 0x00	; 0
    672e:	30 e0       	ldi	r19, 0x00	; 0
    6730:	40 e8       	ldi	r20, 0x80	; 128
    6732:	5f e3       	ldi	r21, 0x3F	; 63
    6734:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    6738:	88 23       	and	r24, r24
    673a:	2c f4       	brge	.+10     	; 0x6746 <moveOnDirection+0x98>
		__ticks = 1;
    673c:	81 e0       	ldi	r24, 0x01	; 1
    673e:	90 e0       	ldi	r25, 0x00	; 0
    6740:	9c 8b       	std	Y+20, r25	; 0x14
    6742:	8b 8b       	std	Y+19, r24	; 0x13
    6744:	3f c0       	rjmp	.+126    	; 0x67c4 <moveOnDirection+0x116>
	else if (__tmp > 65535)
    6746:	6d 89       	ldd	r22, Y+21	; 0x15
    6748:	7e 89       	ldd	r23, Y+22	; 0x16
    674a:	8f 89       	ldd	r24, Y+23	; 0x17
    674c:	98 8d       	ldd	r25, Y+24	; 0x18
    674e:	20 e0       	ldi	r18, 0x00	; 0
    6750:	3f ef       	ldi	r19, 0xFF	; 255
    6752:	4f e7       	ldi	r20, 0x7F	; 127
    6754:	57 e4       	ldi	r21, 0x47	; 71
    6756:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    675a:	18 16       	cp	r1, r24
    675c:	4c f5       	brge	.+82     	; 0x67b0 <moveOnDirection+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    675e:	69 8d       	ldd	r22, Y+25	; 0x19
    6760:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6762:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6764:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6766:	20 e0       	ldi	r18, 0x00	; 0
    6768:	30 e0       	ldi	r19, 0x00	; 0
    676a:	40 e2       	ldi	r20, 0x20	; 32
    676c:	51 e4       	ldi	r21, 0x41	; 65
    676e:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    6772:	dc 01       	movw	r26, r24
    6774:	cb 01       	movw	r24, r22
    6776:	bc 01       	movw	r22, r24
    6778:	cd 01       	movw	r24, r26
    677a:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    677e:	dc 01       	movw	r26, r24
    6780:	cb 01       	movw	r24, r22
    6782:	9c 8b       	std	Y+20, r25	; 0x14
    6784:	8b 8b       	std	Y+19, r24	; 0x13
    6786:	0f c0       	rjmp	.+30     	; 0x67a6 <moveOnDirection+0xf8>
    6788:	84 e1       	ldi	r24, 0x14	; 20
    678a:	91 e0       	ldi	r25, 0x01	; 1
    678c:	9a 8b       	std	Y+18, r25	; 0x12
    678e:	89 8b       	std	Y+17, r24	; 0x11
    6790:	89 89       	ldd	r24, Y+17	; 0x11
    6792:	9a 89       	ldd	r25, Y+18	; 0x12
    6794:	01 97       	sbiw	r24, 0x01	; 1
    6796:	f1 f7       	brne	.-4      	; 0x6794 <moveOnDirection+0xe6>
    6798:	9a 8b       	std	Y+18, r25	; 0x12
    679a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    679c:	8b 89       	ldd	r24, Y+19	; 0x13
    679e:	9c 89       	ldd	r25, Y+20	; 0x14
    67a0:	01 97       	sbiw	r24, 0x01	; 1
    67a2:	9c 8b       	std	Y+20, r25	; 0x14
    67a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    67a6:	8b 89       	ldd	r24, Y+19	; 0x13
    67a8:	9c 89       	ldd	r25, Y+20	; 0x14
    67aa:	00 97       	sbiw	r24, 0x00	; 0
    67ac:	69 f7       	brne	.-38     	; 0x6788 <moveOnDirection+0xda>
    67ae:	14 c0       	rjmp	.+40     	; 0x67d8 <moveOnDirection+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    67b0:	6d 89       	ldd	r22, Y+21	; 0x15
    67b2:	7e 89       	ldd	r23, Y+22	; 0x16
    67b4:	8f 89       	ldd	r24, Y+23	; 0x17
    67b6:	98 8d       	ldd	r25, Y+24	; 0x18
    67b8:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    67bc:	dc 01       	movw	r26, r24
    67be:	cb 01       	movw	r24, r22
    67c0:	9c 8b       	std	Y+20, r25	; 0x14
    67c2:	8b 8b       	std	Y+19, r24	; 0x13
    67c4:	8b 89       	ldd	r24, Y+19	; 0x13
    67c6:	9c 89       	ldd	r25, Y+20	; 0x14
    67c8:	98 8b       	std	Y+16, r25	; 0x10
    67ca:	8f 87       	std	Y+15, r24	; 0x0f
    67cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    67ce:	98 89       	ldd	r25, Y+16	; 0x10
    67d0:	01 97       	sbiw	r24, 0x01	; 1
    67d2:	f1 f7       	brne	.-4      	; 0x67d0 <moveOnDirection+0x122>
    67d4:	98 8b       	std	Y+16, r25	; 0x10
    67d6:	8f 87       	std	Y+15, r24	; 0x0f
	{			

		_delay_ms(20);
			
		moveOnDirection(10,direction*(-1),LOWSPEED,ALL_DETECTIONS_OFF,0);
    67d8:	8a a5       	ldd	r24, Y+42	; 0x2a
    67da:	9b a5       	ldd	r25, Y+43	; 0x2b
    67dc:	22 27       	eor	r18, r18
    67de:	33 27       	eor	r19, r19
    67e0:	28 1b       	sub	r18, r24
    67e2:	39 0b       	sbc	r19, r25
    67e4:	8a e0       	ldi	r24, 0x0A	; 10
    67e6:	90 e0       	ldi	r25, 0x00	; 0
    67e8:	b9 01       	movw	r22, r18
    67ea:	48 ee       	ldi	r20, 0xE8	; 232
    67ec:	53 e0       	ldi	r21, 0x03	; 3
    67ee:	23 e0       	ldi	r18, 0x03	; 3
    67f0:	00 e0       	ldi	r16, 0x00	; 0
    67f2:	10 e0       	ldi	r17, 0x00	; 0
    67f4:	0e 94 57 33 	call	0x66ae	; 0x66ae <moveOnDirection>
    67f8:	80 e0       	ldi	r24, 0x00	; 0
    67fa:	90 e0       	ldi	r25, 0x00	; 0
    67fc:	aa e7       	ldi	r26, 0x7A	; 122
    67fe:	b4 e4       	ldi	r27, 0x44	; 68
    6800:	8b 87       	std	Y+11, r24	; 0x0b
    6802:	9c 87       	std	Y+12, r25	; 0x0c
    6804:	ad 87       	std	Y+13, r26	; 0x0d
    6806:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6808:	6b 85       	ldd	r22, Y+11	; 0x0b
    680a:	7c 85       	ldd	r23, Y+12	; 0x0c
    680c:	8d 85       	ldd	r24, Y+13	; 0x0d
    680e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6810:	2d ec       	ldi	r18, 0xCD	; 205
    6812:	3c ec       	ldi	r19, 0xCC	; 204
    6814:	4c e2       	ldi	r20, 0x2C	; 44
    6816:	55 e4       	ldi	r21, 0x45	; 69
    6818:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    681c:	dc 01       	movw	r26, r24
    681e:	cb 01       	movw	r24, r22
    6820:	8f 83       	std	Y+7, r24	; 0x07
    6822:	98 87       	std	Y+8, r25	; 0x08
    6824:	a9 87       	std	Y+9, r26	; 0x09
    6826:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6828:	6f 81       	ldd	r22, Y+7	; 0x07
    682a:	78 85       	ldd	r23, Y+8	; 0x08
    682c:	89 85       	ldd	r24, Y+9	; 0x09
    682e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6830:	20 e0       	ldi	r18, 0x00	; 0
    6832:	30 e0       	ldi	r19, 0x00	; 0
    6834:	40 e8       	ldi	r20, 0x80	; 128
    6836:	5f e3       	ldi	r21, 0x3F	; 63
    6838:	0e 94 9d 3b 	call	0x773a	; 0x773a <__cmpsf2>
    683c:	88 23       	and	r24, r24
    683e:	2c f4       	brge	.+10     	; 0x684a <moveOnDirection+0x19c>
		__ticks = 1;
    6840:	81 e0       	ldi	r24, 0x01	; 1
    6842:	90 e0       	ldi	r25, 0x00	; 0
    6844:	9e 83       	std	Y+6, r25	; 0x06
    6846:	8d 83       	std	Y+5, r24	; 0x05
    6848:	3f c0       	rjmp	.+126    	; 0x68c8 <moveOnDirection+0x21a>
	else if (__tmp > 65535)
    684a:	6f 81       	ldd	r22, Y+7	; 0x07
    684c:	78 85       	ldd	r23, Y+8	; 0x08
    684e:	89 85       	ldd	r24, Y+9	; 0x09
    6850:	9a 85       	ldd	r25, Y+10	; 0x0a
    6852:	20 e0       	ldi	r18, 0x00	; 0
    6854:	3f ef       	ldi	r19, 0xFF	; 255
    6856:	4f e7       	ldi	r20, 0x7F	; 127
    6858:	57 e4       	ldi	r21, 0x47	; 71
    685a:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <__gesf2>
    685e:	18 16       	cp	r1, r24
    6860:	4c f5       	brge	.+82     	; 0x68b4 <moveOnDirection+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6862:	6b 85       	ldd	r22, Y+11	; 0x0b
    6864:	7c 85       	ldd	r23, Y+12	; 0x0c
    6866:	8d 85       	ldd	r24, Y+13	; 0x0d
    6868:	9e 85       	ldd	r25, Y+14	; 0x0e
    686a:	20 e0       	ldi	r18, 0x00	; 0
    686c:	30 e0       	ldi	r19, 0x00	; 0
    686e:	40 e2       	ldi	r20, 0x20	; 32
    6870:	51 e4       	ldi	r21, 0x41	; 65
    6872:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    6876:	dc 01       	movw	r26, r24
    6878:	cb 01       	movw	r24, r22
    687a:	bc 01       	movw	r22, r24
    687c:	cd 01       	movw	r24, r26
    687e:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    6882:	dc 01       	movw	r26, r24
    6884:	cb 01       	movw	r24, r22
    6886:	9e 83       	std	Y+6, r25	; 0x06
    6888:	8d 83       	std	Y+5, r24	; 0x05
    688a:	0f c0       	rjmp	.+30     	; 0x68aa <moveOnDirection+0x1fc>
    688c:	84 e1       	ldi	r24, 0x14	; 20
    688e:	91 e0       	ldi	r25, 0x01	; 1
    6890:	9c 83       	std	Y+4, r25	; 0x04
    6892:	8b 83       	std	Y+3, r24	; 0x03
    6894:	8b 81       	ldd	r24, Y+3	; 0x03
    6896:	9c 81       	ldd	r25, Y+4	; 0x04
    6898:	01 97       	sbiw	r24, 0x01	; 1
    689a:	f1 f7       	brne	.-4      	; 0x6898 <moveOnDirection+0x1ea>
    689c:	9c 83       	std	Y+4, r25	; 0x04
    689e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    68a0:	8d 81       	ldd	r24, Y+5	; 0x05
    68a2:	9e 81       	ldd	r25, Y+6	; 0x06
    68a4:	01 97       	sbiw	r24, 0x01	; 1
    68a6:	9e 83       	std	Y+6, r25	; 0x06
    68a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    68aa:	8d 81       	ldd	r24, Y+5	; 0x05
    68ac:	9e 81       	ldd	r25, Y+6	; 0x06
    68ae:	00 97       	sbiw	r24, 0x00	; 0
    68b0:	69 f7       	brne	.-38     	; 0x688c <moveOnDirection+0x1de>
    68b2:	14 c0       	rjmp	.+40     	; 0x68dc <moveOnDirection+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    68b4:	6f 81       	ldd	r22, Y+7	; 0x07
    68b6:	78 85       	ldd	r23, Y+8	; 0x08
    68b8:	89 85       	ldd	r24, Y+9	; 0x09
    68ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    68bc:	0e 94 11 3c 	call	0x7822	; 0x7822 <__fixunssfsi>
    68c0:	dc 01       	movw	r26, r24
    68c2:	cb 01       	movw	r24, r22
    68c4:	9e 83       	std	Y+6, r25	; 0x06
    68c6:	8d 83       	std	Y+5, r24	; 0x05
    68c8:	8d 81       	ldd	r24, Y+5	; 0x05
    68ca:	9e 81       	ldd	r25, Y+6	; 0x06
    68cc:	9a 83       	std	Y+2, r25	; 0x02
    68ce:	89 83       	std	Y+1, r24	; 0x01
    68d0:	89 81       	ldd	r24, Y+1	; 0x01
    68d2:	9a 81       	ldd	r25, Y+2	; 0x02
    68d4:	01 97       	sbiw	r24, 0x01	; 1
    68d6:	f1 f7       	brne	.-4      	; 0x68d4 <moveOnDirection+0x226>
    68d8:	9a 83       	std	Y+2, r25	; 0x02
    68da:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
	
		x = readX();
    68dc:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <readX>
    68e0:	9b a3       	std	Y+35, r25	; 0x23
    68e2:	8a a3       	std	Y+34, r24	; 0x22
		y = readY();
    68e4:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <readY>
    68e8:	99 a3       	std	Y+33, r25	; 0x21
    68ea:	88 a3       	std	Y+32, r24	; 0x20
		
		predjeni_put = sqrt(pow((x-X_pocetno),2) + pow((y-Y_pocetno),2));
    68ec:	2a a1       	ldd	r18, Y+34	; 0x22
    68ee:	3b a1       	ldd	r19, Y+35	; 0x23
    68f0:	8e a1       	ldd	r24, Y+38	; 0x26
    68f2:	9f a1       	ldd	r25, Y+39	; 0x27
    68f4:	a9 01       	movw	r20, r18
    68f6:	48 1b       	sub	r20, r24
    68f8:	59 0b       	sbc	r21, r25
    68fa:	ca 01       	movw	r24, r20
    68fc:	aa 27       	eor	r26, r26
    68fe:	97 fd       	sbrc	r25, 7
    6900:	a0 95       	com	r26
    6902:	ba 2f       	mov	r27, r26
    6904:	bc 01       	movw	r22, r24
    6906:	cd 01       	movw	r24, r26
    6908:	0e 94 3f 3c 	call	0x787e	; 0x787e <__floatsisf>
    690c:	9b 01       	movw	r18, r22
    690e:	ac 01       	movw	r20, r24
    6910:	ca 01       	movw	r24, r20
    6912:	b9 01       	movw	r22, r18
    6914:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    6918:	dc 01       	movw	r26, r24
    691a:	cb 01       	movw	r24, r22
    691c:	7c 01       	movw	r14, r24
    691e:	8d 01       	movw	r16, r26
    6920:	28 a1       	ldd	r18, Y+32	; 0x20
    6922:	39 a1       	ldd	r19, Y+33	; 0x21
    6924:	8c a1       	ldd	r24, Y+36	; 0x24
    6926:	9d a1       	ldd	r25, Y+37	; 0x25
    6928:	a9 01       	movw	r20, r18
    692a:	48 1b       	sub	r20, r24
    692c:	59 0b       	sbc	r21, r25
    692e:	ca 01       	movw	r24, r20
    6930:	aa 27       	eor	r26, r26
    6932:	97 fd       	sbrc	r25, 7
    6934:	a0 95       	com	r26
    6936:	ba 2f       	mov	r27, r26
    6938:	bc 01       	movw	r22, r24
    693a:	cd 01       	movw	r24, r26
    693c:	0e 94 3f 3c 	call	0x787e	; 0x787e <__floatsisf>
    6940:	9b 01       	movw	r18, r22
    6942:	ac 01       	movw	r20, r24
    6944:	ca 01       	movw	r24, r20
    6946:	b9 01       	movw	r22, r18
    6948:	0e 94 58 3d 	call	0x7ab0	; 0x7ab0 <__mulsf3>
    694c:	dc 01       	movw	r26, r24
    694e:	cb 01       	movw	r24, r22
    6950:	9c 01       	movw	r18, r24
    6952:	ad 01       	movw	r20, r26
    6954:	c8 01       	movw	r24, r16
    6956:	b7 01       	movw	r22, r14
    6958:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <__addsf3>
    695c:	dc 01       	movw	r26, r24
    695e:	cb 01       	movw	r24, r22
    6960:	bc 01       	movw	r22, r24
    6962:	cd 01       	movw	r24, r26
    6964:	0e 94 c5 3d 	call	0x7b8a	; 0x7b8a <sqrt>
    6968:	dc 01       	movw	r26, r24
    696a:	cb 01       	movw	r24, r22
    696c:	bc 01       	movw	r22, r24
    696e:	cd 01       	movw	r24, r26
    6970:	0e 94 0c 3c 	call	0x7818	; 0x7818 <__fixsfsi>
    6974:	dc 01       	movw	r26, r24
    6976:	cb 01       	movw	r24, r22
    6978:	9f 8f       	std	Y+31, r25	; 0x1f
    697a:	8e 8f       	std	Y+30, r24	; 0x1e
		
		X_pocetno = x;
    697c:	8a a1       	ldd	r24, Y+34	; 0x22
    697e:	9b a1       	ldd	r25, Y+35	; 0x23
    6980:	9f a3       	std	Y+39, r25	; 0x27
    6982:	8e a3       	std	Y+38, r24	; 0x26
		Y_pocetno = y;
    6984:	88 a1       	ldd	r24, Y+32	; 0x20
    6986:	99 a1       	ldd	r25, Y+33	; 0x21
    6988:	9d a3       	std	Y+37, r25	; 0x25
    698a:	8c a3       	std	Y+36, r24	; 0x24
			
		value -= predjeni_put;
    698c:	28 a5       	ldd	r18, Y+40	; 0x28
    698e:	39 a5       	ldd	r19, Y+41	; 0x29
    6990:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6992:	9f 8d       	ldd	r25, Y+31	; 0x1f
    6994:	a9 01       	movw	r20, r18
    6996:	48 1b       	sub	r20, r24
    6998:	59 0b       	sbc	r21, r25
    699a:	ca 01       	movw	r24, r20
    699c:	99 a7       	std	Y+41, r25	; 0x29
    699e:	88 a7       	std	Y+40, r24	; 0x28
		
		if(++collisionCounter>=15)	//ako 10 puta vec pokusava da dostigne poziciju izlazi i vraca 1, onda je protivnicko ili nase malo govno zabagovano ispred
    69a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    69a2:	8f 5f       	subi	r24, 0xFF	; 255
    69a4:	8d 8f       	std	Y+29, r24	; 0x1d
    69a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    69a8:	8f 30       	cpi	r24, 0x0F	; 15
    69aa:	18 f0       	brcs	.+6      	; 0x69b2 <moveOnDirection+0x304>
			return 1;			
    69ac:	51 e0       	ldi	r21, 0x01	; 1
    69ae:	59 ab       	std	Y+49, r21	; 0x31
    69b0:	11 c0       	rjmp	.+34     	; 0x69d4 <moveOnDirection+0x326>
	char collisionCounter = 0;
	
	X_pocetno = readX();
	Y_pocetno = readY();
	
	while(moveOnDirectionReal(value,direction,speed,detection,breakTime))
    69b2:	88 a5       	ldd	r24, Y+40	; 0x28
    69b4:	99 a5       	ldd	r25, Y+41	; 0x29
    69b6:	2a a5       	ldd	r18, Y+42	; 0x2a
    69b8:	3b a5       	ldd	r19, Y+43	; 0x2b
    69ba:	4c a5       	ldd	r20, Y+44	; 0x2c
    69bc:	5d a5       	ldd	r21, Y+45	; 0x2d
    69be:	ef a5       	ldd	r30, Y+47	; 0x2f
    69c0:	f8 a9       	ldd	r31, Y+48	; 0x30
    69c2:	b9 01       	movw	r22, r18
    69c4:	2e a5       	ldd	r18, Y+46	; 0x2e
    69c6:	8f 01       	movw	r16, r30
    69c8:	0e 94 f9 2f 	call	0x5ff2	; 0x5ff2 <moveOnDirectionReal>
    69cc:	88 23       	and	r24, r24
    69ce:	09 f0       	breq	.+2      	; 0x69d2 <moveOnDirection+0x324>
    69d0:	91 ce       	rjmp	.-734    	; 0x66f4 <moveOnDirection+0x46>
		
		if(++collisionCounter>=15)	//ako 10 puta vec pokusava da dostigne poziciju izlazi i vraca 1, onda je protivnicko ili nase malo govno zabagovano ispred
			return 1;			
	}
	
	return 0;
    69d2:	19 aa       	std	Y+49, r1	; 0x31
    69d4:	89 a9       	ldd	r24, Y+49	; 0x31
	
    69d6:	e1 96       	adiw	r28, 0x31	; 49
    69d8:	0f b6       	in	r0, 0x3f	; 63
    69da:	f8 94       	cli
    69dc:	de bf       	out	0x3e, r29	; 62
    69de:	0f be       	out	0x3f, r0	; 63
    69e0:	cd bf       	out	0x3d, r28	; 61
    69e2:	cf 91       	pop	r28
    69e4:	df 91       	pop	r29
    69e6:	1f 91       	pop	r17
    69e8:	0f 91       	pop	r16
    69ea:	ff 90       	pop	r15
    69ec:	ef 90       	pop	r14
    69ee:	08 95       	ret

000069f0 <saljiKinezima>:
#include "system.h"

static tSys robot;

void saljiKinezima(unsigned char motor,unsigned char value)
{
    69f0:	df 93       	push	r29
    69f2:	cf 93       	push	r28
    69f4:	00 d0       	rcall	.+0      	; 0x69f6 <saljiKinezima+0x6>
    69f6:	cd b7       	in	r28, 0x3d	; 61
    69f8:	de b7       	in	r29, 0x3e	; 62
    69fa:	89 83       	std	Y+1, r24	; 0x01
    69fc:	6a 83       	std	Y+2, r22	; 0x02
	UART1_Write(motor);
    69fe:	89 81       	ldd	r24, Y+1	; 0x01
    6a00:	0e 94 9b 3a 	call	0x7536	; 0x7536 <UART1_Write>
	UART1_Write(value);
    6a04:	8a 81       	ldd	r24, Y+2	; 0x02
    6a06:	0e 94 9b 3a 	call	0x7536	; 0x7536 <UART1_Write>
}
    6a0a:	0f 90       	pop	r0
    6a0c:	0f 90       	pop	r0
    6a0e:	cf 91       	pop	r28
    6a10:	df 91       	pop	r29
    6a12:	08 95       	ret

00006a14 <protocniDelay>:

volatile unsigned char counting = 0;
static volatile unsigned long targetTime;

char protocniDelay(unsigned long zeljeno_vreme)
{	
    6a14:	df 93       	push	r29
    6a16:	cf 93       	push	r28
    6a18:	00 d0       	rcall	.+0      	; 0x6a1a <protocniDelay+0x6>
    6a1a:	00 d0       	rcall	.+0      	; 0x6a1c <protocniDelay+0x8>
    6a1c:	0f 92       	push	r0
    6a1e:	cd b7       	in	r28, 0x3d	; 61
    6a20:	de b7       	in	r29, 0x3e	; 62
    6a22:	69 83       	std	Y+1, r22	; 0x01
    6a24:	7a 83       	std	Y+2, r23	; 0x02
    6a26:	8b 83       	std	Y+3, r24	; 0x03
    6a28:	9c 83       	std	Y+4, r25	; 0x04
	if(counting == 0)
    6a2a:	80 91 71 01 	lds	r24, 0x0171
    6a2e:	88 23       	and	r24, r24
    6a30:	e9 f4       	brne	.+58     	; 0x6a6c <protocniDelay+0x58>
	{
		counting=1;
    6a32:	81 e0       	ldi	r24, 0x01	; 1
    6a34:	80 93 71 01 	sts	0x0171, r24
		targetTime=zeljeno_vreme+robot.systemTime;
    6a38:	20 91 74 01 	lds	r18, 0x0174
    6a3c:	30 91 75 01 	lds	r19, 0x0175
    6a40:	40 91 76 01 	lds	r20, 0x0176
    6a44:	50 91 77 01 	lds	r21, 0x0177
    6a48:	89 81       	ldd	r24, Y+1	; 0x01
    6a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    6a4c:	ab 81       	ldd	r26, Y+3	; 0x03
    6a4e:	bc 81       	ldd	r27, Y+4	; 0x04
    6a50:	82 0f       	add	r24, r18
    6a52:	93 1f       	adc	r25, r19
    6a54:	a4 1f       	adc	r26, r20
    6a56:	b5 1f       	adc	r27, r21
    6a58:	80 93 7b 01 	sts	0x017B, r24
    6a5c:	90 93 7c 01 	sts	0x017C, r25
    6a60:	a0 93 7d 01 	sts	0x017D, r26
    6a64:	b0 93 7e 01 	sts	0x017E, r27
		return 0;
    6a68:	1d 82       	std	Y+5, r1	; 0x05
    6a6a:	1b c0       	rjmp	.+54     	; 0x6aa2 <protocniDelay+0x8e>
	}	
	
	if(robot.systemTime >= targetTime)
    6a6c:	20 91 74 01 	lds	r18, 0x0174
    6a70:	30 91 75 01 	lds	r19, 0x0175
    6a74:	40 91 76 01 	lds	r20, 0x0176
    6a78:	50 91 77 01 	lds	r21, 0x0177
    6a7c:	80 91 7b 01 	lds	r24, 0x017B
    6a80:	90 91 7c 01 	lds	r25, 0x017C
    6a84:	a0 91 7d 01 	lds	r26, 0x017D
    6a88:	b0 91 7e 01 	lds	r27, 0x017E
    6a8c:	28 17       	cp	r18, r24
    6a8e:	39 07       	cpc	r19, r25
    6a90:	4a 07       	cpc	r20, r26
    6a92:	5b 07       	cpc	r21, r27
    6a94:	28 f0       	brcs	.+10     	; 0x6aa0 <protocniDelay+0x8c>
	{
		counting=0;
    6a96:	10 92 71 01 	sts	0x0171, r1
		return 1;
    6a9a:	81 e0       	ldi	r24, 0x01	; 1
    6a9c:	8d 83       	std	Y+5, r24	; 0x05
    6a9e:	01 c0       	rjmp	.+2      	; 0x6aa2 <protocniDelay+0x8e>
	}
	
	return 0;	
    6aa0:	1d 82       	std	Y+5, r1	; 0x05
    6aa2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    6aa4:	0f 90       	pop	r0
    6aa6:	0f 90       	pop	r0
    6aa8:	0f 90       	pop	r0
    6aaa:	0f 90       	pop	r0
    6aac:	0f 90       	pop	r0
    6aae:	cf 91       	pop	r28
    6ab0:	df 91       	pop	r29
    6ab2:	08 95       	ret

00006ab4 <protocniDelayZwei>:

volatile unsigned char countingZwei = 0;
static volatile unsigned long targetTimeZwei;

char protocniDelayZwei(unsigned long zeljeno_vreme)
{	
    6ab4:	df 93       	push	r29
    6ab6:	cf 93       	push	r28
    6ab8:	00 d0       	rcall	.+0      	; 0x6aba <protocniDelayZwei+0x6>
    6aba:	00 d0       	rcall	.+0      	; 0x6abc <protocniDelayZwei+0x8>
    6abc:	0f 92       	push	r0
    6abe:	cd b7       	in	r28, 0x3d	; 61
    6ac0:	de b7       	in	r29, 0x3e	; 62
    6ac2:	69 83       	std	Y+1, r22	; 0x01
    6ac4:	7a 83       	std	Y+2, r23	; 0x02
    6ac6:	8b 83       	std	Y+3, r24	; 0x03
    6ac8:	9c 83       	std	Y+4, r25	; 0x04
	if(countingZwei == 0)
    6aca:	80 91 72 01 	lds	r24, 0x0172
    6ace:	88 23       	and	r24, r24
    6ad0:	e9 f4       	brne	.+58     	; 0x6b0c <protocniDelayZwei+0x58>
	{
		countingZwei = 1;
    6ad2:	81 e0       	ldi	r24, 0x01	; 1
    6ad4:	80 93 72 01 	sts	0x0172, r24
		targetTimeZwei = zeljeno_vreme + robot.systemTime;
    6ad8:	20 91 74 01 	lds	r18, 0x0174
    6adc:	30 91 75 01 	lds	r19, 0x0175
    6ae0:	40 91 76 01 	lds	r20, 0x0176
    6ae4:	50 91 77 01 	lds	r21, 0x0177
    6ae8:	89 81       	ldd	r24, Y+1	; 0x01
    6aea:	9a 81       	ldd	r25, Y+2	; 0x02
    6aec:	ab 81       	ldd	r26, Y+3	; 0x03
    6aee:	bc 81       	ldd	r27, Y+4	; 0x04
    6af0:	82 0f       	add	r24, r18
    6af2:	93 1f       	adc	r25, r19
    6af4:	a4 1f       	adc	r26, r20
    6af6:	b5 1f       	adc	r27, r21
    6af8:	80 93 7f 01 	sts	0x017F, r24
    6afc:	90 93 80 01 	sts	0x0180, r25
    6b00:	a0 93 81 01 	sts	0x0181, r26
    6b04:	b0 93 82 01 	sts	0x0182, r27
		
		return 0;
    6b08:	1d 82       	std	Y+5, r1	; 0x05
    6b0a:	1b c0       	rjmp	.+54     	; 0x6b42 <protocniDelayZwei+0x8e>
	}	
	
	if(robot.systemTime >= targetTimeZwei)
    6b0c:	20 91 74 01 	lds	r18, 0x0174
    6b10:	30 91 75 01 	lds	r19, 0x0175
    6b14:	40 91 76 01 	lds	r20, 0x0176
    6b18:	50 91 77 01 	lds	r21, 0x0177
    6b1c:	80 91 7f 01 	lds	r24, 0x017F
    6b20:	90 91 80 01 	lds	r25, 0x0180
    6b24:	a0 91 81 01 	lds	r26, 0x0181
    6b28:	b0 91 82 01 	lds	r27, 0x0182
    6b2c:	28 17       	cp	r18, r24
    6b2e:	39 07       	cpc	r19, r25
    6b30:	4a 07       	cpc	r20, r26
    6b32:	5b 07       	cpc	r21, r27
    6b34:	28 f0       	brcs	.+10     	; 0x6b40 <protocniDelayZwei+0x8c>
	{
		countingZwei = 0;
    6b36:	10 92 72 01 	sts	0x0172, r1
		
		return 1;
    6b3a:	81 e0       	ldi	r24, 0x01	; 1
    6b3c:	8d 83       	std	Y+5, r24	; 0x05
    6b3e:	01 c0       	rjmp	.+2      	; 0x6b42 <protocniDelayZwei+0x8e>
	}
	
	return 0;	
    6b40:	1d 82       	std	Y+5, r1	; 0x05
    6b42:	8d 81       	ldd	r24, Y+5	; 0x05
}
    6b44:	0f 90       	pop	r0
    6b46:	0f 90       	pop	r0
    6b48:	0f 90       	pop	r0
    6b4a:	0f 90       	pop	r0
    6b4c:	0f 90       	pop	r0
    6b4e:	cf 91       	pop	r28
    6b50:	df 91       	pop	r29
    6b52:	08 95       	ret

00006b54 <pauza_ms>:

volatile char flagPauze;
volatile unsigned long passedTime;

void pauza_ms(unsigned long zeljeno_vreme)
{
    6b54:	df 93       	push	r29
    6b56:	cf 93       	push	r28
    6b58:	00 d0       	rcall	.+0      	; 0x6b5a <pauza_ms+0x6>
    6b5a:	00 d0       	rcall	.+0      	; 0x6b5c <pauza_ms+0x8>
    6b5c:	cd b7       	in	r28, 0x3d	; 61
    6b5e:	de b7       	in	r29, 0x3e	; 62
    6b60:	69 83       	std	Y+1, r22	; 0x01
    6b62:	7a 83       	std	Y+2, r23	; 0x02
    6b64:	8b 83       	std	Y+3, r24	; 0x03
    6b66:	9c 83       	std	Y+4, r25	; 0x04
	passedTime=0;
    6b68:	10 92 6d 02 	sts	0x026D, r1
    6b6c:	10 92 6e 02 	sts	0x026E, r1
    6b70:	10 92 6f 02 	sts	0x026F, r1
    6b74:	10 92 70 02 	sts	0x0270, r1
	flagPauze=1;
    6b78:	81 e0       	ldi	r24, 0x01	; 1
    6b7a:	80 93 71 02 	sts	0x0271, r24
	
	while(passedTime<=zeljeno_vreme);
    6b7e:	20 91 6d 02 	lds	r18, 0x026D
    6b82:	30 91 6e 02 	lds	r19, 0x026E
    6b86:	40 91 6f 02 	lds	r20, 0x026F
    6b8a:	50 91 70 02 	lds	r21, 0x0270
    6b8e:	89 81       	ldd	r24, Y+1	; 0x01
    6b90:	9a 81       	ldd	r25, Y+2	; 0x02
    6b92:	ab 81       	ldd	r26, Y+3	; 0x03
    6b94:	bc 81       	ldd	r27, Y+4	; 0x04
    6b96:	82 17       	cp	r24, r18
    6b98:	93 07       	cpc	r25, r19
    6b9a:	a4 07       	cpc	r26, r20
    6b9c:	b5 07       	cpc	r27, r21
    6b9e:	78 f7       	brcc	.-34     	; 0x6b7e <pauza_ms+0x2a>
	
	flagPauze=0;
    6ba0:	10 92 71 02 	sts	0x0271, r1
}
    6ba4:	0f 90       	pop	r0
    6ba6:	0f 90       	pop	r0
    6ba8:	0f 90       	pop	r0
    6baa:	0f 90       	pop	r0
    6bac:	cf 91       	pop	r28
    6bae:	df 91       	pop	r29
    6bb0:	08 95       	ret

00006bb2 <debaunsingZaTaster>:
static volatile unsigned char PREK_TAKTIKA1_niz[3];
static volatile unsigned char PREK_TAKTIKA2_niz[3];
static volatile unsigned char PREK_BOJA_niz[3];

void debaunsingZaTaster(void)
{
    6bb2:	df 93       	push	r29
    6bb4:	cf 93       	push	r28
    6bb6:	cd b7       	in	r28, 0x3d	; 61
    6bb8:	de b7       	in	r29, 0x3e	; 62
	if(++i==3)	i = 0;
    6bba:	80 91 73 01 	lds	r24, 0x0173
    6bbe:	8f 5f       	subi	r24, 0xFF	; 255
    6bc0:	80 93 73 01 	sts	0x0173, r24
    6bc4:	80 91 73 01 	lds	r24, 0x0173
    6bc8:	83 30       	cpi	r24, 0x03	; 3
    6bca:	11 f4       	brne	.+4      	; 0x6bd0 <debaunsingZaTaster+0x1e>
    6bcc:	10 92 73 01 	sts	0x0173, r1
	
	JUMPER_niz[i] = JUMPER;
    6bd0:	80 91 73 01 	lds	r24, 0x0173
    6bd4:	28 2f       	mov	r18, r24
    6bd6:	30 e0       	ldi	r19, 0x00	; 0
    6bd8:	e9 e3       	ldi	r30, 0x39	; 57
    6bda:	f0 e0       	ldi	r31, 0x00	; 0
    6bdc:	80 81       	ld	r24, Z
    6bde:	88 1f       	adc	r24, r24
    6be0:	88 27       	eor	r24, r24
    6be2:	88 1f       	adc	r24, r24
    6be4:	f9 01       	movw	r30, r18
    6be6:	ed 57       	subi	r30, 0x7D	; 125
    6be8:	fe 4f       	sbci	r31, 0xFE	; 254
    6bea:	80 83       	st	Z, r24
	TAS_SKUPLJAC_LEVI_ZATVOREN_niz[i] = TAS_SKUPLJAC_LEVI_ZATVOREN;
    6bec:	80 91 73 01 	lds	r24, 0x0173
    6bf0:	28 2f       	mov	r18, r24
    6bf2:	30 e0       	ldi	r19, 0x00	; 0
    6bf4:	e9 e3       	ldi	r30, 0x39	; 57
    6bf6:	f0 e0       	ldi	r31, 0x00	; 0
    6bf8:	80 81       	ld	r24, Z
    6bfa:	86 95       	lsr	r24
    6bfc:	86 95       	lsr	r24
    6bfe:	86 95       	lsr	r24
    6c00:	81 70       	andi	r24, 0x01	; 1
    6c02:	f9 01       	movw	r30, r18
    6c04:	ea 57       	subi	r30, 0x7A	; 122
    6c06:	fe 4f       	sbci	r31, 0xFE	; 254
    6c08:	80 83       	st	Z, r24
	TAS_SKUPLJAC_LEVI_OTVOREN_niz[i] = TAS_SKUPLJAC_LEVI_OTVOREN;
    6c0a:	80 91 73 01 	lds	r24, 0x0173
    6c0e:	28 2f       	mov	r18, r24
    6c10:	30 e0       	ldi	r19, 0x00	; 0
    6c12:	e9 e3       	ldi	r30, 0x39	; 57
    6c14:	f0 e0       	ldi	r31, 0x00	; 0
    6c16:	80 81       	ld	r24, Z
    6c18:	81 70       	andi	r24, 0x01	; 1
    6c1a:	f9 01       	movw	r30, r18
    6c1c:	e7 57       	subi	r30, 0x77	; 119
    6c1e:	fe 4f       	sbci	r31, 0xFE	; 254
    6c20:	80 83       	st	Z, r24
	TAS_SKUPLJAC_DESNI_ZATVOREN_niz[i] = TAS_SKUPLJAC_DESNI_ZATVOREN;
    6c22:	80 91 73 01 	lds	r24, 0x0173
    6c26:	28 2f       	mov	r18, r24
    6c28:	30 e0       	ldi	r19, 0x00	; 0
    6c2a:	e9 e3       	ldi	r30, 0x39	; 57
    6c2c:	f0 e0       	ldi	r31, 0x00	; 0
    6c2e:	80 81       	ld	r24, Z
    6c30:	86 95       	lsr	r24
    6c32:	86 95       	lsr	r24
    6c34:	81 70       	andi	r24, 0x01	; 1
    6c36:	f9 01       	movw	r30, r18
    6c38:	e4 57       	subi	r30, 0x74	; 116
    6c3a:	fe 4f       	sbci	r31, 0xFE	; 254
    6c3c:	80 83       	st	Z, r24
	TAS_SKUPLJAC_DESNI_OTVOREN_niz[i] = TAS_SKUPLJAC_DESNI_OTVOREN;	
    6c3e:	80 91 73 01 	lds	r24, 0x0173
    6c42:	28 2f       	mov	r18, r24
    6c44:	30 e0       	ldi	r19, 0x00	; 0
    6c46:	e9 e3       	ldi	r30, 0x39	; 57
    6c48:	f0 e0       	ldi	r31, 0x00	; 0
    6c4a:	80 81       	ld	r24, Z
    6c4c:	86 95       	lsr	r24
    6c4e:	81 70       	andi	r24, 0x01	; 1
    6c50:	f9 01       	movw	r30, r18
    6c52:	e1 57       	subi	r30, 0x71	; 113
    6c54:	fe 4f       	sbci	r31, 0xFE	; 254
    6c56:	80 83       	st	Z, r24
	TAS_GOVNO_niz[i] = TAS_GOVNO;
    6c58:	80 91 73 01 	lds	r24, 0x0173
    6c5c:	28 2f       	mov	r18, r24
    6c5e:	30 e0       	ldi	r19, 0x00	; 0
    6c60:	e9 e3       	ldi	r30, 0x39	; 57
    6c62:	f0 e0       	ldi	r31, 0x00	; 0
    6c64:	80 81       	ld	r24, Z
    6c66:	82 95       	swap	r24
    6c68:	8f 70       	andi	r24, 0x0F	; 15
    6c6a:	81 70       	andi	r24, 0x01	; 1
    6c6c:	f9 01       	movw	r30, r18
    6c6e:	ee 56       	subi	r30, 0x6E	; 110
    6c70:	fe 4f       	sbci	r31, 0xFE	; 254
    6c72:	80 83       	st	Z, r24
	TAS_ROBOT_NAZAD_niz[i] = TAS_ROBOT_NAZAD;
    6c74:	80 91 73 01 	lds	r24, 0x0173
    6c78:	28 2f       	mov	r18, r24
    6c7a:	30 e0       	ldi	r19, 0x00	; 0
    6c7c:	e1 e2       	ldi	r30, 0x21	; 33
    6c7e:	f0 e0       	ldi	r31, 0x00	; 0
    6c80:	80 81       	ld	r24, Z
    6c82:	88 1f       	adc	r24, r24
    6c84:	88 27       	eor	r24, r24
    6c86:	88 1f       	adc	r24, r24
    6c88:	f9 01       	movw	r30, r18
    6c8a:	e8 56       	subi	r30, 0x68	; 104
    6c8c:	fe 4f       	sbci	r31, 0xFE	; 254
    6c8e:	80 83       	st	Z, r24
	TAS_ROBOT_NAPRED_niz[i] = TAS_ROBOT_NAPRED;
    6c90:	80 91 73 01 	lds	r24, 0x0173
    6c94:	28 2f       	mov	r18, r24
    6c96:	30 e0       	ldi	r19, 0x00	; 0
    6c98:	e1 e2       	ldi	r30, 0x21	; 33
    6c9a:	f0 e0       	ldi	r31, 0x00	; 0
    6c9c:	80 81       	ld	r24, Z
    6c9e:	82 95       	swap	r24
    6ca0:	86 95       	lsr	r24
    6ca2:	86 95       	lsr	r24
    6ca4:	83 70       	andi	r24, 0x03	; 3
    6ca6:	81 70       	andi	r24, 0x01	; 1
    6ca8:	f9 01       	movw	r30, r18
    6caa:	eb 56       	subi	r30, 0x6B	; 107
    6cac:	fe 4f       	sbci	r31, 0xFE	; 254
    6cae:	80 83       	st	Z, r24
	PREK_TAKTIKA1_niz[i] = PREK_TAKTIKA1;
    6cb0:	80 91 73 01 	lds	r24, 0x0173
    6cb4:	28 2f       	mov	r18, r24
    6cb6:	30 e0       	ldi	r19, 0x00	; 0
    6cb8:	e0 e3       	ldi	r30, 0x30	; 48
    6cba:	f0 e0       	ldi	r31, 0x00	; 0
    6cbc:	80 81       	ld	r24, Z
    6cbe:	82 95       	swap	r24
    6cc0:	86 95       	lsr	r24
    6cc2:	86 95       	lsr	r24
    6cc4:	83 70       	andi	r24, 0x03	; 3
    6cc6:	81 70       	andi	r24, 0x01	; 1
    6cc8:	f9 01       	movw	r30, r18
    6cca:	e5 56       	subi	r30, 0x65	; 101
    6ccc:	fe 4f       	sbci	r31, 0xFE	; 254
    6cce:	80 83       	st	Z, r24
	PREK_TAKTIKA2_niz[i] = PREK_TAKTIKA2;
    6cd0:	80 91 73 01 	lds	r24, 0x0173
    6cd4:	28 2f       	mov	r18, r24
    6cd6:	30 e0       	ldi	r19, 0x00	; 0
    6cd8:	e0 e3       	ldi	r30, 0x30	; 48
    6cda:	f0 e0       	ldi	r31, 0x00	; 0
    6cdc:	80 81       	ld	r24, Z
    6cde:	82 95       	swap	r24
    6ce0:	86 95       	lsr	r24
    6ce2:	87 70       	andi	r24, 0x07	; 7
    6ce4:	81 70       	andi	r24, 0x01	; 1
    6ce6:	f9 01       	movw	r30, r18
    6ce8:	e2 56       	subi	r30, 0x62	; 98
    6cea:	fe 4f       	sbci	r31, 0xFE	; 254
    6cec:	80 83       	st	Z, r24
	PREK_BOJA_niz[i] = PREK_BOJA;
    6cee:	80 91 73 01 	lds	r24, 0x0173
    6cf2:	28 2f       	mov	r18, r24
    6cf4:	30 e0       	ldi	r19, 0x00	; 0
    6cf6:	e0 e3       	ldi	r30, 0x30	; 48
    6cf8:	f0 e0       	ldi	r31, 0x00	; 0
    6cfa:	80 81       	ld	r24, Z
    6cfc:	88 1f       	adc	r24, r24
    6cfe:	88 27       	eor	r24, r24
    6d00:	88 1f       	adc	r24, r24
    6d02:	f9 01       	movw	r30, r18
    6d04:	ef 55       	subi	r30, 0x5F	; 95
    6d06:	fe 4f       	sbci	r31, 0xFE	; 254
    6d08:	80 83       	st	Z, r24
}
    6d0a:	cf 91       	pop	r28
    6d0c:	df 91       	pop	r29
    6d0e:	08 95       	ret

00006d10 <prekTaktika1Provera>:


char prekTaktika1Provera(void)
{
    6d10:	df 93       	push	r29
    6d12:	cf 93       	push	r28
    6d14:	0f 92       	push	r0
    6d16:	cd b7       	in	r28, 0x3d	; 61
    6d18:	de b7       	in	r29, 0x3e	; 62
	if(PREK_TAKTIKA1_niz[0] | PREK_TAKTIKA1_niz[1] | PREK_TAKTIKA1_niz[2])
    6d1a:	90 91 9b 01 	lds	r25, 0x019B
    6d1e:	80 91 9c 01 	lds	r24, 0x019C
    6d22:	98 2b       	or	r25, r24
    6d24:	80 91 9d 01 	lds	r24, 0x019D
    6d28:	89 2b       	or	r24, r25
    6d2a:	88 23       	and	r24, r24
    6d2c:	11 f0       	breq	.+4      	; 0x6d32 <prekTaktika1Provera+0x22>
		return 0;
    6d2e:	19 82       	std	Y+1, r1	; 0x01
    6d30:	02 c0       	rjmp	.+4      	; 0x6d36 <prekTaktika1Provera+0x26>
		
	return 1;	
    6d32:	81 e0       	ldi	r24, 0x01	; 1
    6d34:	89 83       	std	Y+1, r24	; 0x01
    6d36:	89 81       	ldd	r24, Y+1	; 0x01
}
    6d38:	0f 90       	pop	r0
    6d3a:	cf 91       	pop	r28
    6d3c:	df 91       	pop	r29
    6d3e:	08 95       	ret

00006d40 <prekTaktika2Provera>:

char prekTaktika2Provera(void)
{
    6d40:	df 93       	push	r29
    6d42:	cf 93       	push	r28
    6d44:	0f 92       	push	r0
    6d46:	cd b7       	in	r28, 0x3d	; 61
    6d48:	de b7       	in	r29, 0x3e	; 62
	if(PREK_TAKTIKA2_niz[0] | PREK_TAKTIKA2_niz[1] | PREK_TAKTIKA2_niz[2])
    6d4a:	90 91 9e 01 	lds	r25, 0x019E
    6d4e:	80 91 9f 01 	lds	r24, 0x019F
    6d52:	98 2b       	or	r25, r24
    6d54:	80 91 a0 01 	lds	r24, 0x01A0
    6d58:	89 2b       	or	r24, r25
    6d5a:	88 23       	and	r24, r24
    6d5c:	11 f0       	breq	.+4      	; 0x6d62 <prekTaktika2Provera+0x22>
		return 0;
    6d5e:	19 82       	std	Y+1, r1	; 0x01
    6d60:	02 c0       	rjmp	.+4      	; 0x6d66 <prekTaktika2Provera+0x26>
		
	return 1;	
    6d62:	81 e0       	ldi	r24, 0x01	; 1
    6d64:	89 83       	std	Y+1, r24	; 0x01
    6d66:	89 81       	ldd	r24, Y+1	; 0x01
}
    6d68:	0f 90       	pop	r0
    6d6a:	cf 91       	pop	r28
    6d6c:	df 91       	pop	r29
    6d6e:	08 95       	ret

00006d70 <jumperProvera>:

char jumperProvera(void)
{
    6d70:	df 93       	push	r29
    6d72:	cf 93       	push	r28
    6d74:	0f 92       	push	r0
    6d76:	cd b7       	in	r28, 0x3d	; 61
    6d78:	de b7       	in	r29, 0x3e	; 62
	if(JUMPER_niz[0] | JUMPER_niz[1] | JUMPER_niz[2])
    6d7a:	90 91 83 01 	lds	r25, 0x0183
    6d7e:	80 91 84 01 	lds	r24, 0x0184
    6d82:	98 2b       	or	r25, r24
    6d84:	80 91 85 01 	lds	r24, 0x0185
    6d88:	89 2b       	or	r24, r25
    6d8a:	88 23       	and	r24, r24
    6d8c:	11 f0       	breq	.+4      	; 0x6d92 <jumperProvera+0x22>
		return 0;
    6d8e:	19 82       	std	Y+1, r1	; 0x01
    6d90:	02 c0       	rjmp	.+4      	; 0x6d96 <jumperProvera+0x26>
		
	return 1;
    6d92:	81 e0       	ldi	r24, 0x01	; 1
    6d94:	89 83       	std	Y+1, r24	; 0x01
    6d96:	89 81       	ldd	r24, Y+1	; 0x01
}
    6d98:	0f 90       	pop	r0
    6d9a:	cf 91       	pop	r28
    6d9c:	df 91       	pop	r29
    6d9e:	08 95       	ret

00006da0 <prekBojaProvera>:

char prekBojaProvera(void)
{
    6da0:	df 93       	push	r29
    6da2:	cf 93       	push	r28
    6da4:	0f 92       	push	r0
    6da6:	cd b7       	in	r28, 0x3d	; 61
    6da8:	de b7       	in	r29, 0x3e	; 62
	if(PREK_BOJA_niz[0] | PREK_BOJA_niz[1] | PREK_BOJA_niz[2])
    6daa:	90 91 a1 01 	lds	r25, 0x01A1
    6dae:	80 91 a2 01 	lds	r24, 0x01A2
    6db2:	98 2b       	or	r25, r24
    6db4:	80 91 a3 01 	lds	r24, 0x01A3
    6db8:	89 2b       	or	r24, r25
    6dba:	88 23       	and	r24, r24
    6dbc:	11 f0       	breq	.+4      	; 0x6dc2 <prekBojaProvera+0x22>
		return 0;
    6dbe:	19 82       	std	Y+1, r1	; 0x01
    6dc0:	02 c0       	rjmp	.+4      	; 0x6dc6 <prekBojaProvera+0x26>
		
	return 1;
    6dc2:	81 e0       	ldi	r24, 0x01	; 1
    6dc4:	89 83       	std	Y+1, r24	; 0x01
    6dc6:	89 81       	ldd	r24, Y+1	; 0x01
}
    6dc8:	0f 90       	pop	r0
    6dca:	cf 91       	pop	r28
    6dcc:	df 91       	pop	r29
    6dce:	08 95       	ret

00006dd0 <tasSkupljacDesniZatvoren>:

char tasSkupljacDesniZatvoren(void)
{
    6dd0:	df 93       	push	r29
    6dd2:	cf 93       	push	r28
    6dd4:	0f 92       	push	r0
    6dd6:	cd b7       	in	r28, 0x3d	; 61
    6dd8:	de b7       	in	r29, 0x3e	; 62
	if(TAS_SKUPLJAC_DESNI_ZATVOREN_niz[0] | TAS_SKUPLJAC_DESNI_ZATVOREN_niz[1] | TAS_SKUPLJAC_DESNI_ZATVOREN_niz[2])
    6dda:	90 91 8c 01 	lds	r25, 0x018C
    6dde:	80 91 8d 01 	lds	r24, 0x018D
    6de2:	98 2b       	or	r25, r24
    6de4:	80 91 8e 01 	lds	r24, 0x018E
    6de8:	89 2b       	or	r24, r25
    6dea:	88 23       	and	r24, r24
    6dec:	11 f0       	breq	.+4      	; 0x6df2 <tasSkupljacDesniZatvoren+0x22>
		return 0;
    6dee:	19 82       	std	Y+1, r1	; 0x01
    6df0:	02 c0       	rjmp	.+4      	; 0x6df6 <tasSkupljacDesniZatvoren+0x26>
		
	return 1;
    6df2:	81 e0       	ldi	r24, 0x01	; 1
    6df4:	89 83       	std	Y+1, r24	; 0x01
    6df6:	89 81       	ldd	r24, Y+1	; 0x01
}
    6df8:	0f 90       	pop	r0
    6dfa:	cf 91       	pop	r28
    6dfc:	df 91       	pop	r29
    6dfe:	08 95       	ret

00006e00 <tasSkupljacLeviZatvoren>:

char tasSkupljacLeviZatvoren(void)
{
    6e00:	df 93       	push	r29
    6e02:	cf 93       	push	r28
    6e04:	0f 92       	push	r0
    6e06:	cd b7       	in	r28, 0x3d	; 61
    6e08:	de b7       	in	r29, 0x3e	; 62
	if(TAS_SKUPLJAC_LEVI_ZATVOREN_niz[0] | TAS_SKUPLJAC_LEVI_ZATVOREN_niz[1] | TAS_SKUPLJAC_LEVI_ZATVOREN_niz[2])
    6e0a:	90 91 86 01 	lds	r25, 0x0186
    6e0e:	80 91 87 01 	lds	r24, 0x0187
    6e12:	98 2b       	or	r25, r24
    6e14:	80 91 88 01 	lds	r24, 0x0188
    6e18:	89 2b       	or	r24, r25
    6e1a:	88 23       	and	r24, r24
    6e1c:	11 f0       	breq	.+4      	; 0x6e22 <tasSkupljacLeviZatvoren+0x22>
		return 0;
    6e1e:	19 82       	std	Y+1, r1	; 0x01
    6e20:	02 c0       	rjmp	.+4      	; 0x6e26 <tasSkupljacLeviZatvoren+0x26>
		
	return 1;
    6e22:	81 e0       	ldi	r24, 0x01	; 1
    6e24:	89 83       	std	Y+1, r24	; 0x01
    6e26:	89 81       	ldd	r24, Y+1	; 0x01
}
    6e28:	0f 90       	pop	r0
    6e2a:	cf 91       	pop	r28
    6e2c:	df 91       	pop	r29
    6e2e:	08 95       	ret

00006e30 <tasSkupljacLeviOtvoren>:

char tasSkupljacLeviOtvoren(void)
{
    6e30:	df 93       	push	r29
    6e32:	cf 93       	push	r28
    6e34:	0f 92       	push	r0
    6e36:	cd b7       	in	r28, 0x3d	; 61
    6e38:	de b7       	in	r29, 0x3e	; 62
	if(TAS_SKUPLJAC_LEVI_OTVOREN_niz[0] | TAS_SKUPLJAC_LEVI_OTVOREN_niz[1] | TAS_SKUPLJAC_LEVI_OTVOREN_niz[2])
    6e3a:	90 91 89 01 	lds	r25, 0x0189
    6e3e:	80 91 8a 01 	lds	r24, 0x018A
    6e42:	98 2b       	or	r25, r24
    6e44:	80 91 8b 01 	lds	r24, 0x018B
    6e48:	89 2b       	or	r24, r25
    6e4a:	88 23       	and	r24, r24
    6e4c:	11 f0       	breq	.+4      	; 0x6e52 <tasSkupljacLeviOtvoren+0x22>
		return 0;
    6e4e:	19 82       	std	Y+1, r1	; 0x01
    6e50:	02 c0       	rjmp	.+4      	; 0x6e56 <tasSkupljacLeviOtvoren+0x26>
		
	return 1;
    6e52:	81 e0       	ldi	r24, 0x01	; 1
    6e54:	89 83       	std	Y+1, r24	; 0x01
    6e56:	89 81       	ldd	r24, Y+1	; 0x01
}
    6e58:	0f 90       	pop	r0
    6e5a:	cf 91       	pop	r28
    6e5c:	df 91       	pop	r29
    6e5e:	08 95       	ret

00006e60 <tasSkupljacDesniOtvoren>:

char tasSkupljacDesniOtvoren(void)
{
    6e60:	df 93       	push	r29
    6e62:	cf 93       	push	r28
    6e64:	0f 92       	push	r0
    6e66:	cd b7       	in	r28, 0x3d	; 61
    6e68:	de b7       	in	r29, 0x3e	; 62
	if(TAS_SKUPLJAC_DESNI_OTVOREN_niz[0] | TAS_SKUPLJAC_DESNI_OTVOREN_niz[1] | TAS_SKUPLJAC_DESNI_OTVOREN_niz[2])
    6e6a:	90 91 8f 01 	lds	r25, 0x018F
    6e6e:	80 91 90 01 	lds	r24, 0x0190
    6e72:	98 2b       	or	r25, r24
    6e74:	80 91 91 01 	lds	r24, 0x0191
    6e78:	89 2b       	or	r24, r25
    6e7a:	88 23       	and	r24, r24
    6e7c:	11 f0       	breq	.+4      	; 0x6e82 <tasSkupljacDesniOtvoren+0x22>
		return 0;
    6e7e:	19 82       	std	Y+1, r1	; 0x01
    6e80:	02 c0       	rjmp	.+4      	; 0x6e86 <tasSkupljacDesniOtvoren+0x26>
		
	return 1;
    6e82:	81 e0       	ldi	r24, 0x01	; 1
    6e84:	89 83       	std	Y+1, r24	; 0x01
    6e86:	89 81       	ldd	r24, Y+1	; 0x01
}
    6e88:	0f 90       	pop	r0
    6e8a:	cf 91       	pop	r28
    6e8c:	df 91       	pop	r29
    6e8e:	08 95       	ret

00006e90 <tasGovnoProvera>:

char tasGovnoProvera(void)
{
    6e90:	df 93       	push	r29
    6e92:	cf 93       	push	r28
    6e94:	0f 92       	push	r0
    6e96:	cd b7       	in	r28, 0x3d	; 61
    6e98:	de b7       	in	r29, 0x3e	; 62
	if(TAS_GOVNO_niz[0] | TAS_GOVNO_niz[1] | TAS_GOVNO_niz[2])
    6e9a:	90 91 92 01 	lds	r25, 0x0192
    6e9e:	80 91 93 01 	lds	r24, 0x0193
    6ea2:	98 2b       	or	r25, r24
    6ea4:	80 91 94 01 	lds	r24, 0x0194
    6ea8:	89 2b       	or	r24, r25
    6eaa:	88 23       	and	r24, r24
    6eac:	11 f0       	breq	.+4      	; 0x6eb2 <tasGovnoProvera+0x22>
		return 0;
    6eae:	19 82       	std	Y+1, r1	; 0x01
    6eb0:	02 c0       	rjmp	.+4      	; 0x6eb6 <tasGovnoProvera+0x26>
		
	return 1;	
    6eb2:	81 e0       	ldi	r24, 0x01	; 1
    6eb4:	89 83       	std	Y+1, r24	; 0x01
    6eb6:	89 81       	ldd	r24, Y+1	; 0x01
}
    6eb8:	0f 90       	pop	r0
    6eba:	cf 91       	pop	r28
    6ebc:	df 91       	pop	r29
    6ebe:	08 95       	ret

00006ec0 <tasRobotNapredProvera>:

char tasRobotNapredProvera(void)
{
    6ec0:	df 93       	push	r29
    6ec2:	cf 93       	push	r28
    6ec4:	0f 92       	push	r0
    6ec6:	cd b7       	in	r28, 0x3d	; 61
    6ec8:	de b7       	in	r29, 0x3e	; 62
	if(TAS_ROBOT_NAPRED_niz[0] | TAS_ROBOT_NAPRED_niz[1] | TAS_ROBOT_NAPRED_niz[2])
    6eca:	90 91 95 01 	lds	r25, 0x0195
    6ece:	80 91 96 01 	lds	r24, 0x0196
    6ed2:	98 2b       	or	r25, r24
    6ed4:	80 91 97 01 	lds	r24, 0x0197
    6ed8:	89 2b       	or	r24, r25
    6eda:	88 23       	and	r24, r24
    6edc:	11 f0       	breq	.+4      	; 0x6ee2 <tasRobotNapredProvera+0x22>
		return 0;
    6ede:	19 82       	std	Y+1, r1	; 0x01
    6ee0:	02 c0       	rjmp	.+4      	; 0x6ee6 <tasRobotNapredProvera+0x26>
		
	return 1;	
    6ee2:	81 e0       	ldi	r24, 0x01	; 1
    6ee4:	89 83       	std	Y+1, r24	; 0x01
    6ee6:	89 81       	ldd	r24, Y+1	; 0x01
}
    6ee8:	0f 90       	pop	r0
    6eea:	cf 91       	pop	r28
    6eec:	df 91       	pop	r29
    6eee:	08 95       	ret

00006ef0 <tasRobotNazadProvera>:

char tasRobotNazadProvera(void)
{
    6ef0:	df 93       	push	r29
    6ef2:	cf 93       	push	r28
    6ef4:	0f 92       	push	r0
    6ef6:	cd b7       	in	r28, 0x3d	; 61
    6ef8:	de b7       	in	r29, 0x3e	; 62
	if(TAS_ROBOT_NAZAD_niz[0] | TAS_ROBOT_NAZAD_niz[1] | TAS_ROBOT_NAZAD_niz[2])
    6efa:	90 91 98 01 	lds	r25, 0x0198
    6efe:	80 91 99 01 	lds	r24, 0x0199
    6f02:	98 2b       	or	r25, r24
    6f04:	80 91 9a 01 	lds	r24, 0x019A
    6f08:	89 2b       	or	r24, r25
    6f0a:	88 23       	and	r24, r24
    6f0c:	11 f0       	breq	.+4      	; 0x6f12 <tasRobotNazadProvera+0x22>
		return 0;
    6f0e:	19 82       	std	Y+1, r1	; 0x01
    6f10:	02 c0       	rjmp	.+4      	; 0x6f16 <tasRobotNazadProvera+0x26>
		
	return 1;	
    6f12:	81 e0       	ldi	r24, 0x01	; 1
    6f14:	89 83       	std	Y+1, r24	; 0x01
    6f16:	89 81       	ldd	r24, Y+1	; 0x01
}
    6f18:	0f 90       	pop	r0
    6f1a:	cf 91       	pop	r28
    6f1c:	df 91       	pop	r29
    6f1e:	08 95       	ret

00006f20 <startMatch>:

void startMatch(void)
{
    6f20:	df 93       	push	r29
    6f22:	cf 93       	push	r28
    6f24:	cd b7       	in	r28, 0x3d	; 61
    6f26:	de b7       	in	r29, 0x3e	; 62
	robot.systemTime = 0;
    6f28:	10 92 74 01 	sts	0x0174, r1
    6f2c:	10 92 75 01 	sts	0x0175, r1
    6f30:	10 92 76 01 	sts	0x0176, r1
    6f34:	10 92 77 01 	sts	0x0177, r1
	robot.theEnd = 0;
    6f38:	10 92 79 01 	sts	0x0179, r1
	robot.matchStarted = 1;
    6f3c:	81 e0       	ldi	r24, 0x01	; 1
    6f3e:	80 93 78 01 	sts	0x0178, r24
}
    6f42:	cf 91       	pop	r28
    6f44:	df 91       	pop	r29
    6f46:	08 95       	ret

00006f48 <endMatch>:

void endMatch(void)
{
    6f48:	df 93       	push	r29
    6f4a:	cf 93       	push	r28
    6f4c:	cd b7       	in	r28, 0x3d	; 61
    6f4e:	de b7       	in	r29, 0x3e	; 62
	altUart1Write('A');
    6f50:	81 e4       	ldi	r24, 0x41	; 65
    6f52:	0e 94 84 3a 	call	0x7508	; 0x7508 <altUart1Write>
	altUart1Write(0);
    6f56:	80 e0       	ldi	r24, 0x00	; 0
    6f58:	0e 94 84 3a 	call	0x7508	; 0x7508 <altUart1Write>
	altUart1Write('B');
    6f5c:	82 e4       	ldi	r24, 0x42	; 66
    6f5e:	0e 94 84 3a 	call	0x7508	; 0x7508 <altUart1Write>
	altUart1Write(0);
    6f62:	80 e0       	ldi	r24, 0x00	; 0
    6f64:	0e 94 84 3a 	call	0x7508	; 0x7508 <altUart1Write>
	altUart1Write('C');
    6f68:	83 e4       	ldi	r24, 0x43	; 67
    6f6a:	0e 94 84 3a 	call	0x7508	; 0x7508 <altUart1Write>
	altUart1Write(0);
    6f6e:	80 e0       	ldi	r24, 0x00	; 0
    6f70:	0e 94 84 3a 	call	0x7508	; 0x7508 <altUart1Write>
	altUart1Write('D');
    6f74:	84 e4       	ldi	r24, 0x44	; 68
    6f76:	0e 94 84 3a 	call	0x7508	; 0x7508 <altUart1Write>
	altUart1Write(0);
    6f7a:	80 e0       	ldi	r24, 0x00	; 0
    6f7c:	0e 94 84 3a 	call	0x7508	; 0x7508 <altUart1Write>
	altUart0Write('S');
    6f80:	83 e5       	ldi	r24, 0x53	; 83
    6f82:	0e 94 6d 3a 	call	0x74da	; 0x74da <altUart0Write>
}
    6f86:	cf 91       	pop	r28
    6f88:	df 91       	pop	r29
    6f8a:	08 95       	ret

00006f8c <countTime>:

void countTime(void)
{
    6f8c:	df 93       	push	r29
    6f8e:	cf 93       	push	r28
    6f90:	cd b7       	in	r28, 0x3d	; 61
    6f92:	de b7       	in	r29, 0x3e	; 62
	if(robot.matchStarted)
    6f94:	80 91 78 01 	lds	r24, 0x0178
    6f98:	88 23       	and	r24, r24
    6f9a:	69 f1       	breq	.+90     	; 0x6ff6 <countTime+0x6a>
	{
		if(++robot.systemTime>=MATCHTIME)
    6f9c:	80 91 74 01 	lds	r24, 0x0174
    6fa0:	90 91 75 01 	lds	r25, 0x0175
    6fa4:	a0 91 76 01 	lds	r26, 0x0176
    6fa8:	b0 91 77 01 	lds	r27, 0x0177
    6fac:	01 96       	adiw	r24, 0x01	; 1
    6fae:	a1 1d       	adc	r26, r1
    6fb0:	b1 1d       	adc	r27, r1
    6fb2:	80 93 74 01 	sts	0x0174, r24
    6fb6:	90 93 75 01 	sts	0x0175, r25
    6fba:	a0 93 76 01 	sts	0x0176, r26
    6fbe:	b0 93 77 01 	sts	0x0177, r27
    6fc2:	80 91 74 01 	lds	r24, 0x0174
    6fc6:	90 91 75 01 	lds	r25, 0x0175
    6fca:	a0 91 76 01 	lds	r26, 0x0176
    6fce:	b0 91 77 01 	lds	r27, 0x0177
    6fd2:	80 39       	cpi	r24, 0x90	; 144
    6fd4:	2f e5       	ldi	r18, 0x5F	; 95
    6fd6:	92 07       	cpc	r25, r18
    6fd8:	21 e0       	ldi	r18, 0x01	; 1
    6fda:	a2 07       	cpc	r26, r18
    6fdc:	20 e0       	ldi	r18, 0x00	; 0
    6fde:	b2 07       	cpc	r27, r18
    6fe0:	50 f0       	brcs	.+20     	; 0x6ff6 <countTime+0x6a>
		{
			robot.theEnd=1;		
    6fe2:	81 e0       	ldi	r24, 0x01	; 1
    6fe4:	80 93 79 01 	sts	0x0179, r24
			endMatch();
    6fe8:	0e 94 a4 37 	call	0x6f48	; 0x6f48 <endMatch>
			while(1)
				PORTG = 0xFF;
    6fec:	e5 e6       	ldi	r30, 0x65	; 101
    6fee:	f0 e0       	ldi	r31, 0x00	; 0
    6ff0:	8f ef       	ldi	r24, 0xFF	; 255
    6ff2:	80 83       	st	Z, r24
    6ff4:	fb cf       	rjmp	.-10     	; 0x6fec <countTime+0x60>
		}
	}
}
    6ff6:	cf 91       	pop	r28
    6ff8:	df 91       	pop	r29
    6ffa:	08 95       	ret

00006ffc <setRobot>:

void setRobot(void)
{
    6ffc:	df 93       	push	r29
    6ffe:	cf 93       	push	r28
    7000:	cd b7       	in	r28, 0x3d	; 61
    7002:	de b7       	in	r29, 0x3e	; 62
	initUart0();
    7004:	0e 94 01 39 	call	0x7202	; 0x7202 <initUart0>
	initUart1();
    7008:	0e 94 0c 3a 	call	0x7418	; 0x7418 <initUart1>
	
	timer1Init();
    700c:	0e 94 5e 38 	call	0x70bc	; 0x70bc <timer1Init>
	timer3Init();
    7010:	0e 94 7f 38 	call	0x70fe	; 0x70fe <timer3Init>
	
	adcInit();
    7014:	0e 94 ce 00 	call	0x19c	; 0x19c <adcInit>
	
	DDRA=0x00;
    7018:	ea e3       	ldi	r30, 0x3A	; 58
    701a:	f0 e0       	ldi	r31, 0x00	; 0
    701c:	10 82       	st	Z, r1
	PORTA=0xFF;
    701e:	eb e3       	ldi	r30, 0x3B	; 59
    7020:	f0 e0       	ldi	r31, 0x00	; 0
    7022:	8f ef       	ldi	r24, 0xFF	; 255
    7024:	80 83       	st	Z, r24
	
	DDRE=0x00;
    7026:	e2 e2       	ldi	r30, 0x22	; 34
    7028:	f0 e0       	ldi	r31, 0x00	; 0
    702a:	10 82       	st	Z, r1
	PORTE=0xFF;
    702c:	e3 e2       	ldi	r30, 0x23	; 35
    702e:	f0 e0       	ldi	r31, 0x00	; 0
    7030:	8f ef       	ldi	r24, 0xFF	; 255
    7032:	80 83       	st	Z, r24
	
	DDRD=0x00;
    7034:	e1 e3       	ldi	r30, 0x31	; 49
    7036:	f0 e0       	ldi	r31, 0x00	; 0
    7038:	10 82       	st	Z, r1
	PORTD=0xFF;
    703a:	e2 e3       	ldi	r30, 0x32	; 50
    703c:	f0 e0       	ldi	r31, 0x00	; 0
    703e:	8f ef       	ldi	r24, 0xFF	; 255
    7040:	80 83       	st	Z, r24
	
	DDRG=0xFF;
    7042:	e4 e6       	ldi	r30, 0x64	; 100
    7044:	f0 e0       	ldi	r31, 0x00	; 0
    7046:	8f ef       	ldi	r24, 0xFF	; 255
    7048:	80 83       	st	Z, r24
	PORTG=0x00;
    704a:	e5 e6       	ldi	r30, 0x65	; 101
    704c:	f0 e0       	ldi	r31, 0x00	; 0
    704e:	10 82       	st	Z, r1
	
	pauza_ms(1000);
    7050:	68 ee       	ldi	r22, 0xE8	; 232
    7052:	73 e0       	ldi	r23, 0x03	; 3
    7054:	80 e0       	ldi	r24, 0x00	; 0
    7056:	90 e0       	ldi	r25, 0x00	; 0
    7058:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <pauza_ms>
	
	setColor();
    705c:	0e 94 33 38 	call	0x7066	; 0x7066 <setColor>
}
    7060:	cf 91       	pop	r28
    7062:	df 91       	pop	r29
    7064:	08 95       	ret

00007066 <setColor>:

void setColor(void)
{
    7066:	df 93       	push	r29
    7068:	cf 93       	push	r28
    706a:	cd b7       	in	r28, 0x3d	; 61
    706c:	de b7       	in	r29, 0x3e	; 62
	if(prekBojaProvera())
    706e:	0e 94 d0 36 	call	0x6da0	; 0x6da0 <prekBojaProvera>
    7072:	88 23       	and	r24, r24
    7074:	19 f0       	breq	.+6      	; 0x707c <setColor+0x16>
		robot.boja=BLUE;
    7076:	10 92 7a 01 	sts	0x017A, r1
    707a:	03 c0       	rjmp	.+6      	; 0x7082 <setColor+0x1c>
	else 
		robot.boja=RED;
    707c:	81 e0       	ldi	r24, 0x01	; 1
    707e:	80 93 7a 01 	sts	0x017A, r24
}
    7082:	cf 91       	pop	r28
    7084:	df 91       	pop	r29
    7086:	08 95       	ret

00007088 <getColor>:

unsigned char getColor(void)
{
    7088:	df 93       	push	r29
    708a:	cf 93       	push	r28
    708c:	cd b7       	in	r28, 0x3d	; 61
    708e:	de b7       	in	r29, 0x3e	; 62
	return robot.boja;
    7090:	80 91 7a 01 	lds	r24, 0x017A
}
    7094:	cf 91       	pop	r28
    7096:	df 91       	pop	r29
    7098:	08 95       	ret

0000709a <getSystemTime>:

unsigned long getSystemTime(void)
{
    709a:	df 93       	push	r29
    709c:	cf 93       	push	r28
    709e:	cd b7       	in	r28, 0x3d	; 61
    70a0:	de b7       	in	r29, 0x3e	; 62
	return robot.systemTime;
    70a2:	80 91 74 01 	lds	r24, 0x0174
    70a6:	90 91 75 01 	lds	r25, 0x0175
    70aa:	a0 91 76 01 	lds	r26, 0x0176
    70ae:	b0 91 77 01 	lds	r27, 0x0177
    70b2:	bc 01       	movw	r22, r24
    70b4:	cd 01       	movw	r24, r26
    70b6:	cf 91       	pop	r28
    70b8:	df 91       	pop	r29
    70ba:	08 95       	ret

000070bc <timer1Init>:
#include <avr/io.h>
#include "timers.h"

void timer1Init(void)
{
    70bc:	df 93       	push	r29
    70be:	cf 93       	push	r28
    70c0:	cd b7       	in	r28, 0x3d	; 61
    70c2:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    70c4:	ef e4       	ldi	r30, 0x4F	; 79
    70c6:	f0 e0       	ldi	r31, 0x00	; 0
    70c8:	10 82       	st	Z, r1
	TCCR1B=(1<<WGM12) | (1<<CS10);
    70ca:	ee e4       	ldi	r30, 0x4E	; 78
    70cc:	f0 e0       	ldi	r31, 0x00	; 0
    70ce:	89 e0       	ldi	r24, 0x09	; 9
    70d0:	80 83       	st	Z, r24
	OCR1AH=0x2B;  //za kvarc od 8Mhz OCR=0x1F40
    70d2:	eb e4       	ldi	r30, 0x4B	; 75
    70d4:	f0 e0       	ldi	r31, 0x00	; 0
    70d6:	8b e2       	ldi	r24, 0x2B	; 43
    70d8:	80 83       	st	Z, r24
	OCR1AL=0x33;
    70da:	ea e4       	ldi	r30, 0x4A	; 74
    70dc:	f0 e0       	ldi	r31, 0x00	; 0
    70de:	83 e3       	ldi	r24, 0x33	; 51
    70e0:	80 83       	st	Z, r24
	TIMSK=1<<OCIE1A;	
    70e2:	e7 e5       	ldi	r30, 0x57	; 87
    70e4:	f0 e0       	ldi	r31, 0x00	; 0
    70e6:	80 e1       	ldi	r24, 0x10	; 16
    70e8:	80 83       	st	Z, r24
	
	SREG |= 0x80;	
    70ea:	af e5       	ldi	r26, 0x5F	; 95
    70ec:	b0 e0       	ldi	r27, 0x00	; 0
    70ee:	ef e5       	ldi	r30, 0x5F	; 95
    70f0:	f0 e0       	ldi	r31, 0x00	; 0
    70f2:	80 81       	ld	r24, Z
    70f4:	80 68       	ori	r24, 0x80	; 128
    70f6:	8c 93       	st	X, r24
}
    70f8:	cf 91       	pop	r28
    70fa:	df 91       	pop	r29
    70fc:	08 95       	ret

000070fe <timer3Init>:

void timer3Init(void)
{
    70fe:	df 93       	push	r29
    7100:	cf 93       	push	r28
    7102:	cd b7       	in	r28, 0x3d	; 61
    7104:	de b7       	in	r29, 0x3e	; 62
	TCCR3A=0;
    7106:	eb e8       	ldi	r30, 0x8B	; 139
    7108:	f0 e0       	ldi	r31, 0x00	; 0
    710a:	10 82       	st	Z, r1
	TCCR3B=(1<<WGM32) | (1<<CS30);
    710c:	ea e8       	ldi	r30, 0x8A	; 138
    710e:	f0 e0       	ldi	r31, 0x00	; 0
    7110:	89 e0       	ldi	r24, 0x09	; 9
    7112:	80 83       	st	Z, r24
	OCR3AH=0x2B;
    7114:	e7 e8       	ldi	r30, 0x87	; 135
    7116:	f0 e0       	ldi	r31, 0x00	; 0
    7118:	8b e2       	ldi	r24, 0x2B	; 43
    711a:	80 83       	st	Z, r24
	OCR3AL=0x33;
    711c:	e6 e8       	ldi	r30, 0x86	; 134
    711e:	f0 e0       	ldi	r31, 0x00	; 0
    7120:	83 e3       	ldi	r24, 0x33	; 51
    7122:	80 83       	st	Z, r24
	ETIMSK=1<<OCIE3A;
    7124:	ed e7       	ldi	r30, 0x7D	; 125
    7126:	f0 e0       	ldi	r31, 0x00	; 0
    7128:	80 e1       	ldi	r24, 0x10	; 16
    712a:	80 83       	st	Z, r24
	
	SREG |= 0x80;
    712c:	af e5       	ldi	r26, 0x5F	; 95
    712e:	b0 e0       	ldi	r27, 0x00	; 0
    7130:	ef e5       	ldi	r30, 0x5F	; 95
    7132:	f0 e0       	ldi	r31, 0x00	; 0
    7134:	80 81       	ld	r24, Z
    7136:	80 68       	ori	r24, 0x80	; 128
    7138:	8c 93       	st	X, r24
}
    713a:	cf 91       	pop	r28
    713c:	df 91       	pop	r29
    713e:	08 95       	ret

00007140 <__vector_12>:

ISR(TIMER1_COMPA_vect)
{
    7140:	1f 92       	push	r1
    7142:	0f 92       	push	r0
    7144:	0f b6       	in	r0, 0x3f	; 63
    7146:	0f 92       	push	r0
    7148:	00 90 5b 00 	lds	r0, 0x005B
    714c:	0f 92       	push	r0
    714e:	11 24       	eor	r1, r1
    7150:	2f 93       	push	r18
    7152:	3f 93       	push	r19
    7154:	4f 93       	push	r20
    7156:	5f 93       	push	r21
    7158:	6f 93       	push	r22
    715a:	7f 93       	push	r23
    715c:	8f 93       	push	r24
    715e:	9f 93       	push	r25
    7160:	af 93       	push	r26
    7162:	bf 93       	push	r27
    7164:	ef 93       	push	r30
    7166:	ff 93       	push	r31
    7168:	df 93       	push	r29
    716a:	cf 93       	push	r28
    716c:	cd b7       	in	r28, 0x3d	; 61
    716e:	de b7       	in	r29, 0x3e	; 62
	countTime();	
    7170:	0e 94 c6 37 	call	0x6f8c	; 0x6f8c <countTime>
	debaunsingZaTaster();			
    7174:	0e 94 d9 35 	call	0x6bb2	; 0x6bb2 <debaunsingZaTaster>
}
    7178:	cf 91       	pop	r28
    717a:	df 91       	pop	r29
    717c:	ff 91       	pop	r31
    717e:	ef 91       	pop	r30
    7180:	bf 91       	pop	r27
    7182:	af 91       	pop	r26
    7184:	9f 91       	pop	r25
    7186:	8f 91       	pop	r24
    7188:	7f 91       	pop	r23
    718a:	6f 91       	pop	r22
    718c:	5f 91       	pop	r21
    718e:	4f 91       	pop	r20
    7190:	3f 91       	pop	r19
    7192:	2f 91       	pop	r18
    7194:	0f 90       	pop	r0
    7196:	00 92 5b 00 	sts	0x005B, r0
    719a:	0f 90       	pop	r0
    719c:	0f be       	out	0x3f, r0	; 63
    719e:	0f 90       	pop	r0
    71a0:	1f 90       	pop	r1
    71a2:	18 95       	reti

000071a4 <__vector_26>:

extern char flagPauze;
extern unsigned long passedTime;
ISR(TIMER3_COMPA_vect)
{
    71a4:	1f 92       	push	r1
    71a6:	0f 92       	push	r0
    71a8:	0f b6       	in	r0, 0x3f	; 63
    71aa:	0f 92       	push	r0
    71ac:	11 24       	eor	r1, r1
    71ae:	8f 93       	push	r24
    71b0:	9f 93       	push	r25
    71b2:	af 93       	push	r26
    71b4:	bf 93       	push	r27
    71b6:	df 93       	push	r29
    71b8:	cf 93       	push	r28
    71ba:	cd b7       	in	r28, 0x3d	; 61
    71bc:	de b7       	in	r29, 0x3e	; 62
	if(flagPauze)
    71be:	80 91 71 02 	lds	r24, 0x0271
    71c2:	88 23       	and	r24, r24
    71c4:	99 f0       	breq	.+38     	; 0x71ec <__vector_26+0x48>
		++passedTime;		
    71c6:	80 91 6d 02 	lds	r24, 0x026D
    71ca:	90 91 6e 02 	lds	r25, 0x026E
    71ce:	a0 91 6f 02 	lds	r26, 0x026F
    71d2:	b0 91 70 02 	lds	r27, 0x0270
    71d6:	01 96       	adiw	r24, 0x01	; 1
    71d8:	a1 1d       	adc	r26, r1
    71da:	b1 1d       	adc	r27, r1
    71dc:	80 93 6d 02 	sts	0x026D, r24
    71e0:	90 93 6e 02 	sts	0x026E, r25
    71e4:	a0 93 6f 02 	sts	0x026F, r26
    71e8:	b0 93 70 02 	sts	0x0270, r27
    71ec:	cf 91       	pop	r28
    71ee:	df 91       	pop	r29
    71f0:	bf 91       	pop	r27
    71f2:	af 91       	pop	r26
    71f4:	9f 91       	pop	r25
    71f6:	8f 91       	pop	r24
    71f8:	0f 90       	pop	r0
    71fa:	0f be       	out	0x3f, r0	; 63
    71fc:	0f 90       	pop	r0
    71fe:	1f 90       	pop	r1
    7200:	18 95       	reti

00007202 <initUart0>:
-asinhroni
-1 stop bit
-bez paritet bita
****************************************************************************************************************************************/
void initUart0(void)
{	
    7202:	df 93       	push	r29
    7204:	cf 93       	push	r28
    7206:	cd b7       	in	r28, 0x3d	; 61
    7208:	de b7       	in	r29, 0x3e	; 62
	UCSR0A=0;
    720a:	eb e2       	ldi	r30, 0x2B	; 43
    720c:	f0 e0       	ldi	r31, 0x00	; 0
    720e:	10 82       	st	Z, r1
	UCSR0B=(1<<RXCIE0) | (1<<TXCIE0) | (1<<RXEN0) | (1<<TXEN0);
    7210:	ea e2       	ldi	r30, 0x2A	; 42
    7212:	f0 e0       	ldi	r31, 0x00	; 0
    7214:	88 ed       	ldi	r24, 0xD8	; 216
    7216:	80 83       	st	Z, r24
	UCSR0C=(1<<UCSZ01) | (1<<UCSZ00);
    7218:	e5 e9       	ldi	r30, 0x95	; 149
    721a:	f0 e0       	ldi	r31, 0x00	; 0
    721c:	86 e0       	ldi	r24, 0x06	; 6
    721e:	80 83       	st	Z, r24

	//UBRR0H=(unsigned char) (UART0_UBRR>>8);
	//UBRR0L=(unsigned char)  UART0_UBRR;	
	UBRR0H=0;
    7220:	e0 e9       	ldi	r30, 0x90	; 144
    7222:	f0 e0       	ldi	r31, 0x00	; 0
    7224:	10 82       	st	Z, r1
	UBRR0L=11;
    7226:	e9 e2       	ldi	r30, 0x29	; 41
    7228:	f0 e0       	ldi	r31, 0x00	; 0
    722a:	8b e0       	ldi	r24, 0x0B	; 11
    722c:	80 83       	st	Z, r24
	
	SREG |= 0x80;
    722e:	af e5       	ldi	r26, 0x5F	; 95
    7230:	b0 e0       	ldi	r27, 0x00	; 0
    7232:	ef e5       	ldi	r30, 0x5F	; 95
    7234:	f0 e0       	ldi	r31, 0x00	; 0
    7236:	80 81       	ld	r24, Z
    7238:	80 68       	ori	r24, 0x80	; 128
    723a:	8c 93       	st	X, r24
}
    723c:	cf 91       	pop	r28
    723e:	df 91       	pop	r29
    7240:	08 95       	ret

00007242 <__vector_20>:
/****************************************************************************************************************************************
Transmit interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_TX_vect)
{
    7242:	1f 92       	push	r1
    7244:	0f 92       	push	r0
    7246:	0f b6       	in	r0, 0x3f	; 63
    7248:	0f 92       	push	r0
    724a:	00 90 5b 00 	lds	r0, 0x005B
    724e:	0f 92       	push	r0
    7250:	11 24       	eor	r1, r1
    7252:	8f 93       	push	r24
    7254:	9f 93       	push	r25
    7256:	af 93       	push	r26
    7258:	bf 93       	push	r27
    725a:	ef 93       	push	r30
    725c:	ff 93       	push	r31
    725e:	df 93       	push	r29
    7260:	cf 93       	push	r28
    7262:	cd b7       	in	r28, 0x3d	; 61
    7264:	de b7       	in	r29, 0x3e	; 62
	if(tx0_counter)
    7266:	80 91 a5 01 	lds	r24, 0x01A5
    726a:	88 23       	and	r24, r24
    726c:	d9 f0       	breq	.+54     	; 0x72a4 <__vector_20+0x62>
	{
		tx0_counter--;
    726e:	80 91 a5 01 	lds	r24, 0x01A5
    7272:	81 50       	subi	r24, 0x01	; 1
    7274:	80 93 a5 01 	sts	0x01A5, r24
		UDR0=tx0_buffer[tx0_rd_index];
    7278:	ac e2       	ldi	r26, 0x2C	; 44
    727a:	b0 e0       	ldi	r27, 0x00	; 0
    727c:	80 91 a6 01 	lds	r24, 0x01A6
    7280:	88 2f       	mov	r24, r24
    7282:	90 e0       	ldi	r25, 0x00	; 0
    7284:	fc 01       	movw	r30, r24
    7286:	e3 55       	subi	r30, 0x53	; 83
    7288:	fe 4f       	sbci	r31, 0xFE	; 254
    728a:	80 81       	ld	r24, Z
    728c:	8c 93       	st	X, r24
		if(++tx0_rd_index == TX0_BUFFER_SIZE)
    728e:	80 91 a6 01 	lds	r24, 0x01A6
    7292:	8f 5f       	subi	r24, 0xFF	; 255
    7294:	80 93 a6 01 	sts	0x01A6, r24
    7298:	80 91 a6 01 	lds	r24, 0x01A6
    729c:	80 34       	cpi	r24, 0x40	; 64
    729e:	11 f4       	brne	.+4      	; 0x72a4 <__vector_20+0x62>
			tx0_rd_index = 0;	
    72a0:	10 92 a6 01 	sts	0x01A6, r1
	}	
}
    72a4:	cf 91       	pop	r28
    72a6:	df 91       	pop	r29
    72a8:	ff 91       	pop	r31
    72aa:	ef 91       	pop	r30
    72ac:	bf 91       	pop	r27
    72ae:	af 91       	pop	r26
    72b0:	9f 91       	pop	r25
    72b2:	8f 91       	pop	r24
    72b4:	0f 90       	pop	r0
    72b6:	00 92 5b 00 	sts	0x005B, r0
    72ba:	0f 90       	pop	r0
    72bc:	0f be       	out	0x3f, r0	; 63
    72be:	0f 90       	pop	r0
    72c0:	1f 90       	pop	r1
    72c2:	18 95       	reti

000072c4 <UART0_Write>:
/****************************************************************************************************************************************
Slanje podataka USART0 modulom
****************************************************************************************************************************************/

void UART0_Write(unsigned char data)
{
    72c4:	df 93       	push	r29
    72c6:	cf 93       	push	r28
    72c8:	0f 92       	push	r0
    72ca:	cd b7       	in	r28, 0x3d	; 61
    72cc:	de b7       	in	r29, 0x3e	; 62
    72ce:	89 83       	std	Y+1, r24	; 0x01
	while(tx0_counter == TX0_BUFFER_SIZE);
    72d0:	80 91 a5 01 	lds	r24, 0x01A5
    72d4:	80 34       	cpi	r24, 0x40	; 64
    72d6:	e1 f3       	breq	.-8      	; 0x72d0 <UART0_Write+0xc>
	
	cli();
    72d8:	f8 94       	cli
	
	if(tx0_counter || (UCSR0A & 0x20) == 0)
    72da:	80 91 a5 01 	lds	r24, 0x01A5
    72de:	88 23       	and	r24, r24
    72e0:	49 f4       	brne	.+18     	; 0x72f4 <UART0_Write+0x30>
    72e2:	eb e2       	ldi	r30, 0x2B	; 43
    72e4:	f0 e0       	ldi	r31, 0x00	; 0
    72e6:	80 81       	ld	r24, Z
    72e8:	88 2f       	mov	r24, r24
    72ea:	90 e0       	ldi	r25, 0x00	; 0
    72ec:	80 72       	andi	r24, 0x20	; 32
    72ee:	90 70       	andi	r25, 0x00	; 0
    72f0:	00 97       	sbiw	r24, 0x00	; 0
    72f2:	d1 f4       	brne	.+52     	; 0x7328 <UART0_Write+0x64>
	{
		tx0_buffer[tx0_wr_index] = data;
    72f4:	80 91 a4 01 	lds	r24, 0x01A4
    72f8:	88 2f       	mov	r24, r24
    72fa:	90 e0       	ldi	r25, 0x00	; 0
    72fc:	fc 01       	movw	r30, r24
    72fe:	e3 55       	subi	r30, 0x53	; 83
    7300:	fe 4f       	sbci	r31, 0xFE	; 254
    7302:	89 81       	ldd	r24, Y+1	; 0x01
    7304:	80 83       	st	Z, r24
		if(++tx0_wr_index == TX0_BUFFER_SIZE)	
    7306:	80 91 a4 01 	lds	r24, 0x01A4
    730a:	8f 5f       	subi	r24, 0xFF	; 255
    730c:	80 93 a4 01 	sts	0x01A4, r24
    7310:	80 91 a4 01 	lds	r24, 0x01A4
    7314:	80 34       	cpi	r24, 0x40	; 64
    7316:	11 f4       	brne	.+4      	; 0x731c <UART0_Write+0x58>
			tx0_wr_index = 0;
    7318:	10 92 a4 01 	sts	0x01A4, r1
			
		tx0_counter++;		
    731c:	80 91 a5 01 	lds	r24, 0x01A5
    7320:	8f 5f       	subi	r24, 0xFF	; 255
    7322:	80 93 a5 01 	sts	0x01A5, r24
    7326:	04 c0       	rjmp	.+8      	; 0x7330 <UART0_Write+0x6c>
	}else{
		UDR0=data;
    7328:	ec e2       	ldi	r30, 0x2C	; 44
    732a:	f0 e0       	ldi	r31, 0x00	; 0
    732c:	89 81       	ldd	r24, Y+1	; 0x01
    732e:	80 83       	st	Z, r24
	}	
	sei();
    7330:	78 94       	sei
}
    7332:	0f 90       	pop	r0
    7334:	cf 91       	pop	r28
    7336:	df 91       	pop	r29
    7338:	08 95       	ret

0000733a <__vector_18>:
/****************************************************************************************************************************************
Receive interrupt USART0 modula
****************************************************************************************************************************************/

ISR(USART0_RX_vect)
{
    733a:	1f 92       	push	r1
    733c:	0f 92       	push	r0
    733e:	0f b6       	in	r0, 0x3f	; 63
    7340:	0f 92       	push	r0
    7342:	00 90 5b 00 	lds	r0, 0x005B
    7346:	0f 92       	push	r0
    7348:	11 24       	eor	r1, r1
    734a:	2f 93       	push	r18
    734c:	8f 93       	push	r24
    734e:	9f 93       	push	r25
    7350:	ef 93       	push	r30
    7352:	ff 93       	push	r31
    7354:	df 93       	push	r29
    7356:	cf 93       	push	r28
    7358:	0f 92       	push	r0
    735a:	cd b7       	in	r28, 0x3d	; 61
    735c:	de b7       	in	r29, 0x3e	; 62
	unsigned char status;
	status=UCSR0A;
    735e:	eb e2       	ldi	r30, 0x2B	; 43
    7360:	f0 e0       	ldi	r31, 0x00	; 0
    7362:	80 81       	ld	r24, Z
    7364:	89 83       	std	Y+1, r24	; 0x01

	if(!(status & (FRAME_ERROR | DATA_OVERRUN | PARITY_ERROR)))	
    7366:	89 81       	ldd	r24, Y+1	; 0x01
    7368:	88 2f       	mov	r24, r24
    736a:	90 e0       	ldi	r25, 0x00	; 0
    736c:	8c 71       	andi	r24, 0x1C	; 28
    736e:	90 70       	andi	r25, 0x00	; 0
    7370:	00 97       	sbiw	r24, 0x00	; 0
    7372:	d9 f4       	brne	.+54     	; 0x73aa <__vector_18+0x70>
	{
		rx0_buffer[rx0_wr_index] = UDR0;
    7374:	80 91 a7 01 	lds	r24, 0x01A7
    7378:	88 2f       	mov	r24, r24
    737a:	90 e0       	ldi	r25, 0x00	; 0
    737c:	ec e2       	ldi	r30, 0x2C	; 44
    737e:	f0 e0       	ldi	r31, 0x00	; 0
    7380:	20 81       	ld	r18, Z
    7382:	fc 01       	movw	r30, r24
    7384:	e3 51       	subi	r30, 0x13	; 19
    7386:	fe 4f       	sbci	r31, 0xFE	; 254
    7388:	20 83       	st	Z, r18
		if(++rx0_wr_index == RX0_BUFFER_SIZE)
    738a:	80 91 a7 01 	lds	r24, 0x01A7
    738e:	8f 5f       	subi	r24, 0xFF	; 255
    7390:	80 93 a7 01 	sts	0x01A7, r24
    7394:	80 91 a7 01 	lds	r24, 0x01A7
    7398:	80 34       	cpi	r24, 0x40	; 64
    739a:	11 f4       	brne	.+4      	; 0x73a0 <__vector_18+0x66>
			rx0_wr_index = 0;
    739c:	10 92 a7 01 	sts	0x01A7, r1
			
		rx0_counter++;
    73a0:	80 91 a8 01 	lds	r24, 0x01A8
    73a4:	8f 5f       	subi	r24, 0xFF	; 255
    73a6:	80 93 a8 01 	sts	0x01A8, r24
	}
}
    73aa:	0f 90       	pop	r0
    73ac:	cf 91       	pop	r28
    73ae:	df 91       	pop	r29
    73b0:	ff 91       	pop	r31
    73b2:	ef 91       	pop	r30
    73b4:	9f 91       	pop	r25
    73b6:	8f 91       	pop	r24
    73b8:	2f 91       	pop	r18
    73ba:	0f 90       	pop	r0
    73bc:	00 92 5b 00 	sts	0x005B, r0
    73c0:	0f 90       	pop	r0
    73c2:	0f be       	out	0x3f, r0	; 63
    73c4:	0f 90       	pop	r0
    73c6:	1f 90       	pop	r1
    73c8:	18 95       	reti

000073ca <UART0_Read>:
/****************************************************************************************************************************************
Primanje podataka USART0 modulom
****************************************************************************************************************************************/

unsigned char UART0_Read(void)
{
    73ca:	df 93       	push	r29
    73cc:	cf 93       	push	r28
    73ce:	0f 92       	push	r0
    73d0:	cd b7       	in	r28, 0x3d	; 61
    73d2:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;
	
	while(rx0_counter == 0);
    73d4:	80 91 a8 01 	lds	r24, 0x01A8
    73d8:	88 23       	and	r24, r24
    73da:	e1 f3       	breq	.-8      	; 0x73d4 <UART0_Read+0xa>
	
	data=rx0_buffer[rx0_rd_index];
    73dc:	80 91 a9 01 	lds	r24, 0x01A9
    73e0:	88 2f       	mov	r24, r24
    73e2:	90 e0       	ldi	r25, 0x00	; 0
    73e4:	fc 01       	movw	r30, r24
    73e6:	e3 51       	subi	r30, 0x13	; 19
    73e8:	fe 4f       	sbci	r31, 0xFE	; 254
    73ea:	80 81       	ld	r24, Z
    73ec:	89 83       	std	Y+1, r24	; 0x01
	
	if(++rx0_rd_index == RX0_BUFFER_SIZE)
    73ee:	80 91 a9 01 	lds	r24, 0x01A9
    73f2:	8f 5f       	subi	r24, 0xFF	; 255
    73f4:	80 93 a9 01 	sts	0x01A9, r24
    73f8:	80 91 a9 01 	lds	r24, 0x01A9
    73fc:	80 34       	cpi	r24, 0x40	; 64
    73fe:	11 f4       	brne	.+4      	; 0x7404 <UART0_Read+0x3a>
		rx0_rd_index = 0;
    7400:	10 92 a9 01 	sts	0x01A9, r1
		
	rx0_counter--;
    7404:	80 91 a8 01 	lds	r24, 0x01A8
    7408:	81 50       	subi	r24, 0x01	; 1
    740a:	80 93 a8 01 	sts	0x01A8, r24
	
	return data;
    740e:	89 81       	ldd	r24, Y+1	; 0x01
}
    7410:	0f 90       	pop	r0
    7412:	cf 91       	pop	r28
    7414:	df 91       	pop	r29
    7416:	08 95       	ret

00007418 <initUart1>:
-asinhroni
-1 stop bit
-bez paritet bita
****************************************************************************************************************************************/
void initUart1(void)
{	
    7418:	df 93       	push	r29
    741a:	cf 93       	push	r28
    741c:	cd b7       	in	r28, 0x3d	; 61
    741e:	de b7       	in	r29, 0x3e	; 62
	UCSR1A=0;
    7420:	eb e9       	ldi	r30, 0x9B	; 155
    7422:	f0 e0       	ldi	r31, 0x00	; 0
    7424:	10 82       	st	Z, r1
	UCSR1B=(1<<TXCIE1) | (1<<TXEN1);
    7426:	ea e9       	ldi	r30, 0x9A	; 154
    7428:	f0 e0       	ldi	r31, 0x00	; 0
    742a:	88 e4       	ldi	r24, 0x48	; 72
    742c:	80 83       	st	Z, r24
	UCSR1C=(1<<UCSZ10) | (1<<UCSZ11);
    742e:	ed e9       	ldi	r30, 0x9D	; 157
    7430:	f0 e0       	ldi	r31, 0x00	; 0
    7432:	86 e0       	ldi	r24, 0x06	; 6
    7434:	80 83       	st	Z, r24
	
	UBRR1H=UBRR1_VALUE>>8;
    7436:	e8 e9       	ldi	r30, 0x98	; 152
    7438:	f0 e0       	ldi	r31, 0x00	; 0
    743a:	10 82       	st	Z, r1
	UBRR1L=UBRR1_VALUE; //ako bude kenjao staviti za L 71 decimalno, H ide 0
    743c:	e9 e9       	ldi	r30, 0x99	; 153
    743e:	f0 e0       	ldi	r31, 0x00	; 0
    7440:	87 e4       	ldi	r24, 0x47	; 71
    7442:	80 83       	st	Z, r24

	//UBRR1H=(unsigned char) (UART1_UBRR>>8);
	//UBRR1L=(unsigned char)  UART1_UBRR;
	
	SREG |= 0x80;	
    7444:	af e5       	ldi	r26, 0x5F	; 95
    7446:	b0 e0       	ldi	r27, 0x00	; 0
    7448:	ef e5       	ldi	r30, 0x5F	; 95
    744a:	f0 e0       	ldi	r31, 0x00	; 0
    744c:	80 81       	ld	r24, Z
    744e:	80 68       	ori	r24, 0x80	; 128
    7450:	8c 93       	st	X, r24
}
    7452:	cf 91       	pop	r28
    7454:	df 91       	pop	r29
    7456:	08 95       	ret

00007458 <__vector_32>:
/****************************************************************************************************************************************
Transmit interrupt USART1 modula
****************************************************************************************************************************************/
//#error "Linker error- idiotic programming"
ISR(USART1_TX_vect)
{
    7458:	1f 92       	push	r1
    745a:	0f 92       	push	r0
    745c:	0f b6       	in	r0, 0x3f	; 63
    745e:	0f 92       	push	r0
    7460:	00 90 5b 00 	lds	r0, 0x005B
    7464:	0f 92       	push	r0
    7466:	11 24       	eor	r1, r1
    7468:	8f 93       	push	r24
    746a:	9f 93       	push	r25
    746c:	af 93       	push	r26
    746e:	bf 93       	push	r27
    7470:	ef 93       	push	r30
    7472:	ff 93       	push	r31
    7474:	df 93       	push	r29
    7476:	cf 93       	push	r28
    7478:	cd b7       	in	r28, 0x3d	; 61
    747a:	de b7       	in	r29, 0x3e	; 62
	if(tx1_counter)
    747c:	80 91 ab 01 	lds	r24, 0x01AB
    7480:	88 23       	and	r24, r24
    7482:	d9 f0       	breq	.+54     	; 0x74ba <__vector_32+0x62>
	{
		tx1_counter--;
    7484:	80 91 ab 01 	lds	r24, 0x01AB
    7488:	81 50       	subi	r24, 0x01	; 1
    748a:	80 93 ab 01 	sts	0x01AB, r24
		UDR1=tx1_buffer[tx1_rd_index];
    748e:	ac e9       	ldi	r26, 0x9C	; 156
    7490:	b0 e0       	ldi	r27, 0x00	; 0
    7492:	80 91 ac 01 	lds	r24, 0x01AC
    7496:	88 2f       	mov	r24, r24
    7498:	90 e0       	ldi	r25, 0x00	; 0
    749a:	fc 01       	movw	r30, r24
    749c:	e3 5d       	subi	r30, 0xD3	; 211
    749e:	fd 4f       	sbci	r31, 0xFD	; 253
    74a0:	80 81       	ld	r24, Z
    74a2:	8c 93       	st	X, r24
		if(++tx1_rd_index == TX1_BUFFER_SIZE)
    74a4:	80 91 ac 01 	lds	r24, 0x01AC
    74a8:	8f 5f       	subi	r24, 0xFF	; 255
    74aa:	80 93 ac 01 	sts	0x01AC, r24
    74ae:	80 91 ac 01 	lds	r24, 0x01AC
    74b2:	80 34       	cpi	r24, 0x40	; 64
    74b4:	11 f4       	brne	.+4      	; 0x74ba <__vector_32+0x62>
			tx1_rd_index = 0;	
    74b6:	10 92 ac 01 	sts	0x01AC, r1
	}	
}
    74ba:	cf 91       	pop	r28
    74bc:	df 91       	pop	r29
    74be:	ff 91       	pop	r31
    74c0:	ef 91       	pop	r30
    74c2:	bf 91       	pop	r27
    74c4:	af 91       	pop	r26
    74c6:	9f 91       	pop	r25
    74c8:	8f 91       	pop	r24
    74ca:	0f 90       	pop	r0
    74cc:	00 92 5b 00 	sts	0x005B, r0
    74d0:	0f 90       	pop	r0
    74d2:	0f be       	out	0x3f, r0	; 63
    74d4:	0f 90       	pop	r0
    74d6:	1f 90       	pop	r1
    74d8:	18 95       	reti

000074da <altUart0Write>:

void altUart0Write(unsigned char data)
{
    74da:	df 93       	push	r29
    74dc:	cf 93       	push	r28
    74de:	0f 92       	push	r0
    74e0:	cd b7       	in	r28, 0x3d	; 61
    74e2:	de b7       	in	r29, 0x3e	; 62
    74e4:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR0A & (1<<UDRE0)) );
    74e6:	eb e2       	ldi	r30, 0x2B	; 43
    74e8:	f0 e0       	ldi	r31, 0x00	; 0
    74ea:	80 81       	ld	r24, Z
    74ec:	88 2f       	mov	r24, r24
    74ee:	90 e0       	ldi	r25, 0x00	; 0
    74f0:	80 72       	andi	r24, 0x20	; 32
    74f2:	90 70       	andi	r25, 0x00	; 0
    74f4:	00 97       	sbiw	r24, 0x00	; 0
    74f6:	b9 f3       	breq	.-18     	; 0x74e6 <altUart0Write+0xc>
	UDR0=data;	
    74f8:	ec e2       	ldi	r30, 0x2C	; 44
    74fa:	f0 e0       	ldi	r31, 0x00	; 0
    74fc:	89 81       	ldd	r24, Y+1	; 0x01
    74fe:	80 83       	st	Z, r24
}
    7500:	0f 90       	pop	r0
    7502:	cf 91       	pop	r28
    7504:	df 91       	pop	r29
    7506:	08 95       	ret

00007508 <altUart1Write>:
{
	while ( !( UCSR0A & (1<<UDRE0)) );
	UDR1='S';
}*/
void altUart1Write(unsigned char data)
{
    7508:	df 93       	push	r29
    750a:	cf 93       	push	r28
    750c:	0f 92       	push	r0
    750e:	cd b7       	in	r28, 0x3d	; 61
    7510:	de b7       	in	r29, 0x3e	; 62
    7512:	89 83       	std	Y+1, r24	; 0x01
	while ( !( UCSR1A & (1<<UDRE1)) );
    7514:	eb e9       	ldi	r30, 0x9B	; 155
    7516:	f0 e0       	ldi	r31, 0x00	; 0
    7518:	80 81       	ld	r24, Z
    751a:	88 2f       	mov	r24, r24
    751c:	90 e0       	ldi	r25, 0x00	; 0
    751e:	80 72       	andi	r24, 0x20	; 32
    7520:	90 70       	andi	r25, 0x00	; 0
    7522:	00 97       	sbiw	r24, 0x00	; 0
    7524:	b9 f3       	breq	.-18     	; 0x7514 <altUart1Write+0xc>
	UDR1=data;
    7526:	ec e9       	ldi	r30, 0x9C	; 156
    7528:	f0 e0       	ldi	r31, 0x00	; 0
    752a:	89 81       	ldd	r24, Y+1	; 0x01
    752c:	80 83       	st	Z, r24
}
    752e:	0f 90       	pop	r0
    7530:	cf 91       	pop	r28
    7532:	df 91       	pop	r29
    7534:	08 95       	ret

00007536 <UART1_Write>:
**

**************************************************************************************************************************************/

void UART1_Write(unsigned char data)
{
    7536:	df 93       	push	r29
    7538:	cf 93       	push	r28
    753a:	0f 92       	push	r0
    753c:	cd b7       	in	r28, 0x3d	; 61
    753e:	de b7       	in	r29, 0x3e	; 62
    7540:	89 83       	std	Y+1, r24	; 0x01
	while(tx1_counter == TX1_BUFFER_SIZE);
    7542:	80 91 ab 01 	lds	r24, 0x01AB
    7546:	80 34       	cpi	r24, 0x40	; 64
    7548:	e1 f3       	breq	.-8      	; 0x7542 <UART1_Write+0xc>
	
	cli();
    754a:	f8 94       	cli
	
	if(tx1_counter || (UCSR1A & 0x20) == 0)
    754c:	80 91 ab 01 	lds	r24, 0x01AB
    7550:	88 23       	and	r24, r24
    7552:	49 f4       	brne	.+18     	; 0x7566 <UART1_Write+0x30>
    7554:	eb e9       	ldi	r30, 0x9B	; 155
    7556:	f0 e0       	ldi	r31, 0x00	; 0
    7558:	80 81       	ld	r24, Z
    755a:	88 2f       	mov	r24, r24
    755c:	90 e0       	ldi	r25, 0x00	; 0
    755e:	80 72       	andi	r24, 0x20	; 32
    7560:	90 70       	andi	r25, 0x00	; 0
    7562:	00 97       	sbiw	r24, 0x00	; 0
    7564:	d1 f4       	brne	.+52     	; 0x759a <UART1_Write+0x64>
	{
		tx1_buffer[tx1_wr_index] = data;
    7566:	80 91 aa 01 	lds	r24, 0x01AA
    756a:	88 2f       	mov	r24, r24
    756c:	90 e0       	ldi	r25, 0x00	; 0
    756e:	fc 01       	movw	r30, r24
    7570:	e3 5d       	subi	r30, 0xD3	; 211
    7572:	fd 4f       	sbci	r31, 0xFD	; 253
    7574:	89 81       	ldd	r24, Y+1	; 0x01
    7576:	80 83       	st	Z, r24
		
		if(++tx1_wr_index == TX1_BUFFER_SIZE)	
    7578:	80 91 aa 01 	lds	r24, 0x01AA
    757c:	8f 5f       	subi	r24, 0xFF	; 255
    757e:	80 93 aa 01 	sts	0x01AA, r24
    7582:	80 91 aa 01 	lds	r24, 0x01AA
    7586:	80 34       	cpi	r24, 0x40	; 64
    7588:	11 f4       	brne	.+4      	; 0x758e <UART1_Write+0x58>
			tx1_wr_index = 0;
    758a:	10 92 aa 01 	sts	0x01AA, r1
			
		tx1_counter++;		
    758e:	80 91 ab 01 	lds	r24, 0x01AB
    7592:	8f 5f       	subi	r24, 0xFF	; 255
    7594:	80 93 ab 01 	sts	0x01AB, r24
    7598:	04 c0       	rjmp	.+8      	; 0x75a2 <UART1_Write+0x6c>
	}else{
		UDR1=data;
    759a:	ec e9       	ldi	r30, 0x9C	; 156
    759c:	f0 e0       	ldi	r31, 0x00	; 0
    759e:	89 81       	ldd	r24, Y+1	; 0x01
    75a0:	80 83       	st	Z, r24
	}
		
	sei();
    75a2:	78 94       	sei
}
    75a4:	0f 90       	pop	r0
    75a6:	cf 91       	pop	r28
    75a8:	df 91       	pop	r29
    75aa:	08 95       	ret

000075ac <__subsf3>:
    75ac:	50 58       	subi	r21, 0x80	; 128

000075ae <__addsf3>:
    75ae:	bb 27       	eor	r27, r27
    75b0:	aa 27       	eor	r26, r26
    75b2:	0e d0       	rcall	.+28     	; 0x75d0 <__addsf3x>
    75b4:	27 c2       	rjmp	.+1102   	; 0x7a04 <__fp_round>
    75b6:	f0 d1       	rcall	.+992    	; 0x7998 <__fp_pscA>
    75b8:	30 f0       	brcs	.+12     	; 0x75c6 <__addsf3+0x18>
    75ba:	f5 d1       	rcall	.+1002   	; 0x79a6 <__fp_pscB>
    75bc:	20 f0       	brcs	.+8      	; 0x75c6 <__addsf3+0x18>
    75be:	31 f4       	brne	.+12     	; 0x75cc <__addsf3+0x1e>
    75c0:	9f 3f       	cpi	r25, 0xFF	; 255
    75c2:	11 f4       	brne	.+4      	; 0x75c8 <__addsf3+0x1a>
    75c4:	1e f4       	brtc	.+6      	; 0x75cc <__addsf3+0x1e>
    75c6:	c0 c1       	rjmp	.+896    	; 0x7948 <__fp_nan>
    75c8:	0e f4       	brtc	.+2      	; 0x75cc <__addsf3+0x1e>
    75ca:	e0 95       	com	r30
    75cc:	e7 fb       	bst	r30, 7
    75ce:	b6 c1       	rjmp	.+876    	; 0x793c <__fp_inf>

000075d0 <__addsf3x>:
    75d0:	e9 2f       	mov	r30, r25
    75d2:	3a d2       	rcall	.+1140   	; 0x7a48 <__fp_split3>
    75d4:	80 f3       	brcs	.-32     	; 0x75b6 <__addsf3+0x8>
    75d6:	ba 17       	cp	r27, r26
    75d8:	62 07       	cpc	r22, r18
    75da:	73 07       	cpc	r23, r19
    75dc:	84 07       	cpc	r24, r20
    75de:	95 07       	cpc	r25, r21
    75e0:	18 f0       	brcs	.+6      	; 0x75e8 <__addsf3x+0x18>
    75e2:	71 f4       	brne	.+28     	; 0x7600 <__addsf3x+0x30>
    75e4:	9e f5       	brtc	.+102    	; 0x764c <__addsf3x+0x7c>
    75e6:	52 c2       	rjmp	.+1188   	; 0x7a8c <__fp_zero>
    75e8:	0e f4       	brtc	.+2      	; 0x75ec <__addsf3x+0x1c>
    75ea:	e0 95       	com	r30
    75ec:	0b 2e       	mov	r0, r27
    75ee:	ba 2f       	mov	r27, r26
    75f0:	a0 2d       	mov	r26, r0
    75f2:	0b 01       	movw	r0, r22
    75f4:	b9 01       	movw	r22, r18
    75f6:	90 01       	movw	r18, r0
    75f8:	0c 01       	movw	r0, r24
    75fa:	ca 01       	movw	r24, r20
    75fc:	a0 01       	movw	r20, r0
    75fe:	11 24       	eor	r1, r1
    7600:	ff 27       	eor	r31, r31
    7602:	59 1b       	sub	r21, r25
    7604:	99 f0       	breq	.+38     	; 0x762c <__addsf3x+0x5c>
    7606:	59 3f       	cpi	r21, 0xF9	; 249
    7608:	50 f4       	brcc	.+20     	; 0x761e <__addsf3x+0x4e>
    760a:	50 3e       	cpi	r21, 0xE0	; 224
    760c:	68 f1       	brcs	.+90     	; 0x7668 <__addsf3x+0x98>
    760e:	1a 16       	cp	r1, r26
    7610:	f0 40       	sbci	r31, 0x00	; 0
    7612:	a2 2f       	mov	r26, r18
    7614:	23 2f       	mov	r18, r19
    7616:	34 2f       	mov	r19, r20
    7618:	44 27       	eor	r20, r20
    761a:	58 5f       	subi	r21, 0xF8	; 248
    761c:	f3 cf       	rjmp	.-26     	; 0x7604 <__addsf3x+0x34>
    761e:	46 95       	lsr	r20
    7620:	37 95       	ror	r19
    7622:	27 95       	ror	r18
    7624:	a7 95       	ror	r26
    7626:	f0 40       	sbci	r31, 0x00	; 0
    7628:	53 95       	inc	r21
    762a:	c9 f7       	brne	.-14     	; 0x761e <__addsf3x+0x4e>
    762c:	7e f4       	brtc	.+30     	; 0x764c <__addsf3x+0x7c>
    762e:	1f 16       	cp	r1, r31
    7630:	ba 0b       	sbc	r27, r26
    7632:	62 0b       	sbc	r22, r18
    7634:	73 0b       	sbc	r23, r19
    7636:	84 0b       	sbc	r24, r20
    7638:	ba f0       	brmi	.+46     	; 0x7668 <__addsf3x+0x98>
    763a:	91 50       	subi	r25, 0x01	; 1
    763c:	a1 f0       	breq	.+40     	; 0x7666 <__addsf3x+0x96>
    763e:	ff 0f       	add	r31, r31
    7640:	bb 1f       	adc	r27, r27
    7642:	66 1f       	adc	r22, r22
    7644:	77 1f       	adc	r23, r23
    7646:	88 1f       	adc	r24, r24
    7648:	c2 f7       	brpl	.-16     	; 0x763a <__addsf3x+0x6a>
    764a:	0e c0       	rjmp	.+28     	; 0x7668 <__addsf3x+0x98>
    764c:	ba 0f       	add	r27, r26
    764e:	62 1f       	adc	r22, r18
    7650:	73 1f       	adc	r23, r19
    7652:	84 1f       	adc	r24, r20
    7654:	48 f4       	brcc	.+18     	; 0x7668 <__addsf3x+0x98>
    7656:	87 95       	ror	r24
    7658:	77 95       	ror	r23
    765a:	67 95       	ror	r22
    765c:	b7 95       	ror	r27
    765e:	f7 95       	ror	r31
    7660:	9e 3f       	cpi	r25, 0xFE	; 254
    7662:	08 f0       	brcs	.+2      	; 0x7666 <__addsf3x+0x96>
    7664:	b3 cf       	rjmp	.-154    	; 0x75cc <__addsf3+0x1e>
    7666:	93 95       	inc	r25
    7668:	88 0f       	add	r24, r24
    766a:	08 f0       	brcs	.+2      	; 0x766e <__addsf3x+0x9e>
    766c:	99 27       	eor	r25, r25
    766e:	ee 0f       	add	r30, r30
    7670:	97 95       	ror	r25
    7672:	87 95       	ror	r24
    7674:	08 95       	ret
    7676:	90 d1       	rcall	.+800    	; 0x7998 <__fp_pscA>
    7678:	58 f0       	brcs	.+22     	; 0x7690 <__addsf3x+0xc0>
    767a:	80 e8       	ldi	r24, 0x80	; 128
    767c:	91 e0       	ldi	r25, 0x01	; 1
    767e:	09 f4       	brne	.+2      	; 0x7682 <__addsf3x+0xb2>
    7680:	9e ef       	ldi	r25, 0xFE	; 254
    7682:	91 d1       	rcall	.+802    	; 0x79a6 <__fp_pscB>
    7684:	28 f0       	brcs	.+10     	; 0x7690 <__addsf3x+0xc0>
    7686:	40 e8       	ldi	r20, 0x80	; 128
    7688:	51 e0       	ldi	r21, 0x01	; 1
    768a:	59 f4       	brne	.+22     	; 0x76a2 <atan2+0xe>
    768c:	5e ef       	ldi	r21, 0xFE	; 254
    768e:	09 c0       	rjmp	.+18     	; 0x76a2 <atan2+0xe>
    7690:	5b c1       	rjmp	.+694    	; 0x7948 <__fp_nan>
    7692:	fc c1       	rjmp	.+1016   	; 0x7a8c <__fp_zero>

00007694 <atan2>:
    7694:	e9 2f       	mov	r30, r25
    7696:	e0 78       	andi	r30, 0x80	; 128
    7698:	d7 d1       	rcall	.+942    	; 0x7a48 <__fp_split3>
    769a:	68 f3       	brcs	.-38     	; 0x7676 <__addsf3x+0xa6>
    769c:	09 2e       	mov	r0, r25
    769e:	05 2a       	or	r0, r21
    76a0:	c1 f3       	breq	.-16     	; 0x7692 <__addsf3x+0xc2>
    76a2:	26 17       	cp	r18, r22
    76a4:	37 07       	cpc	r19, r23
    76a6:	48 07       	cpc	r20, r24
    76a8:	59 07       	cpc	r21, r25
    76aa:	38 f0       	brcs	.+14     	; 0x76ba <atan2+0x26>
    76ac:	0e 2e       	mov	r0, r30
    76ae:	07 f8       	bld	r0, 7
    76b0:	e0 25       	eor	r30, r0
    76b2:	69 f0       	breq	.+26     	; 0x76ce <atan2+0x3a>
    76b4:	e0 25       	eor	r30, r0
    76b6:	e0 64       	ori	r30, 0x40	; 64
    76b8:	0a c0       	rjmp	.+20     	; 0x76ce <atan2+0x3a>
    76ba:	ef 63       	ori	r30, 0x3F	; 63
    76bc:	07 f8       	bld	r0, 7
    76be:	00 94       	com	r0
    76c0:	07 fa       	bst	r0, 7
    76c2:	db 01       	movw	r26, r22
    76c4:	b9 01       	movw	r22, r18
    76c6:	9d 01       	movw	r18, r26
    76c8:	dc 01       	movw	r26, r24
    76ca:	ca 01       	movw	r24, r20
    76cc:	ad 01       	movw	r20, r26
    76ce:	ef 93       	push	r30
    76d0:	4a d0       	rcall	.+148    	; 0x7766 <__divsf3_pse>
    76d2:	98 d1       	rcall	.+816    	; 0x7a04 <__fp_round>
    76d4:	0a d0       	rcall	.+20     	; 0x76ea <atan>
    76d6:	5f 91       	pop	r21
    76d8:	55 23       	and	r21, r21
    76da:	31 f0       	breq	.+12     	; 0x76e8 <atan2+0x54>
    76dc:	2b ed       	ldi	r18, 0xDB	; 219
    76de:	3f e0       	ldi	r19, 0x0F	; 15
    76e0:	49 e4       	ldi	r20, 0x49	; 73
    76e2:	50 fd       	sbrc	r21, 0
    76e4:	49 ec       	ldi	r20, 0xC9	; 201
    76e6:	63 cf       	rjmp	.-314    	; 0x75ae <__addsf3>
    76e8:	08 95       	ret

000076ea <atan>:
    76ea:	df 93       	push	r29
    76ec:	dd 27       	eor	r29, r29
    76ee:	b9 2f       	mov	r27, r25
    76f0:	bf 77       	andi	r27, 0x7F	; 127
    76f2:	40 e8       	ldi	r20, 0x80	; 128
    76f4:	5f e3       	ldi	r21, 0x3F	; 63
    76f6:	16 16       	cp	r1, r22
    76f8:	17 06       	cpc	r1, r23
    76fa:	48 07       	cpc	r20, r24
    76fc:	5b 07       	cpc	r21, r27
    76fe:	10 f4       	brcc	.+4      	; 0x7704 <atan+0x1a>
    7700:	d9 2f       	mov	r29, r25
    7702:	cf d1       	rcall	.+926    	; 0x7aa2 <inverse>
    7704:	9f 93       	push	r25
    7706:	8f 93       	push	r24
    7708:	7f 93       	push	r23
    770a:	6f 93       	push	r22
    770c:	7c d2       	rcall	.+1272   	; 0x7c06 <square>
    770e:	ec e8       	ldi	r30, 0x8C	; 140
    7710:	f0 e0       	ldi	r31, 0x00	; 0
    7712:	1d d1       	rcall	.+570    	; 0x794e <__fp_powser>
    7714:	77 d1       	rcall	.+750    	; 0x7a04 <__fp_round>
    7716:	2f 91       	pop	r18
    7718:	3f 91       	pop	r19
    771a:	4f 91       	pop	r20
    771c:	5f 91       	pop	r21
    771e:	d4 d1       	rcall	.+936    	; 0x7ac8 <__mulsf3x>
    7720:	dd 23       	and	r29, r29
    7722:	49 f0       	breq	.+18     	; 0x7736 <atan+0x4c>
    7724:	90 58       	subi	r25, 0x80	; 128
    7726:	a2 ea       	ldi	r26, 0xA2	; 162
    7728:	2a ed       	ldi	r18, 0xDA	; 218
    772a:	3f e0       	ldi	r19, 0x0F	; 15
    772c:	49 ec       	ldi	r20, 0xC9	; 201
    772e:	5f e3       	ldi	r21, 0x3F	; 63
    7730:	d0 78       	andi	r29, 0x80	; 128
    7732:	5d 27       	eor	r21, r29
    7734:	4d df       	rcall	.-358    	; 0x75d0 <__addsf3x>
    7736:	df 91       	pop	r29
    7738:	65 c1       	rjmp	.+714    	; 0x7a04 <__fp_round>

0000773a <__cmpsf2>:
    773a:	dc d0       	rcall	.+440    	; 0x78f4 <__fp_cmp>
    773c:	08 f4       	brcc	.+2      	; 0x7740 <__cmpsf2+0x6>
    773e:	81 e0       	ldi	r24, 0x01	; 1
    7740:	08 95       	ret

00007742 <cos>:
    7742:	39 d1       	rcall	.+626    	; 0x79b6 <__fp_rempio2>
    7744:	e3 95       	inc	r30
    7746:	6f c1       	rjmp	.+734    	; 0x7a26 <__fp_sinus>

00007748 <__divsf3>:
    7748:	0c d0       	rcall	.+24     	; 0x7762 <__divsf3x>
    774a:	5c c1       	rjmp	.+696    	; 0x7a04 <__fp_round>
    774c:	2c d1       	rcall	.+600    	; 0x79a6 <__fp_pscB>
    774e:	40 f0       	brcs	.+16     	; 0x7760 <__divsf3+0x18>
    7750:	23 d1       	rcall	.+582    	; 0x7998 <__fp_pscA>
    7752:	30 f0       	brcs	.+12     	; 0x7760 <__divsf3+0x18>
    7754:	21 f4       	brne	.+8      	; 0x775e <__divsf3+0x16>
    7756:	5f 3f       	cpi	r21, 0xFF	; 255
    7758:	19 f0       	breq	.+6      	; 0x7760 <__divsf3+0x18>
    775a:	f0 c0       	rjmp	.+480    	; 0x793c <__fp_inf>
    775c:	51 11       	cpse	r21, r1
    775e:	97 c1       	rjmp	.+814    	; 0x7a8e <__fp_szero>
    7760:	f3 c0       	rjmp	.+486    	; 0x7948 <__fp_nan>

00007762 <__divsf3x>:
    7762:	72 d1       	rcall	.+740    	; 0x7a48 <__fp_split3>
    7764:	98 f3       	brcs	.-26     	; 0x774c <__divsf3+0x4>

00007766 <__divsf3_pse>:
    7766:	99 23       	and	r25, r25
    7768:	c9 f3       	breq	.-14     	; 0x775c <__divsf3+0x14>
    776a:	55 23       	and	r21, r21
    776c:	b1 f3       	breq	.-20     	; 0x775a <__divsf3+0x12>
    776e:	95 1b       	sub	r25, r21
    7770:	55 0b       	sbc	r21, r21
    7772:	bb 27       	eor	r27, r27
    7774:	aa 27       	eor	r26, r26
    7776:	62 17       	cp	r22, r18
    7778:	73 07       	cpc	r23, r19
    777a:	84 07       	cpc	r24, r20
    777c:	38 f0       	brcs	.+14     	; 0x778c <__divsf3_pse+0x26>
    777e:	9f 5f       	subi	r25, 0xFF	; 255
    7780:	5f 4f       	sbci	r21, 0xFF	; 255
    7782:	22 0f       	add	r18, r18
    7784:	33 1f       	adc	r19, r19
    7786:	44 1f       	adc	r20, r20
    7788:	aa 1f       	adc	r26, r26
    778a:	a9 f3       	breq	.-22     	; 0x7776 <__divsf3_pse+0x10>
    778c:	33 d0       	rcall	.+102    	; 0x77f4 <__divsf3_pse+0x8e>
    778e:	0e 2e       	mov	r0, r30
    7790:	3a f0       	brmi	.+14     	; 0x77a0 <__divsf3_pse+0x3a>
    7792:	e0 e8       	ldi	r30, 0x80	; 128
    7794:	30 d0       	rcall	.+96     	; 0x77f6 <__divsf3_pse+0x90>
    7796:	91 50       	subi	r25, 0x01	; 1
    7798:	50 40       	sbci	r21, 0x00	; 0
    779a:	e6 95       	lsr	r30
    779c:	00 1c       	adc	r0, r0
    779e:	ca f7       	brpl	.-14     	; 0x7792 <__divsf3_pse+0x2c>
    77a0:	29 d0       	rcall	.+82     	; 0x77f4 <__divsf3_pse+0x8e>
    77a2:	fe 2f       	mov	r31, r30
    77a4:	27 d0       	rcall	.+78     	; 0x77f4 <__divsf3_pse+0x8e>
    77a6:	66 0f       	add	r22, r22
    77a8:	77 1f       	adc	r23, r23
    77aa:	88 1f       	adc	r24, r24
    77ac:	bb 1f       	adc	r27, r27
    77ae:	26 17       	cp	r18, r22
    77b0:	37 07       	cpc	r19, r23
    77b2:	48 07       	cpc	r20, r24
    77b4:	ab 07       	cpc	r26, r27
    77b6:	b0 e8       	ldi	r27, 0x80	; 128
    77b8:	09 f0       	breq	.+2      	; 0x77bc <__divsf3_pse+0x56>
    77ba:	bb 0b       	sbc	r27, r27
    77bc:	80 2d       	mov	r24, r0
    77be:	bf 01       	movw	r22, r30
    77c0:	ff 27       	eor	r31, r31
    77c2:	93 58       	subi	r25, 0x83	; 131
    77c4:	5f 4f       	sbci	r21, 0xFF	; 255
    77c6:	2a f0       	brmi	.+10     	; 0x77d2 <__divsf3_pse+0x6c>
    77c8:	9e 3f       	cpi	r25, 0xFE	; 254
    77ca:	51 05       	cpc	r21, r1
    77cc:	68 f0       	brcs	.+26     	; 0x77e8 <__divsf3_pse+0x82>
    77ce:	b6 c0       	rjmp	.+364    	; 0x793c <__fp_inf>
    77d0:	5e c1       	rjmp	.+700    	; 0x7a8e <__fp_szero>
    77d2:	5f 3f       	cpi	r21, 0xFF	; 255
    77d4:	ec f3       	brlt	.-6      	; 0x77d0 <__divsf3_pse+0x6a>
    77d6:	98 3e       	cpi	r25, 0xE8	; 232
    77d8:	dc f3       	brlt	.-10     	; 0x77d0 <__divsf3_pse+0x6a>
    77da:	86 95       	lsr	r24
    77dc:	77 95       	ror	r23
    77de:	67 95       	ror	r22
    77e0:	b7 95       	ror	r27
    77e2:	f7 95       	ror	r31
    77e4:	9f 5f       	subi	r25, 0xFF	; 255
    77e6:	c9 f7       	brne	.-14     	; 0x77da <__divsf3_pse+0x74>
    77e8:	88 0f       	add	r24, r24
    77ea:	91 1d       	adc	r25, r1
    77ec:	96 95       	lsr	r25
    77ee:	87 95       	ror	r24
    77f0:	97 f9       	bld	r25, 7
    77f2:	08 95       	ret
    77f4:	e1 e0       	ldi	r30, 0x01	; 1
    77f6:	66 0f       	add	r22, r22
    77f8:	77 1f       	adc	r23, r23
    77fa:	88 1f       	adc	r24, r24
    77fc:	bb 1f       	adc	r27, r27
    77fe:	62 17       	cp	r22, r18
    7800:	73 07       	cpc	r23, r19
    7802:	84 07       	cpc	r24, r20
    7804:	ba 07       	cpc	r27, r26
    7806:	20 f0       	brcs	.+8      	; 0x7810 <__divsf3_pse+0xaa>
    7808:	62 1b       	sub	r22, r18
    780a:	73 0b       	sbc	r23, r19
    780c:	84 0b       	sbc	r24, r20
    780e:	ba 0b       	sbc	r27, r26
    7810:	ee 1f       	adc	r30, r30
    7812:	88 f7       	brcc	.-30     	; 0x77f6 <__divsf3_pse+0x90>
    7814:	e0 95       	com	r30
    7816:	08 95       	ret

00007818 <__fixsfsi>:
    7818:	04 d0       	rcall	.+8      	; 0x7822 <__fixunssfsi>
    781a:	68 94       	set
    781c:	b1 11       	cpse	r27, r1
    781e:	37 c1       	rjmp	.+622    	; 0x7a8e <__fp_szero>
    7820:	08 95       	ret

00007822 <__fixunssfsi>:
    7822:	1a d1       	rcall	.+564    	; 0x7a58 <__fp_splitA>
    7824:	88 f0       	brcs	.+34     	; 0x7848 <__fixunssfsi+0x26>
    7826:	9f 57       	subi	r25, 0x7F	; 127
    7828:	90 f0       	brcs	.+36     	; 0x784e <__fixunssfsi+0x2c>
    782a:	b9 2f       	mov	r27, r25
    782c:	99 27       	eor	r25, r25
    782e:	b7 51       	subi	r27, 0x17	; 23
    7830:	a0 f0       	brcs	.+40     	; 0x785a <__fixunssfsi+0x38>
    7832:	d1 f0       	breq	.+52     	; 0x7868 <__fixunssfsi+0x46>
    7834:	66 0f       	add	r22, r22
    7836:	77 1f       	adc	r23, r23
    7838:	88 1f       	adc	r24, r24
    783a:	99 1f       	adc	r25, r25
    783c:	1a f0       	brmi	.+6      	; 0x7844 <__fixunssfsi+0x22>
    783e:	ba 95       	dec	r27
    7840:	c9 f7       	brne	.-14     	; 0x7834 <__fixunssfsi+0x12>
    7842:	12 c0       	rjmp	.+36     	; 0x7868 <__fixunssfsi+0x46>
    7844:	b1 30       	cpi	r27, 0x01	; 1
    7846:	81 f0       	breq	.+32     	; 0x7868 <__fixunssfsi+0x46>
    7848:	21 d1       	rcall	.+578    	; 0x7a8c <__fp_zero>
    784a:	b1 e0       	ldi	r27, 0x01	; 1
    784c:	08 95       	ret
    784e:	1e c1       	rjmp	.+572    	; 0x7a8c <__fp_zero>
    7850:	67 2f       	mov	r22, r23
    7852:	78 2f       	mov	r23, r24
    7854:	88 27       	eor	r24, r24
    7856:	b8 5f       	subi	r27, 0xF8	; 248
    7858:	39 f0       	breq	.+14     	; 0x7868 <__fixunssfsi+0x46>
    785a:	b9 3f       	cpi	r27, 0xF9	; 249
    785c:	cc f3       	brlt	.-14     	; 0x7850 <__fixunssfsi+0x2e>
    785e:	86 95       	lsr	r24
    7860:	77 95       	ror	r23
    7862:	67 95       	ror	r22
    7864:	b3 95       	inc	r27
    7866:	d9 f7       	brne	.-10     	; 0x785e <__fixunssfsi+0x3c>
    7868:	3e f4       	brtc	.+14     	; 0x7878 <__fixunssfsi+0x56>
    786a:	90 95       	com	r25
    786c:	80 95       	com	r24
    786e:	70 95       	com	r23
    7870:	61 95       	neg	r22
    7872:	7f 4f       	sbci	r23, 0xFF	; 255
    7874:	8f 4f       	sbci	r24, 0xFF	; 255
    7876:	9f 4f       	sbci	r25, 0xFF	; 255
    7878:	08 95       	ret

0000787a <__floatunsisf>:
    787a:	e8 94       	clt
    787c:	09 c0       	rjmp	.+18     	; 0x7890 <__floatsisf+0x12>

0000787e <__floatsisf>:
    787e:	97 fb       	bst	r25, 7
    7880:	3e f4       	brtc	.+14     	; 0x7890 <__floatsisf+0x12>
    7882:	90 95       	com	r25
    7884:	80 95       	com	r24
    7886:	70 95       	com	r23
    7888:	61 95       	neg	r22
    788a:	7f 4f       	sbci	r23, 0xFF	; 255
    788c:	8f 4f       	sbci	r24, 0xFF	; 255
    788e:	9f 4f       	sbci	r25, 0xFF	; 255
    7890:	99 23       	and	r25, r25
    7892:	a9 f0       	breq	.+42     	; 0x78be <__floatsisf+0x40>
    7894:	f9 2f       	mov	r31, r25
    7896:	96 e9       	ldi	r25, 0x96	; 150
    7898:	bb 27       	eor	r27, r27
    789a:	93 95       	inc	r25
    789c:	f6 95       	lsr	r31
    789e:	87 95       	ror	r24
    78a0:	77 95       	ror	r23
    78a2:	67 95       	ror	r22
    78a4:	b7 95       	ror	r27
    78a6:	f1 11       	cpse	r31, r1
    78a8:	f8 cf       	rjmp	.-16     	; 0x789a <__floatsisf+0x1c>
    78aa:	fa f4       	brpl	.+62     	; 0x78ea <__floatsisf+0x6c>
    78ac:	bb 0f       	add	r27, r27
    78ae:	11 f4       	brne	.+4      	; 0x78b4 <__floatsisf+0x36>
    78b0:	60 ff       	sbrs	r22, 0
    78b2:	1b c0       	rjmp	.+54     	; 0x78ea <__floatsisf+0x6c>
    78b4:	6f 5f       	subi	r22, 0xFF	; 255
    78b6:	7f 4f       	sbci	r23, 0xFF	; 255
    78b8:	8f 4f       	sbci	r24, 0xFF	; 255
    78ba:	9f 4f       	sbci	r25, 0xFF	; 255
    78bc:	16 c0       	rjmp	.+44     	; 0x78ea <__floatsisf+0x6c>
    78be:	88 23       	and	r24, r24
    78c0:	11 f0       	breq	.+4      	; 0x78c6 <__floatsisf+0x48>
    78c2:	96 e9       	ldi	r25, 0x96	; 150
    78c4:	11 c0       	rjmp	.+34     	; 0x78e8 <__floatsisf+0x6a>
    78c6:	77 23       	and	r23, r23
    78c8:	21 f0       	breq	.+8      	; 0x78d2 <__floatsisf+0x54>
    78ca:	9e e8       	ldi	r25, 0x8E	; 142
    78cc:	87 2f       	mov	r24, r23
    78ce:	76 2f       	mov	r23, r22
    78d0:	05 c0       	rjmp	.+10     	; 0x78dc <__floatsisf+0x5e>
    78d2:	66 23       	and	r22, r22
    78d4:	71 f0       	breq	.+28     	; 0x78f2 <__floatsisf+0x74>
    78d6:	96 e8       	ldi	r25, 0x86	; 134
    78d8:	86 2f       	mov	r24, r22
    78da:	70 e0       	ldi	r23, 0x00	; 0
    78dc:	60 e0       	ldi	r22, 0x00	; 0
    78de:	2a f0       	brmi	.+10     	; 0x78ea <__floatsisf+0x6c>
    78e0:	9a 95       	dec	r25
    78e2:	66 0f       	add	r22, r22
    78e4:	77 1f       	adc	r23, r23
    78e6:	88 1f       	adc	r24, r24
    78e8:	da f7       	brpl	.-10     	; 0x78e0 <__floatsisf+0x62>
    78ea:	88 0f       	add	r24, r24
    78ec:	96 95       	lsr	r25
    78ee:	87 95       	ror	r24
    78f0:	97 f9       	bld	r25, 7
    78f2:	08 95       	ret

000078f4 <__fp_cmp>:
    78f4:	99 0f       	add	r25, r25
    78f6:	00 08       	sbc	r0, r0
    78f8:	55 0f       	add	r21, r21
    78fa:	aa 0b       	sbc	r26, r26
    78fc:	e0 e8       	ldi	r30, 0x80	; 128
    78fe:	fe ef       	ldi	r31, 0xFE	; 254
    7900:	16 16       	cp	r1, r22
    7902:	17 06       	cpc	r1, r23
    7904:	e8 07       	cpc	r30, r24
    7906:	f9 07       	cpc	r31, r25
    7908:	c0 f0       	brcs	.+48     	; 0x793a <__fp_cmp+0x46>
    790a:	12 16       	cp	r1, r18
    790c:	13 06       	cpc	r1, r19
    790e:	e4 07       	cpc	r30, r20
    7910:	f5 07       	cpc	r31, r21
    7912:	98 f0       	brcs	.+38     	; 0x793a <__fp_cmp+0x46>
    7914:	62 1b       	sub	r22, r18
    7916:	73 0b       	sbc	r23, r19
    7918:	84 0b       	sbc	r24, r20
    791a:	95 0b       	sbc	r25, r21
    791c:	39 f4       	brne	.+14     	; 0x792c <__fp_cmp+0x38>
    791e:	0a 26       	eor	r0, r26
    7920:	61 f0       	breq	.+24     	; 0x793a <__fp_cmp+0x46>
    7922:	23 2b       	or	r18, r19
    7924:	24 2b       	or	r18, r20
    7926:	25 2b       	or	r18, r21
    7928:	21 f4       	brne	.+8      	; 0x7932 <__fp_cmp+0x3e>
    792a:	08 95       	ret
    792c:	0a 26       	eor	r0, r26
    792e:	09 f4       	brne	.+2      	; 0x7932 <__fp_cmp+0x3e>
    7930:	a1 40       	sbci	r26, 0x01	; 1
    7932:	a6 95       	lsr	r26
    7934:	8f ef       	ldi	r24, 0xFF	; 255
    7936:	81 1d       	adc	r24, r1
    7938:	81 1d       	adc	r24, r1
    793a:	08 95       	ret

0000793c <__fp_inf>:
    793c:	97 f9       	bld	r25, 7
    793e:	9f 67       	ori	r25, 0x7F	; 127
    7940:	80 e8       	ldi	r24, 0x80	; 128
    7942:	70 e0       	ldi	r23, 0x00	; 0
    7944:	60 e0       	ldi	r22, 0x00	; 0
    7946:	08 95       	ret

00007948 <__fp_nan>:
    7948:	9f ef       	ldi	r25, 0xFF	; 255
    794a:	80 ec       	ldi	r24, 0xC0	; 192
    794c:	08 95       	ret

0000794e <__fp_powser>:
    794e:	df 93       	push	r29
    7950:	cf 93       	push	r28
    7952:	1f 93       	push	r17
    7954:	0f 93       	push	r16
    7956:	ff 92       	push	r15
    7958:	ef 92       	push	r14
    795a:	df 92       	push	r13
    795c:	7b 01       	movw	r14, r22
    795e:	8c 01       	movw	r16, r24
    7960:	68 94       	set
    7962:	05 c0       	rjmp	.+10     	; 0x796e <__fp_powser+0x20>
    7964:	da 2e       	mov	r13, r26
    7966:	ef 01       	movw	r28, r30
    7968:	af d0       	rcall	.+350    	; 0x7ac8 <__mulsf3x>
    796a:	fe 01       	movw	r30, r28
    796c:	e8 94       	clt
    796e:	a5 91       	lpm	r26, Z+
    7970:	25 91       	lpm	r18, Z+
    7972:	35 91       	lpm	r19, Z+
    7974:	45 91       	lpm	r20, Z+
    7976:	55 91       	lpm	r21, Z+
    7978:	ae f3       	brts	.-22     	; 0x7964 <__fp_powser+0x16>
    797a:	ef 01       	movw	r28, r30
    797c:	29 de       	rcall	.-942    	; 0x75d0 <__addsf3x>
    797e:	fe 01       	movw	r30, r28
    7980:	97 01       	movw	r18, r14
    7982:	a8 01       	movw	r20, r16
    7984:	da 94       	dec	r13
    7986:	79 f7       	brne	.-34     	; 0x7966 <__fp_powser+0x18>
    7988:	df 90       	pop	r13
    798a:	ef 90       	pop	r14
    798c:	ff 90       	pop	r15
    798e:	0f 91       	pop	r16
    7990:	1f 91       	pop	r17
    7992:	cf 91       	pop	r28
    7994:	df 91       	pop	r29
    7996:	08 95       	ret

00007998 <__fp_pscA>:
    7998:	00 24       	eor	r0, r0
    799a:	0a 94       	dec	r0
    799c:	16 16       	cp	r1, r22
    799e:	17 06       	cpc	r1, r23
    79a0:	18 06       	cpc	r1, r24
    79a2:	09 06       	cpc	r0, r25
    79a4:	08 95       	ret

000079a6 <__fp_pscB>:
    79a6:	00 24       	eor	r0, r0
    79a8:	0a 94       	dec	r0
    79aa:	12 16       	cp	r1, r18
    79ac:	13 06       	cpc	r1, r19
    79ae:	14 06       	cpc	r1, r20
    79b0:	05 06       	cpc	r0, r21
    79b2:	08 95       	ret
    79b4:	c9 cf       	rjmp	.-110    	; 0x7948 <__fp_nan>

000079b6 <__fp_rempio2>:
    79b6:	50 d0       	rcall	.+160    	; 0x7a58 <__fp_splitA>
    79b8:	e8 f3       	brcs	.-6      	; 0x79b4 <__fp_pscB+0xe>
    79ba:	e8 94       	clt
    79bc:	e0 e0       	ldi	r30, 0x00	; 0
    79be:	bb 27       	eor	r27, r27
    79c0:	9f 57       	subi	r25, 0x7F	; 127
    79c2:	f0 f0       	brcs	.+60     	; 0x7a00 <__fp_rempio2+0x4a>
    79c4:	2a ed       	ldi	r18, 0xDA	; 218
    79c6:	3f e0       	ldi	r19, 0x0F	; 15
    79c8:	49 ec       	ldi	r20, 0xC9	; 201
    79ca:	06 c0       	rjmp	.+12     	; 0x79d8 <__fp_rempio2+0x22>
    79cc:	ee 0f       	add	r30, r30
    79ce:	bb 0f       	add	r27, r27
    79d0:	66 1f       	adc	r22, r22
    79d2:	77 1f       	adc	r23, r23
    79d4:	88 1f       	adc	r24, r24
    79d6:	28 f0       	brcs	.+10     	; 0x79e2 <__fp_rempio2+0x2c>
    79d8:	b2 3a       	cpi	r27, 0xA2	; 162
    79da:	62 07       	cpc	r22, r18
    79dc:	73 07       	cpc	r23, r19
    79de:	84 07       	cpc	r24, r20
    79e0:	28 f0       	brcs	.+10     	; 0x79ec <__fp_rempio2+0x36>
    79e2:	b2 5a       	subi	r27, 0xA2	; 162
    79e4:	62 0b       	sbc	r22, r18
    79e6:	73 0b       	sbc	r23, r19
    79e8:	84 0b       	sbc	r24, r20
    79ea:	e3 95       	inc	r30
    79ec:	9a 95       	dec	r25
    79ee:	72 f7       	brpl	.-36     	; 0x79cc <__fp_rempio2+0x16>
    79f0:	80 38       	cpi	r24, 0x80	; 128
    79f2:	30 f4       	brcc	.+12     	; 0x7a00 <__fp_rempio2+0x4a>
    79f4:	9a 95       	dec	r25
    79f6:	bb 0f       	add	r27, r27
    79f8:	66 1f       	adc	r22, r22
    79fa:	77 1f       	adc	r23, r23
    79fc:	88 1f       	adc	r24, r24
    79fe:	d2 f7       	brpl	.-12     	; 0x79f4 <__fp_rempio2+0x3e>
    7a00:	90 48       	sbci	r25, 0x80	; 128
    7a02:	06 c1       	rjmp	.+524    	; 0x7c10 <__fp_mpack_finite>

00007a04 <__fp_round>:
    7a04:	09 2e       	mov	r0, r25
    7a06:	03 94       	inc	r0
    7a08:	00 0c       	add	r0, r0
    7a0a:	11 f4       	brne	.+4      	; 0x7a10 <__fp_round+0xc>
    7a0c:	88 23       	and	r24, r24
    7a0e:	52 f0       	brmi	.+20     	; 0x7a24 <__fp_round+0x20>
    7a10:	bb 0f       	add	r27, r27
    7a12:	40 f4       	brcc	.+16     	; 0x7a24 <__fp_round+0x20>
    7a14:	bf 2b       	or	r27, r31
    7a16:	11 f4       	brne	.+4      	; 0x7a1c <__fp_round+0x18>
    7a18:	60 ff       	sbrs	r22, 0
    7a1a:	04 c0       	rjmp	.+8      	; 0x7a24 <__fp_round+0x20>
    7a1c:	6f 5f       	subi	r22, 0xFF	; 255
    7a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    7a20:	8f 4f       	sbci	r24, 0xFF	; 255
    7a22:	9f 4f       	sbci	r25, 0xFF	; 255
    7a24:	08 95       	ret

00007a26 <__fp_sinus>:
    7a26:	ef 93       	push	r30
    7a28:	e0 ff       	sbrs	r30, 0
    7a2a:	06 c0       	rjmp	.+12     	; 0x7a38 <__fp_sinus+0x12>
    7a2c:	a2 ea       	ldi	r26, 0xA2	; 162
    7a2e:	2a ed       	ldi	r18, 0xDA	; 218
    7a30:	3f e0       	ldi	r19, 0x0F	; 15
    7a32:	49 ec       	ldi	r20, 0xC9	; 201
    7a34:	5f eb       	ldi	r21, 0xBF	; 191
    7a36:	cc dd       	rcall	.-1128   	; 0x75d0 <__addsf3x>
    7a38:	e5 df       	rcall	.-54     	; 0x7a04 <__fp_round>
    7a3a:	0f 90       	pop	r0
    7a3c:	03 94       	inc	r0
    7a3e:	01 fc       	sbrc	r0, 1
    7a40:	90 58       	subi	r25, 0x80	; 128
    7a42:	e9 eb       	ldi	r30, 0xB9	; 185
    7a44:	f0 e0       	ldi	r31, 0x00	; 0
    7a46:	f7 c0       	rjmp	.+494    	; 0x7c36 <__fp_powsodd>

00007a48 <__fp_split3>:
    7a48:	57 fd       	sbrc	r21, 7
    7a4a:	90 58       	subi	r25, 0x80	; 128
    7a4c:	44 0f       	add	r20, r20
    7a4e:	55 1f       	adc	r21, r21
    7a50:	59 f0       	breq	.+22     	; 0x7a68 <__fp_splitA+0x10>
    7a52:	5f 3f       	cpi	r21, 0xFF	; 255
    7a54:	71 f0       	breq	.+28     	; 0x7a72 <__fp_splitA+0x1a>
    7a56:	47 95       	ror	r20

00007a58 <__fp_splitA>:
    7a58:	88 0f       	add	r24, r24
    7a5a:	97 fb       	bst	r25, 7
    7a5c:	99 1f       	adc	r25, r25
    7a5e:	61 f0       	breq	.+24     	; 0x7a78 <__fp_splitA+0x20>
    7a60:	9f 3f       	cpi	r25, 0xFF	; 255
    7a62:	79 f0       	breq	.+30     	; 0x7a82 <__fp_splitA+0x2a>
    7a64:	87 95       	ror	r24
    7a66:	08 95       	ret
    7a68:	12 16       	cp	r1, r18
    7a6a:	13 06       	cpc	r1, r19
    7a6c:	14 06       	cpc	r1, r20
    7a6e:	55 1f       	adc	r21, r21
    7a70:	f2 cf       	rjmp	.-28     	; 0x7a56 <__fp_split3+0xe>
    7a72:	46 95       	lsr	r20
    7a74:	f1 df       	rcall	.-30     	; 0x7a58 <__fp_splitA>
    7a76:	08 c0       	rjmp	.+16     	; 0x7a88 <__fp_splitA+0x30>
    7a78:	16 16       	cp	r1, r22
    7a7a:	17 06       	cpc	r1, r23
    7a7c:	18 06       	cpc	r1, r24
    7a7e:	99 1f       	adc	r25, r25
    7a80:	f1 cf       	rjmp	.-30     	; 0x7a64 <__fp_splitA+0xc>
    7a82:	86 95       	lsr	r24
    7a84:	71 05       	cpc	r23, r1
    7a86:	61 05       	cpc	r22, r1
    7a88:	08 94       	sec
    7a8a:	08 95       	ret

00007a8c <__fp_zero>:
    7a8c:	e8 94       	clt

00007a8e <__fp_szero>:
    7a8e:	bb 27       	eor	r27, r27
    7a90:	66 27       	eor	r22, r22
    7a92:	77 27       	eor	r23, r23
    7a94:	cb 01       	movw	r24, r22
    7a96:	97 f9       	bld	r25, 7
    7a98:	08 95       	ret

00007a9a <__gesf2>:
    7a9a:	2c df       	rcall	.-424    	; 0x78f4 <__fp_cmp>
    7a9c:	08 f4       	brcc	.+2      	; 0x7aa0 <__gesf2+0x6>
    7a9e:	8f ef       	ldi	r24, 0xFF	; 255
    7aa0:	08 95       	ret

00007aa2 <inverse>:
    7aa2:	9b 01       	movw	r18, r22
    7aa4:	ac 01       	movw	r20, r24
    7aa6:	60 e0       	ldi	r22, 0x00	; 0
    7aa8:	70 e0       	ldi	r23, 0x00	; 0
    7aaa:	80 e8       	ldi	r24, 0x80	; 128
    7aac:	9f e3       	ldi	r25, 0x3F	; 63
    7aae:	4c ce       	rjmp	.-872    	; 0x7748 <__divsf3>

00007ab0 <__mulsf3>:
    7ab0:	0b d0       	rcall	.+22     	; 0x7ac8 <__mulsf3x>
    7ab2:	a8 cf       	rjmp	.-176    	; 0x7a04 <__fp_round>
    7ab4:	71 df       	rcall	.-286    	; 0x7998 <__fp_pscA>
    7ab6:	28 f0       	brcs	.+10     	; 0x7ac2 <__mulsf3+0x12>
    7ab8:	76 df       	rcall	.-276    	; 0x79a6 <__fp_pscB>
    7aba:	18 f0       	brcs	.+6      	; 0x7ac2 <__mulsf3+0x12>
    7abc:	95 23       	and	r25, r21
    7abe:	09 f0       	breq	.+2      	; 0x7ac2 <__mulsf3+0x12>
    7ac0:	3d cf       	rjmp	.-390    	; 0x793c <__fp_inf>
    7ac2:	42 cf       	rjmp	.-380    	; 0x7948 <__fp_nan>
    7ac4:	11 24       	eor	r1, r1
    7ac6:	e3 cf       	rjmp	.-58     	; 0x7a8e <__fp_szero>

00007ac8 <__mulsf3x>:
    7ac8:	bf df       	rcall	.-130    	; 0x7a48 <__fp_split3>
    7aca:	a0 f3       	brcs	.-24     	; 0x7ab4 <__mulsf3+0x4>

00007acc <__mulsf3_pse>:
    7acc:	95 9f       	mul	r25, r21
    7ace:	d1 f3       	breq	.-12     	; 0x7ac4 <__mulsf3+0x14>
    7ad0:	95 0f       	add	r25, r21
    7ad2:	50 e0       	ldi	r21, 0x00	; 0
    7ad4:	55 1f       	adc	r21, r21
    7ad6:	62 9f       	mul	r22, r18
    7ad8:	f0 01       	movw	r30, r0
    7ada:	72 9f       	mul	r23, r18
    7adc:	bb 27       	eor	r27, r27
    7ade:	f0 0d       	add	r31, r0
    7ae0:	b1 1d       	adc	r27, r1
    7ae2:	63 9f       	mul	r22, r19
    7ae4:	aa 27       	eor	r26, r26
    7ae6:	f0 0d       	add	r31, r0
    7ae8:	b1 1d       	adc	r27, r1
    7aea:	aa 1f       	adc	r26, r26
    7aec:	64 9f       	mul	r22, r20
    7aee:	66 27       	eor	r22, r22
    7af0:	b0 0d       	add	r27, r0
    7af2:	a1 1d       	adc	r26, r1
    7af4:	66 1f       	adc	r22, r22
    7af6:	82 9f       	mul	r24, r18
    7af8:	22 27       	eor	r18, r18
    7afa:	b0 0d       	add	r27, r0
    7afc:	a1 1d       	adc	r26, r1
    7afe:	62 1f       	adc	r22, r18
    7b00:	73 9f       	mul	r23, r19
    7b02:	b0 0d       	add	r27, r0
    7b04:	a1 1d       	adc	r26, r1
    7b06:	62 1f       	adc	r22, r18
    7b08:	83 9f       	mul	r24, r19
    7b0a:	a0 0d       	add	r26, r0
    7b0c:	61 1d       	adc	r22, r1
    7b0e:	22 1f       	adc	r18, r18
    7b10:	74 9f       	mul	r23, r20
    7b12:	33 27       	eor	r19, r19
    7b14:	a0 0d       	add	r26, r0
    7b16:	61 1d       	adc	r22, r1
    7b18:	23 1f       	adc	r18, r19
    7b1a:	84 9f       	mul	r24, r20
    7b1c:	60 0d       	add	r22, r0
    7b1e:	21 1d       	adc	r18, r1
    7b20:	82 2f       	mov	r24, r18
    7b22:	76 2f       	mov	r23, r22
    7b24:	6a 2f       	mov	r22, r26
    7b26:	11 24       	eor	r1, r1
    7b28:	9f 57       	subi	r25, 0x7F	; 127
    7b2a:	50 40       	sbci	r21, 0x00	; 0
    7b2c:	8a f0       	brmi	.+34     	; 0x7b50 <__mulsf3_pse+0x84>
    7b2e:	e1 f0       	breq	.+56     	; 0x7b68 <__mulsf3_pse+0x9c>
    7b30:	88 23       	and	r24, r24
    7b32:	4a f0       	brmi	.+18     	; 0x7b46 <__mulsf3_pse+0x7a>
    7b34:	ee 0f       	add	r30, r30
    7b36:	ff 1f       	adc	r31, r31
    7b38:	bb 1f       	adc	r27, r27
    7b3a:	66 1f       	adc	r22, r22
    7b3c:	77 1f       	adc	r23, r23
    7b3e:	88 1f       	adc	r24, r24
    7b40:	91 50       	subi	r25, 0x01	; 1
    7b42:	50 40       	sbci	r21, 0x00	; 0
    7b44:	a9 f7       	brne	.-22     	; 0x7b30 <__mulsf3_pse+0x64>
    7b46:	9e 3f       	cpi	r25, 0xFE	; 254
    7b48:	51 05       	cpc	r21, r1
    7b4a:	70 f0       	brcs	.+28     	; 0x7b68 <__mulsf3_pse+0x9c>
    7b4c:	f7 ce       	rjmp	.-530    	; 0x793c <__fp_inf>
    7b4e:	9f cf       	rjmp	.-194    	; 0x7a8e <__fp_szero>
    7b50:	5f 3f       	cpi	r21, 0xFF	; 255
    7b52:	ec f3       	brlt	.-6      	; 0x7b4e <__mulsf3_pse+0x82>
    7b54:	98 3e       	cpi	r25, 0xE8	; 232
    7b56:	dc f3       	brlt	.-10     	; 0x7b4e <__mulsf3_pse+0x82>
    7b58:	86 95       	lsr	r24
    7b5a:	77 95       	ror	r23
    7b5c:	67 95       	ror	r22
    7b5e:	b7 95       	ror	r27
    7b60:	f7 95       	ror	r31
    7b62:	e7 95       	ror	r30
    7b64:	9f 5f       	subi	r25, 0xFF	; 255
    7b66:	c1 f7       	brne	.-16     	; 0x7b58 <__mulsf3_pse+0x8c>
    7b68:	fe 2b       	or	r31, r30
    7b6a:	88 0f       	add	r24, r24
    7b6c:	91 1d       	adc	r25, r1
    7b6e:	96 95       	lsr	r25
    7b70:	87 95       	ror	r24
    7b72:	97 f9       	bld	r25, 7
    7b74:	08 95       	ret

00007b76 <sin>:
    7b76:	9f 93       	push	r25
    7b78:	1e df       	rcall	.-452    	; 0x79b6 <__fp_rempio2>
    7b7a:	0f 90       	pop	r0
    7b7c:	07 fc       	sbrc	r0, 7
    7b7e:	ee 5f       	subi	r30, 0xFE	; 254
    7b80:	52 cf       	rjmp	.-348    	; 0x7a26 <__fp_sinus>
    7b82:	11 f4       	brne	.+4      	; 0x7b88 <sin+0x12>
    7b84:	0e f4       	brtc	.+2      	; 0x7b88 <sin+0x12>
    7b86:	e0 ce       	rjmp	.-576    	; 0x7948 <__fp_nan>
    7b88:	41 c0       	rjmp	.+130    	; 0x7c0c <__fp_mpack>

00007b8a <sqrt>:
    7b8a:	66 df       	rcall	.-308    	; 0x7a58 <__fp_splitA>
    7b8c:	d0 f3       	brcs	.-12     	; 0x7b82 <sin+0xc>
    7b8e:	99 23       	and	r25, r25
    7b90:	d9 f3       	breq	.-10     	; 0x7b88 <sin+0x12>
    7b92:	ce f3       	brts	.-14     	; 0x7b86 <sin+0x10>
    7b94:	9f 57       	subi	r25, 0x7F	; 127
    7b96:	55 0b       	sbc	r21, r21
    7b98:	87 ff       	sbrs	r24, 7
    7b9a:	46 d0       	rcall	.+140    	; 0x7c28 <__fp_norm2>
    7b9c:	00 24       	eor	r0, r0
    7b9e:	a0 e6       	ldi	r26, 0x60	; 96
    7ba0:	40 ea       	ldi	r20, 0xA0	; 160
    7ba2:	90 01       	movw	r18, r0
    7ba4:	80 58       	subi	r24, 0x80	; 128
    7ba6:	56 95       	lsr	r21
    7ba8:	97 95       	ror	r25
    7baa:	28 f4       	brcc	.+10     	; 0x7bb6 <sqrt+0x2c>
    7bac:	80 5c       	subi	r24, 0xC0	; 192
    7bae:	66 0f       	add	r22, r22
    7bb0:	77 1f       	adc	r23, r23
    7bb2:	88 1f       	adc	r24, r24
    7bb4:	20 f0       	brcs	.+8      	; 0x7bbe <sqrt+0x34>
    7bb6:	26 17       	cp	r18, r22
    7bb8:	37 07       	cpc	r19, r23
    7bba:	48 07       	cpc	r20, r24
    7bbc:	30 f4       	brcc	.+12     	; 0x7bca <sqrt+0x40>
    7bbe:	62 1b       	sub	r22, r18
    7bc0:	73 0b       	sbc	r23, r19
    7bc2:	84 0b       	sbc	r24, r20
    7bc4:	20 29       	or	r18, r0
    7bc6:	31 29       	or	r19, r1
    7bc8:	4a 2b       	or	r20, r26
    7bca:	a6 95       	lsr	r26
    7bcc:	17 94       	ror	r1
    7bce:	07 94       	ror	r0
    7bd0:	20 25       	eor	r18, r0
    7bd2:	31 25       	eor	r19, r1
    7bd4:	4a 27       	eor	r20, r26
    7bd6:	58 f7       	brcc	.-42     	; 0x7bae <sqrt+0x24>
    7bd8:	66 0f       	add	r22, r22
    7bda:	77 1f       	adc	r23, r23
    7bdc:	88 1f       	adc	r24, r24
    7bde:	20 f0       	brcs	.+8      	; 0x7be8 <sqrt+0x5e>
    7be0:	26 17       	cp	r18, r22
    7be2:	37 07       	cpc	r19, r23
    7be4:	48 07       	cpc	r20, r24
    7be6:	30 f4       	brcc	.+12     	; 0x7bf4 <sqrt+0x6a>
    7be8:	62 0b       	sbc	r22, r18
    7bea:	73 0b       	sbc	r23, r19
    7bec:	84 0b       	sbc	r24, r20
    7bee:	20 0d       	add	r18, r0
    7bf0:	31 1d       	adc	r19, r1
    7bf2:	41 1d       	adc	r20, r1
    7bf4:	a0 95       	com	r26
    7bf6:	81 f7       	brne	.-32     	; 0x7bd8 <sqrt+0x4e>
    7bf8:	b9 01       	movw	r22, r18
    7bfa:	84 2f       	mov	r24, r20
    7bfc:	91 58       	subi	r25, 0x81	; 129
    7bfe:	88 0f       	add	r24, r24
    7c00:	96 95       	lsr	r25
    7c02:	87 95       	ror	r24
    7c04:	08 95       	ret

00007c06 <square>:
    7c06:	9b 01       	movw	r18, r22
    7c08:	ac 01       	movw	r20, r24
    7c0a:	52 cf       	rjmp	.-348    	; 0x7ab0 <__mulsf3>

00007c0c <__fp_mpack>:
    7c0c:	9f 3f       	cpi	r25, 0xFF	; 255
    7c0e:	31 f0       	breq	.+12     	; 0x7c1c <__fp_mpack_finite+0xc>

00007c10 <__fp_mpack_finite>:
    7c10:	91 50       	subi	r25, 0x01	; 1
    7c12:	20 f4       	brcc	.+8      	; 0x7c1c <__fp_mpack_finite+0xc>
    7c14:	87 95       	ror	r24
    7c16:	77 95       	ror	r23
    7c18:	67 95       	ror	r22
    7c1a:	b7 95       	ror	r27
    7c1c:	88 0f       	add	r24, r24
    7c1e:	91 1d       	adc	r25, r1
    7c20:	96 95       	lsr	r25
    7c22:	87 95       	ror	r24
    7c24:	97 f9       	bld	r25, 7
    7c26:	08 95       	ret

00007c28 <__fp_norm2>:
    7c28:	91 50       	subi	r25, 0x01	; 1
    7c2a:	50 40       	sbci	r21, 0x00	; 0
    7c2c:	66 0f       	add	r22, r22
    7c2e:	77 1f       	adc	r23, r23
    7c30:	88 1f       	adc	r24, r24
    7c32:	d2 f7       	brpl	.-12     	; 0x7c28 <__fp_norm2>
    7c34:	08 95       	ret

00007c36 <__fp_powsodd>:
    7c36:	9f 93       	push	r25
    7c38:	8f 93       	push	r24
    7c3a:	7f 93       	push	r23
    7c3c:	6f 93       	push	r22
    7c3e:	ff 93       	push	r31
    7c40:	ef 93       	push	r30
    7c42:	9b 01       	movw	r18, r22
    7c44:	ac 01       	movw	r20, r24
    7c46:	34 df       	rcall	.-408    	; 0x7ab0 <__mulsf3>
    7c48:	ef 91       	pop	r30
    7c4a:	ff 91       	pop	r31
    7c4c:	80 de       	rcall	.-768    	; 0x794e <__fp_powser>
    7c4e:	2f 91       	pop	r18
    7c50:	3f 91       	pop	r19
    7c52:	4f 91       	pop	r20
    7c54:	5f 91       	pop	r21
    7c56:	2c cf       	rjmp	.-424    	; 0x7ab0 <__mulsf3>

00007c58 <__mulsi3>:
    7c58:	62 9f       	mul	r22, r18
    7c5a:	d0 01       	movw	r26, r0
    7c5c:	73 9f       	mul	r23, r19
    7c5e:	f0 01       	movw	r30, r0
    7c60:	82 9f       	mul	r24, r18
    7c62:	e0 0d       	add	r30, r0
    7c64:	f1 1d       	adc	r31, r1
    7c66:	64 9f       	mul	r22, r20
    7c68:	e0 0d       	add	r30, r0
    7c6a:	f1 1d       	adc	r31, r1
    7c6c:	92 9f       	mul	r25, r18
    7c6e:	f0 0d       	add	r31, r0
    7c70:	83 9f       	mul	r24, r19
    7c72:	f0 0d       	add	r31, r0
    7c74:	74 9f       	mul	r23, r20
    7c76:	f0 0d       	add	r31, r0
    7c78:	65 9f       	mul	r22, r21
    7c7a:	f0 0d       	add	r31, r0
    7c7c:	99 27       	eor	r25, r25
    7c7e:	72 9f       	mul	r23, r18
    7c80:	b0 0d       	add	r27, r0
    7c82:	e1 1d       	adc	r30, r1
    7c84:	f9 1f       	adc	r31, r25
    7c86:	63 9f       	mul	r22, r19
    7c88:	b0 0d       	add	r27, r0
    7c8a:	e1 1d       	adc	r30, r1
    7c8c:	f9 1f       	adc	r31, r25
    7c8e:	bd 01       	movw	r22, r26
    7c90:	cf 01       	movw	r24, r30
    7c92:	11 24       	eor	r1, r1
    7c94:	08 95       	ret

00007c96 <__divmodhi4>:
    7c96:	97 fb       	bst	r25, 7
    7c98:	09 2e       	mov	r0, r25
    7c9a:	07 26       	eor	r0, r23
    7c9c:	0a d0       	rcall	.+20     	; 0x7cb2 <__divmodhi4_neg1>
    7c9e:	77 fd       	sbrc	r23, 7
    7ca0:	04 d0       	rcall	.+8      	; 0x7caa <__divmodhi4_neg2>
    7ca2:	27 d0       	rcall	.+78     	; 0x7cf2 <__udivmodhi4>
    7ca4:	06 d0       	rcall	.+12     	; 0x7cb2 <__divmodhi4_neg1>
    7ca6:	00 20       	and	r0, r0
    7ca8:	1a f4       	brpl	.+6      	; 0x7cb0 <__divmodhi4_exit>

00007caa <__divmodhi4_neg2>:
    7caa:	70 95       	com	r23
    7cac:	61 95       	neg	r22
    7cae:	7f 4f       	sbci	r23, 0xFF	; 255

00007cb0 <__divmodhi4_exit>:
    7cb0:	08 95       	ret

00007cb2 <__divmodhi4_neg1>:
    7cb2:	f6 f7       	brtc	.-4      	; 0x7cb0 <__divmodhi4_exit>
    7cb4:	90 95       	com	r25
    7cb6:	81 95       	neg	r24
    7cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    7cba:	08 95       	ret

00007cbc <__divmodsi4>:
    7cbc:	97 fb       	bst	r25, 7
    7cbe:	09 2e       	mov	r0, r25
    7cc0:	05 26       	eor	r0, r21
    7cc2:	0e d0       	rcall	.+28     	; 0x7ce0 <__divmodsi4_neg1>
    7cc4:	57 fd       	sbrc	r21, 7
    7cc6:	04 d0       	rcall	.+8      	; 0x7cd0 <__divmodsi4_neg2>
    7cc8:	28 d0       	rcall	.+80     	; 0x7d1a <__udivmodsi4>
    7cca:	0a d0       	rcall	.+20     	; 0x7ce0 <__divmodsi4_neg1>
    7ccc:	00 1c       	adc	r0, r0
    7cce:	38 f4       	brcc	.+14     	; 0x7cde <__divmodsi4_exit>

00007cd0 <__divmodsi4_neg2>:
    7cd0:	50 95       	com	r21
    7cd2:	40 95       	com	r20
    7cd4:	30 95       	com	r19
    7cd6:	21 95       	neg	r18
    7cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    7cda:	4f 4f       	sbci	r20, 0xFF	; 255
    7cdc:	5f 4f       	sbci	r21, 0xFF	; 255

00007cde <__divmodsi4_exit>:
    7cde:	08 95       	ret

00007ce0 <__divmodsi4_neg1>:
    7ce0:	f6 f7       	brtc	.-4      	; 0x7cde <__divmodsi4_exit>
    7ce2:	90 95       	com	r25
    7ce4:	80 95       	com	r24
    7ce6:	70 95       	com	r23
    7ce8:	61 95       	neg	r22
    7cea:	7f 4f       	sbci	r23, 0xFF	; 255
    7cec:	8f 4f       	sbci	r24, 0xFF	; 255
    7cee:	9f 4f       	sbci	r25, 0xFF	; 255
    7cf0:	08 95       	ret

00007cf2 <__udivmodhi4>:
    7cf2:	aa 1b       	sub	r26, r26
    7cf4:	bb 1b       	sub	r27, r27
    7cf6:	51 e1       	ldi	r21, 0x11	; 17
    7cf8:	07 c0       	rjmp	.+14     	; 0x7d08 <__udivmodhi4_ep>

00007cfa <__udivmodhi4_loop>:
    7cfa:	aa 1f       	adc	r26, r26
    7cfc:	bb 1f       	adc	r27, r27
    7cfe:	a6 17       	cp	r26, r22
    7d00:	b7 07       	cpc	r27, r23
    7d02:	10 f0       	brcs	.+4      	; 0x7d08 <__udivmodhi4_ep>
    7d04:	a6 1b       	sub	r26, r22
    7d06:	b7 0b       	sbc	r27, r23

00007d08 <__udivmodhi4_ep>:
    7d08:	88 1f       	adc	r24, r24
    7d0a:	99 1f       	adc	r25, r25
    7d0c:	5a 95       	dec	r21
    7d0e:	a9 f7       	brne	.-22     	; 0x7cfa <__udivmodhi4_loop>
    7d10:	80 95       	com	r24
    7d12:	90 95       	com	r25
    7d14:	bc 01       	movw	r22, r24
    7d16:	cd 01       	movw	r24, r26
    7d18:	08 95       	ret

00007d1a <__udivmodsi4>:
    7d1a:	a1 e2       	ldi	r26, 0x21	; 33
    7d1c:	1a 2e       	mov	r1, r26
    7d1e:	aa 1b       	sub	r26, r26
    7d20:	bb 1b       	sub	r27, r27
    7d22:	fd 01       	movw	r30, r26
    7d24:	0d c0       	rjmp	.+26     	; 0x7d40 <__udivmodsi4_ep>

00007d26 <__udivmodsi4_loop>:
    7d26:	aa 1f       	adc	r26, r26
    7d28:	bb 1f       	adc	r27, r27
    7d2a:	ee 1f       	adc	r30, r30
    7d2c:	ff 1f       	adc	r31, r31
    7d2e:	a2 17       	cp	r26, r18
    7d30:	b3 07       	cpc	r27, r19
    7d32:	e4 07       	cpc	r30, r20
    7d34:	f5 07       	cpc	r31, r21
    7d36:	20 f0       	brcs	.+8      	; 0x7d40 <__udivmodsi4_ep>
    7d38:	a2 1b       	sub	r26, r18
    7d3a:	b3 0b       	sbc	r27, r19
    7d3c:	e4 0b       	sbc	r30, r20
    7d3e:	f5 0b       	sbc	r31, r21

00007d40 <__udivmodsi4_ep>:
    7d40:	66 1f       	adc	r22, r22
    7d42:	77 1f       	adc	r23, r23
    7d44:	88 1f       	adc	r24, r24
    7d46:	99 1f       	adc	r25, r25
    7d48:	1a 94       	dec	r1
    7d4a:	69 f7       	brne	.-38     	; 0x7d26 <__udivmodsi4_loop>
    7d4c:	60 95       	com	r22
    7d4e:	70 95       	com	r23
    7d50:	80 95       	com	r24
    7d52:	90 95       	com	r25
    7d54:	9b 01       	movw	r18, r22
    7d56:	ac 01       	movw	r20, r24
    7d58:	bd 01       	movw	r22, r26
    7d5a:	cf 01       	movw	r24, r30
    7d5c:	08 95       	ret

00007d5e <_exit>:
    7d5e:	f8 94       	cli

00007d60 <__stop_program>:
    7d60:	ff cf       	rjmp	.-2      	; 0x7d60 <__stop_program>
